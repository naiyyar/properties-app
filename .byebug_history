continue
params
session[:unit_id].present?
session[:building_id].present?
session[:search_term].present?
session[:contribution_for]
session
params
paprams
continue
params[:zip]
address = params['buildings-search-txt'].split(',')[0]
params['buildings-search-txt'].present?
params
continue
params
continue
params
continue
params
continue
params
continue
@building = Building.find_by_building_street_address(params[:building][:building_street_address])
params[:building][:building_street_address].present?
params[:building][:building_street_address].present? and params[:building][:zipcode].present?
params
continue
session[:search_term]
session[:contribution_for]
continue
params
continue
params
resource = warden.authenticate!(:scope => resource_name)
controller_path
resource = warden.authenticate!(:scope => resource_name, :recall => "#{controller_path}#failure")
params[:user]
continue
request.xhr?
request
request.xhr
request.format
request.xhr?
flash[:notice] = message
message = find_message(:signed_up)
resource.active_for_authentication?
resource.persisted?
continue
messages = resource.errors.messages
resource
resource.persisted?
continue
params
continue
params
continue
params
continue
params['buildings-search-txt'].split(',')[0]
params['buildings-search-txt'].split(',')
params
continue
params
continue
params
continue
@unit.errors
@unit.error
@unit.update(unit_params)
unit_params
params[:unit]
params
@unit
continue
params
continue
params
continue
resource.errors.full_messages
continue
resource.errors.full_messages
resource.errors
resource.error
resource
continue
self.resource = resource_class.reset_password_by_token(resource_params)
resource_params
params
continue
resource_params
User
resource_class
self.resource
self
continue
!(residence_end_date.nil? and residence_start_date.nil?)
residence_start_date
residence_end_date
residence_end_date.nil?
residence_end_date
residence_end_date.nil?
!(residence_end_date.nil? and residence_end_date.nil?)
continue
authorization
continue
Authorization.all.destroy_all
auth1 = Authorization.where(:provider => auth.provider, :uid => auth.uid.to_s, :token => auth.credentials.token).first_or_initialize
auth.uid.to_s
auth.uid
Authorization.all[1]
Authorization.all[2]
Authorization.first
auth.provider
                                        :secret => auth.credentials.secret).first_or_initialize
                                        :token => auth.credentials.token, 
                                        :uid => auth.uid.to_s, 
authorization = Authorization.where(:provider => auth.provider, 
auth.credentials.secret
auth.credentials.token
Authorization.find(9)
auth.uid.to_s
authorization
continue
auth.info
auth
User.where('email = ?', auth["info"]["email"]).first
current_user
authorization.user
authorization.user.blank?
continue
provider
continue
provider
continue
session[:provider]
continue
session[:provider]
continue
session[:provider]
continue
session[:provider]
continue
session[:provider]
session
continue
auth
continue
auth
continue
session
request.env['omniauth.auth']
self
self.authorizations
self.authorization
continue
params
params[:building][:building_street_address].present? and params[:building][:zipcode].present?
@building = Building.find_by_building_street_address_and_zipcode(params[:building][:building_street_address], params[:building][:zipcode])
params
continue
current_user && !current_user.has_role?(:admin)
if current_user && !current_user.has_role?(:admin)
continue
session[:object_type]
session[:form_data]['contribution']
session[:form_data]
continue
session[:form_data]
params
continue
auth = request.env['omniauth.auth']
continue
auth.info
auth = request.env['omniauth.auth']
continue
auth.info
auth = request.env['omniauth.auth']
continue
auth.info
auth = request.env['omniauth.auth']
continue
auth.info.name
auth.info.email
auth.info
auth.email
User.where(provider: auth.provider, uid: auth.uid)
auth.uid
auth.provider
auth = request.env['omniauth.auth']
request.env['omniauth.auth']
@user
continue
params.methods
params
params.inspect
continue
params
super
continue
params
continue
params
continue
self.neighborhood == neighborhoods[0]
self.neighborhood != neighborhoods[0]
neighborhoods
continue
search[2]
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search.first.address_components_of_type(:neighborhood)
search[1]
search[0]
search[0..3]
continue
session[:form_data]['contribution']
continue
session[:form_data]['contribution']
session[:contribution]
session[:contribution_for]
session[:contribution]
session
object
contribution_for
continue
params
continue
session[:contribution_for]
session
params
continue
params
params[:building][:units_attributes]['0'][:building_id] = 123
params[:building][:units_attributes]['0']
params[:building][:units_attributes]
params[:unit_contribution]
params
continue
session
params
continue
session[:form_data]['building']['zipcode']
session[:form_data]['building'][:zipcode]
session[:form_data]['building']
session[:form_data][:building]
session[:form_data][:building][:building_name].present?
params[:building][:building_name].present?
session[:form_data]
session[:form_date]
params
continue
session[:search_term]
session
params
continue
