continue
listings_count.length
listings_count
continue
params
continue
building.active_listings_count
continue
building.active_listings_count
continue
building.active_listings_count
continue
@all_buildings.first.active_listings_count
@all_buildings.first
@all_buildings.count
building.methods
building.attributes
@listings_count
building.active_listings_count
building.instance_methods
building
continue
@listings_count
building.active_listings
building
continue
params[:filter]
params
continue
listing_filter_params
continue
@bedrooms
@bedrooms.present?
@amenities.present?
continue
listing_filter_params
@bedrooms.present?
@amenities.present?
filtered_listings.count
filtered_listings
@listing_type
continue
params[:filter]
params
params[:filter_params]
continue
@min_price.present?
@max_price
@min_price
@min_price.present?
@listings.count
@listings = @listings.with_beds(@bedrooms.split(' ').map(&:to_i))
@listings.count
@bedrooms.split(' ').map(&:to_i)
@bedrooms
@bedrooms.present?
@amenities
@amenities.present?
@ameniti@amenities.present?
continue
listing_type
listing_filter_params[:list_amenities]
listing_filter_params
continue
filtered_listings.pluck(:id)
filtered_listings
filtered_listings.count
continue
@bedrooms.split(' ').map(&:to_i)
@bedrooms.split(' ')
@building_listings
@building_listings.last
listing
@bedrooms.split(' ')
@building_listings = @building_listings.with_prices(@min_price, @max_price)
@building_listings.count
@building_listings = @building_listings.with_beds(@bedrooms.split(' '))
@bedrooms.split(' ')
@bedrooms
amenities.include?('rent_stabilized')
@building_listings.count
@building_listings = @building_listings.owner_paid
@building_listings.count
@building_listings = @building_listings.months_free
amenities.include?('months_free_rent')
amenities
@building_listings.count
@building_listings
continue
params[:filter_params][:list_amenities].split(' ')
params[:filter_params][:list_amenities].plit('')
params[:filter_params][:list_amenities]
params[:filter_params]
@building.listings.active.first
params[:filter_params]
params
continue
Building.where(building_street_address: row['building_address'])
@building
row
row['building_address']
continue
row
row['building_address']
@building 
i
continue
upload_params
continue
params
upload_params[:file_uid].present?
upload_params
continue
self
self.imageable
continue
SignInRedirect.redirect_path(session: session, object: object)
object
continue
find_reviewable
session[:object_type].present? && session[:object_type] == 'unit' && building_data.present?
session[:object_type].present? && session[:object_type] == 'building'
building_data = session[:form_data]['building']
session[:form_data].present?
continue
@user.authorizations.first.name
@user.authorizations.first
@user.authorizations
continue
"#{@card.brand} - #{@card.last4}"
"#{@billing.brand} - #{@billing.last4}"
@billing&.billing_card_id.present?
@billing
continue
card.brand
card.id
card
continue
browser_time_zone.name
cookies[:timezone]
continue
cookies[:timezone]
current_user
browser_time_zone.name
browser_time_zone
continue
featured_building.expired?
Time.zone = featured_building.user.timezone
Time.zone
featured_building.user.timezone
Time.zone
featured_building.expired?
featured_building
continue
by_manager.expired.where(renew: false).active
by_manager.expired.where(renew: false, id: 140)
by_manager.expired.where(renew: false)
by_manager.expired.where(renew: false).active
expired_featurings
continue
set
set = expired_featurings.update_all(active: false)
expired_featurings = by_manager.expired.where(renew: false).active
expired_featurings
by_manager.expired.where(renew: false).active
by_manager.expired.where(renew: false, id: 140).active
by_manager.expired.where(renew: false, id: 140)
by_manager.expired.where(renew: false)
expired_featurings
continue
(end_d - 1.day).to_s(:no_timezone)
CURRENT_DT.to_s(:no_timezone)
end_date.present? and CURRENT_DT.to_date
end_d = Time.zone.parse(end_date.to_s(:no_timezone))
Time.zone.parse(end_date.to_s(:no_timezone))
end_date.to_s(:no_timezone)
end_d
continue
end_date
end_date.to_s(:no_timezone)
Time.zone
Time.zone.parse(end_date.to_s).strftime('%d-%m-%Y %H:%M')
Time.zone.parse(end_date.to_s).strftime('%d-%m-%Y')
Time.zone.parse(end_date.to_s).to_date
Time.zone.parse(end_date.to_s)
end_date.to_s
Time.zone.parse(end_date.to_s).utc
continue
end_date.localtime
end_date.to_s
end_date.to_datetime
Time.zone.local(end_date.to_datetime) - 1.day
Time.zone.local(end_date.to_s) - 1.day
Time.zone.local(end_date.to_s)
end_date.in_time_zone
DateTime.now.
DateTime.now.utc
Date.current.to_time.to_datetime
Date.current.to_time
Time.zone.at(end_date.to_time).to_datetime
Time.zone.at(end_date).to_datetime
Time.zone.at(end_date)
Time.zone.local(end_date.to_s)
Time.zone.parse(end_date.to_s)
end_date.to_s
(end_date - 1.day).to_s(:no_timezone)
(end_date - 1.day).to_date
end_date.in_time_zone(zone)
zone = ActiveSupport::TimeZone.new(Time.zone.name)
Time.zone.parse(end_date.to_s(:no_timezone))
Time.zone.local(end_date.to_s(:no_timezone))
Time.zone.local(end_date)
Time.zone.parse(end_date)
CURRENT_DT.to_date
end_date.in_time_zone(Time.zone.name) - 1.day
end_date.in_time_zone(Time.zone.name)
Time.zone.name
end_date.in_time_zone(Time.zone.name)
end_date.in_time_zone(Time.zone)
end_date
end_date.localtime
end_date.zone
end_date.methods
end_date
CURRENT_DT.to_date
Time.zone
end_date.present?
self.id
continue
self.id
continue
self.id
continue
self.id
continue
self.id
continue
featured_building.renew_plan?(ENV['SERVER_ROOT'])
Time.zone
user
continue
Time.zone.local(featured_building.end_date.to_s(:no_timezone))
featured_building.end_date.to_s
Time.zone.local(featured_building.end_date.to_s)
Time.zone.local(featured_building.end_date.to_date)
Time.zone.local(featured_building.end_date.to_s(:no_timezone))
featured_building.end_date.to_s(:no_timezone) - 1.day
featured_building.end_date.to_s(:no_timezone)
Time.zone.local(featured_building.end_date.to_s(:no_timezone)) - 1.day
Time.zone.parse(featured_building.end_date.to_s(:no_timezone)) - 1.day
Time.zone.parse(featured_building.end_date.to_s(:no_timezone))
featured_building.end_date.to_s(:no_timezone)
featured_building.end_date.to_datetime
Time.zone.parse(featured_building.end_date)
Time.now
featured_building.renew_plan?(ENV['SERVER_ROOT'])
