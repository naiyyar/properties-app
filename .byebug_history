continue
 Geocoder.coordinates('Manhattan')
coordinates
params
@lng
@lat
continue
Gmaps4rails.build_markers(@buildings)
@buildings.count
@buildings
continue
 search = Geocoder.search(params[:term])
params
continue
search.first.types
search = Geocoder.search(params['apt-search-txt'])
params
continue
params['apt-search-txt'].split(' - ')
params['apt-search-txt'].split('- ')
params['apt-search-txt'].split('- ')[0]
params['apt-search-txt'].split('-')[0]
params['apt-search-txt'].split('-')
params['apt-search-txt'].split(-)
params['apt-search-txt']
search.first.types[0] == 'postal_code'
search.present?
search = Geocoder.search(params['apt-search-txt'])
params
continue
arr << Gcoordinate.where(zipcode: params['apt-search-txt']).map{|rec| {lat: rec.latitude, lng: rec.longitude}}
arr = []
Gcoordinate.where(zipcode: params['apt-search-txt']).map{|rec| {lat: rec.latitude, lng: rec.longitude}}
Gcoordinate.where(zipcode: params['apt-search-txt']).map{|rec| [rec.latitude, rec.longitude]}
Gcoordinate.where(zipcode: params['apt-search-txt'])
Gcoordinate.where(zipcode: params['apt-search-txt']).count
continue
search.first.types[0] == 'postal_code'
search.first.types
search.types
search = Geocoder.search(params['apt-search-txt'])
params
 @buildings
continue
coord[:lng]
coord[:lat]
coord
continue
hash
hash[:lng] = @cordinates[1]
hash[:lat] = @cordinates[0]
hass[:lat] = @cordinates[0]
hash = {}
@cordinates
continue
Geocoder.coordinates("10022")
params
continue
params
continue
params
continue
Building.where('building_street_address = ?', params[:term])
params
building = Building.text_search(params[:term])
continue
Building.text_search(params[:term])[3]
Building.text_search(params[:term])[2]
Building.text_search(params[:term])[1]
Building.text_search(params[:term]).count
Building.text_search(params[:term])
params
continue
Building.text_search(params[:term])
params
continue
Building.text_search(params[:term])
params
continue
Building.text_search(params[:term])
params
continue
building.count
buulding.count
building = Building.text_search(params[:term])
params
continue
params[:term].present?
params
continue
building = Building.text_search(params[:term])
params[:term].present?
params
continue
Building.text_search(params[:term])
params
search.address_components
search.formatted_address
search = Geocoder.search(params['apt-search-txt']).first
Geocoder.search(params['apt-search-txt']).first
Geocoder.search(params['apt-search-txt'])
Building.text_search(params['apt-search-txt'])
params
continue
 @polylines
 @polylines[0] << {}
 @polylines[0][0]
 @polylines[0]
 @polylines
continue
 @polylines
continue
@polylines
continue
buildings.to_a.uniq(&:zipcode).length
buildings.to_a.uniq_by{|b| b.zipcode}.length
buildings.to_a.uniq.length
buildings.to_a.uniq
buildings.to_a
buildings.uniq_by{|b| b.zipcode}.length
buildings.uniq(&:zipcode).length
buildings.count
buildings.class
buildings.length
buildings = near(search.coordinates, Building::DISTANCE)
near(search.coordinates, Building::DISTANCE)
continue
@autosearch_buildings.length
@result_type
continue
@result_type
@autosearch_buildings.length
@autosearch_buildings
continue
@autosearch_buildings[2]
@autosearch_buildings[1]
@autosearch_buildings[0]
@autosearch_buildings.length
@autosearch_buildings = Building.neighborhood_search_by_zipcode(search, params)
continue
Building.near(search.coordinates, Building::DISTANCE).sort
Building.near(search.coordinates, Building::DISTANCE)[3]
Building.near(search.coordinates, Building::DISTANCE)[2]
Building.near(search.coordinates, Building::DISTANCE)[1]
Building.near(search.coordinates, Building::DISTANCE)[0]
Building.near(search.coordinates, Building::DISTANCE).length
Building.near(search.coordinates, Building::DISTANCE).count
Building.near(search.coordinates, Building::DISTANCE)
Building.near(search.coordinates, Building::DISTANCE).count
search.types
search.types.include? 'postal_code'
continue
search = Geocoder.search(params['buildings-search-txt']).first
continue
search = Geocoder.search(params['buildings-search-txt']).first
continue
search = Geocoder.search(params[:term]).first
continue
search.types
search = Geocoder.search(params[:term]).first
continue
@result_type
continue
Building.near([@autosearch_buildings.first.latitude, @autosearch_buildings.first.longitude], Building::DISTANCE).count
Building.near([@autosearch_buildings.first.latitude, @autosearch_buildings.first.longitude], Building::DISTANCE)
@autosearch_buildings = Building.where('building_name @@ :q', q: params[:term])
Building.where('building_name @@ :q', q: params[:term])
params
continue
@autosearch_buildings = Building.near(@auto_search.coordinates, Building::DISTANCE)
@autosearch_buildings = Building.where('city @@ :q', q: params[:term])
@autosearch_buildings = Building.where('building_name @@ :q', q: params[:term])
params[:term].present?
@auto_searchparams[:term].present?
@auto_search
@buildings
continue
Building::DISTANCE
continue
search.coordinates
search.types
search = Geocoder.search(params['buildings-search-txt']).first
params
continue
search = Geocoder.search(params[:term]).first
params
continue
params
continue
params
continue
search.types[0]
search.types
search = Geocoder.search(params['buildings-search-txt']).first
search.types
continue
self.units.joins(:reviews)
self.units.join(:reviews)
Building
self.units.includes(:reviews)[0]
self.units.includes(:reviews)
self.units.include(:reviews)
self.units
continue
building.name
building
upload.building
upload
upload.image
continue
buildings = Building.near(params['buildings-search-txt'], 100)
buildings.length
buildings.count
buildings = Building.near(params['buildings-search-txt'], 100)
Building.near(params['buildings-search-txt'], 100)
Building.near(params['buildings-search-txt'], 20).count
Building.near(params['buildings-search-txt'], 20)
params
Building.near(params[:term], 20)
Building.near(params[:term])
Building.text_search(params[:term])
params
continue
@polylines = [@polylines]
@polylines
continue
pol_hash
continue
@buildings
@buildings.count
continue
search(term)
term
continue
@buildings.count
@buildings
continue
params[:term].blank?
params
continue
params
continue
params
continue
params
continue
@buildings = Building.text_search(params['term'])
@buildings = Building.apt_search(params['term'])
params
continue
buildings.present?
continue
buildings.present?
continue
buildings.present?
continue
