continue
@zoom
continue
search[21]
search[11]
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search.count
geo_result
search
neighborhood
continue
@lng
@lat
@boundary_coords
continue
neighborhood_coords.map{|rec| { lat: rec.latitude, lng: rec.longitude} }
neighborhood_coords = self.where("neighborhood @@ :q", q: "%#{neighborhoods}")
continue
∂∂∂∂
neighborhood = self.where("neighborhood @@ :q", q: "%#{neighborhoods}")
neighborhoods
exit
neightborhoods
Gcoordinate.where("neighborhood = ?", 'Stuyvesant')
Gcoordinate.where("neighborhood = ?", neighborhoods)
params
Gcoordinate.where("neighborhood @@ :q" , q: "%#{neighborhoods}%")
params
continue
Gcoordinate.where("neighborhood @@ :q" , q: "%#{neighborhoods}%")
Gcoordinate.where("neighborhood @@ :q" , q: "#{neighborhoods}%")
Gcoordinate.where("neighborhood @@ :q" , q: "%#{neighborhoods}%")
Gcoordinate.where("neighborhood = ?", neighborhoods)
Gcoordinate.last
Gcoordinate.where("neighborhood=?" , neighborhoods)
Gcoordinate.where("neighborhood @@ :q" , q: "%#{neighborhoods}")
Gcoordinate.neighbohood_boundary_coordinates(neighborhoods)
neighborhoods = params['apt-search-txt'].split(',')[0]
params[:neighborhoods].present?
params
continue
@result_type
continue
@result_type
continue
@result_type
exit
jjj
params
continue
street_address.split(' ')
street_address.split('')
street_address
hy = ['30th','31st', '37th', '36th','40th']
'30th'..'40th'
30th..40th
search1 = Geocoder.search(street_address)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[1]
search[0]
continue
Geocoder.search(street_address)
search[1]
search[1].address_components_of_type(:neighborhood)
search.count
search[7].address_components_of_type(:neighborhood)
search[6].address_components_of_type(:neighborhood)
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
continue
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search.count
continue
predifined_neighborhoods.include? search[1].address_components_of_type(:neighborhood).first['long_name']
search[1].address_components_of_type(:neighborhood)
search.first.address_components_of_type(:neighborhood)
search.first
search
continue
Gcoordinate.where("neighborhood @@ :q" , q: "%#{neighborhoods}")
Gcoordinate.where("neighborhood ILIKE ?" "%#{neighborhoods}")
Gcoordinate.where("neighborhood ILIKE ?" "%#{neighborhoods}%")
neighborhoods = params['apt-search-txt'].split(',')[0]
continue
result.address_components_of_type(:neighborhood)
result.state
result.city
result.address_components_of_type(:neighborhood).first['short_name']
result.address_components_of_type(:neighborhood).first.nil?
result.address_components_of_type(:neighborhood).first
result.address_components_of_type(:neighborhood)
result = Geocoder.search(@latlng).first
 @latlng = Geocoder.coordinates(street_address)
 @latlng = Geocoder.coordinates(params[:building_street_address])
 @latlng = Geocoder.coordinates(params[:street_address])
longitude
latitude
continue
search[3]
search[4]
search.count
search = Geocoder.search([latitude, longitude])
search.count
search[4]
search[3]
search = Geocoder.search("10 Av/w 34 St, New York, NY 10001, USA")
search[2]
search[1]
search[0]
continue
search = Geocoder.search(building_street_address)
continue
search[2]
search[14]
search[13]
search[12]
search[11]
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search[0]
search.count
continue
self.update_columns(neighborhood: neighborhoods)
neighborhoods
continue
neighborhoods
continue
predifined_neighborhoods.include? neighborhood
neighborhood
continue
neighborhood
geo_result.address_components[2]['long_name']
continue
geo_result.address_components[2]['long_name']
neighborhood
continue
 geo_result.address_components[2]['long_name']
predifined_neighborhoods
continue
predifined_neighborhoods << "Hell's Kitchen"
search[2]
geo_result
neighborhood
predifined_neighborhoods
continue
self.predifined_neighborhoods
predifined_neighborhoods
continue
search = Geocoder.search("New York", :bounds => [[latitude,longitude]])
search[1]
search[0]
search.count
search = Geocoder.search("Manhattan", :bounds => [[latitude,longitude]])
Geocoder.search("Manhattan", :bounds => [[latitude,longitude]])
Geocoder.search("Paris", :bounds => [[32.1,-95.9], [33.9,-94.3]])
search = Geocoder.search("#{building_street_address}, #{city}, #{state}")
search[2]
search[2].address_components[2]['long_name']
search[2].first.address_components[2]['long_name']
search.first.address_components[2]['long_name']
search[2]
search[3]
search[1]
search[0]
search.last
search = Geocoder.search([latitude, longitude])
search[2]
search[1]
search[0]
search.count
search = Geocoder.search(building_street_address)
search[2]
search[1]
search[0]
search.count
search = Geocoder.search([latitude, longitude])
self
continue
search[2]
search[1]
search.first
search.count
search = Geocoder.search(building_street_address)
search.first
search.count
serach.count
seach.count
search = Geocoder.search([latitude, longitude])
self
continue
 search.first.address_components[2]['long_name']
search[1]
search.last
search.first
search.count
search = Geocoder.search([latitude, longitude])
continue
latitude
search.first
search.count
search = Geocoder.search([self.latitude, self.longitude])
Geocoder.search([self.latitude, self.longitude])
self
building
Geocoder.search([building.latitude, building.longitude])
continue
coordinates
Gcoordinate.where(neighborhood: neighborhoods).map{|rec| { lat: rec.latitude, lng: rec.longitude}}
Gcoordinate.where(neighborhood: neighborhoods)
@buildings = Building.where(neighborhood: neighborhoods)
neighborhoods = params['apt-search-txt'].split(',')[0]
search.first.types[0] == 'neighborhood'
continue
params['apt-search-txt'].split(',')[0]
params['apt-search-txt'].split(',')
params['apt-search-txt'].split(' , ')
params['apt-search-txt'].split(' - ')
params
search.first.address_components[0]['long_name']
search.first.address_components[0]
search.first.address_components
search = Geocoder.search(params['apt-search-txt'])
params
continue
search.last.address_components[2]['long_name']
search.first.address_components[2]['long_name']
search = Geocoder.search(@building.building_street_address)
continue
search.first.address_components[2]['long_name']
search.last.address_components[2]['long_name']
search = Geocoder.search(@building.building_street_address)
continue
