continue
@polylines = [@polylines]
@polylines
continue
pol_hash
continue
@buildings
@buildings.count
continue
search(term)
term
continue
@buildings.count
@buildings
continue
params[:term].blank?
params
continue
params
continue
params
continue
params
continue
@buildings = Building.text_search(params['term'])
@buildings = Building.apt_search(params['term'])
params
continue
buildings.present?
continue
buildings.present?
continue
buildings.present?
continue
buildings.present?
continue
buildings.present?
continue
@buildings.map {|f| {name: f.building_name, zipcode: f.zipcode}}.to_json
@buildings.map(&:building_name, &:zipcode).to_json
@buildings.map(&:building_name &zipcode).to_json
@buildings.map(&:building_name, &zipcode).to_json
@buildings.map(&:building_name).to_json
@buildings.map(&:building_name)
 @buildings@buildings.map(&:building_name)
 @buildings
continue
 @buildings
continue
@buildings.count
@buildings = Building.order(:building_name).where("building_name LIKE ?", "%#{params[:term]}%")
params
continue
@hash2.flatten
@hash2 << @hash
continue
@hash2 << @hash
@hash
continue
@buildings.count
@buildings = Building.search(params['term'])
params
continue
@buildings
continue
@buildings
continue
params
continue
params
continue
reviewable.class.name.downcase
reviewable.class.name
reviewable.class
reviewable
review
continue
vote
rating_score.present?
rating_score
review
continue
review.id
vote.present?
vote
review
continue
find_reviewable
session[:form_data]
continue
building.reviews
building.review
building = Building.find(23)
Review.first
params[:score]
params
continue
Rate.find_by_rater_id_and_rateable_id_and_dimension_and_review_id(@user.id, @object.id, dimension,review_id)
review_id = options[:review_id]
@user = rating_user
@object = rateable_obj
Rate.find_by_rater_id_and_rateable_id_and_dimension_and_review_id(@user.id, @object.id, dimension,review_id)
options
continue
Rails.application
Rails.application.class
Rails.application.class.routes
Rails.application.class.routes.url_helpers
Rails.application.class.routes.url_helpers.rate_path
continue
review_id = 100
review_id
continue
review.user.votes.where(vote: true).to_a.uniq(&:voter_id)
review.user.votes.where(vote: true).uniq(&:voter_id)
review.user.votes.where(vote: true)
review.user.vote_for(@building)
review.user.votes.where(vote: true)
review.user.votes
continue
review.user.votes
review.user.votes.where(vote: true)
continue
review.user.votes.where(vote: false).count > 0
review.user.votes.where(vote: false)
review.user.voted_how?(@building)
review.user.votes.first
review.user.voted_against?(@building)
continue
review.user.votes
vote
vote.vote
continue
vote.vote == true
vote.vote
vote
continue
review.user.votes.first.vote
review.user.votes
review.user.voted_against? @building
continue
review.user.voted_against? @building
review.user.voted_how? @building
review.user.voted_for? @building
review.user.voted_for @building
review.user.vote
review
continue
review.user.voted_for? @building
review.user.vote_for? @building
review.user.vote_for @building
continue
review.user.vote_for @building
continue
review.user.vote_for @building
review.user.voted_for @building
review.user.voted_for
review.user
review
continue
Building.find_by_building_street_address(params[:building][:building_street_address])
params
continue
@building.units.map{|u| u.id}
Upload.where(imageable_id: @building.units.map{|u| u.id})
Upload.includes(:units)
@building.uploads.includes(:units
@building.uploads.includes(:unit)
@building.uploads.include(:unit)
@building.uploads.count
@building.uploads
continue
@unit.update(unit_params)
unit_params
continue
@unit.update(params[:building][:units_attributes]['0'])
params
@unit.update(params[:building][:units_attributes]['0'])
@unit
params[:building][:units_attributes]['0']
params
continue
@building.update(building_params)
@building.update(params[:building])
@building
params[:name]
params[:unit_id].present?
params
continue
Building.where(id: params[:building_id]).to_a.map(&:serializable_hash)
Building.where(id: params[:building_id]).to_a
Building.where(id: params[:building_id]).to_a.first
Building.where(id: params[:building_id]).to_a.firat
Building.where(id: params[:building_id]).to_a
Building.where(id: params[:building_id])
continue
params[:contribute_for]=='unit'
params[:contribution_for]=='unit'
params
continue
@building
contribute.present?
 contribute = params[:contribution] == 'unit_review' ? '' : params[:contribution]
params
continue
 @imageable.kind_of? Unit
@imageable
continue
@building.reviews.to_a.uniq(&:user_id).length
@building.reviews.to_a.uniq_by{|u| u.user_id}.length
@building.reviews.uniq_by{|u| u.user_id}.length
@building.reviews.uniq_by(|u| u.user_id).length
@building.reviews.uniq_by(|u| u.user_id).count
@building.reviews[1]
@building.reviews[0]
@building.reviews.uniq(&:user_id).count
@building.reviews.uniq(&:user.id).count
@building.reviews.count
continue
review.user
review
continue
params
continue
params
continue
params
continue
params
continue
session[:form_data]['vote']
session[:form_data]['vote'] == 'true'
session[:form_data]['vote'] == true
reviewable
session[:form_data]
continue
reviewable.vote_by :voter => current_user, :vote => 'bad'
continue
session[:form_data]['vote'] == true || session[:form_data]['vote'] == 'true'
continue
session[:form_data]['vote'] == false
session[:form_data]['vote'] == true
session[:form_data]['vote'].present?
session[:form_data]['vote']
session[:form_data]
params
continue
params[:vote] == true
params[:vote] == 'true'
 params[:vote] == 'true'
params
continue
@unit
continue
@building = Building.find_by_building_street_address(params['buildings-search-txt'])
params
