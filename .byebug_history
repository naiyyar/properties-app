continue
final_results
final_results[1]
final_results = Building.sort_buildings(final_results[1], params[:sort_by])
final_results[1].present? and params[:sort_by].present?
Building.sort_buildings(final_results[1], params[:sort_by]).length
params[:sort_by]
final_results[0][:all_buildings].length
final_results[0][:all_buildings]
final_results[0].length
final_results[1].length
final_results[1]
final_results
continue
params[:sort_by]
index
continue
index
continue
sort_option.methods.sort
sort_option.methods
sort_option.class.class
sort_option.class
sort_option
continue
buildings.where('listings.rent BETWEEN ? AND ?', min_price.to_i, max_price.to_i)
buildings.where("listings.rent BETWEEN #{min_price.to_i} AND #{max_price.to_i}")
buildings.where('listings.rent >= ? AND listings.rent <= ?', min_price.to_i, max_price.to_i)
continue
buildings.where("listings.rent BETWEEN #{min_price.to_i} AND #{max_price.to_i}")
buildings.where('listings.rent >= ? AND listings.rent <= ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent BETWEEN min_price AND max_price')
buildings.where('listings.rent BETWEEN ? AND ?', min_price.to_i, max_price.to_i)
continue
buildings.where('listings.rent BETWEEN ? AND ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent > ? AND listings.rent < ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent BETWEEN ? AND ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent in (?)', min_price.to_i..max_price.to_i)
buildings.where('listings.rent BETWEEN ? AND ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent > ? AND listings.rent < ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent < ?', 
buildings.where('listings.rent < ? AND listings.rent > ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent < ? AND listings.rent > ?', min_price, max_price)
max_price
min_price
buildings
continue
buildings = buildings_with_listings(buildings)
buildings = filter_by_listing_prices(buildings, min_price, max_price)
buildings = filter_by_amenities(buildings, amenities)
amenities.present?
min_price.present? and max_price.present?
listing_beds.present?
beds.present?
price.present? and min_price.blank?
price
continue
filter_params
continue
filter_params
continue
filter_params
continue
buildings = filter_by_prices(buildings, price) if price.present?
buildings = filter_by_amenities(buildings, amenities) if amenities.present?
price
price.first.to_i
price.first
price
filter_params
continue
max_price
min_price
buildings.count
continue
buildings.l_two_bed
beds
buildings.count
buildings = buildings_with_listings(buildings)
beds
buildings.count
continue
FeaturedBuilding.active_featured_buildings(412)
buildings.count
per_page_buildings
all_buildings
continue
top_two_featured_buildings
continue
final_results[1]
final_results
final_results[0][:map_hash]
@all_buildings = final_results[0][:all_buildings]
final_results[0][:all_buildings]
@per_page_buildings = final_results[1]
final_results = Building.with_featured_building(@buildings, page_num)
continue
@buildings
continue
has_amenity?('owner_paid')
@buildings = @buildings.where('listings.owner_paid is not null') if has_amenity?('owner_paid')
@buildings = @buildings.where('listings.free_months > ?', 0) if has_amenity?('months_free_rent')
@buildings = @buildings.joins(:listings)
@amenities.include?('months_free_rent') || @amenities.include?('owner_paid') || @amenities.include?('rent_stabilized')
buildings_with_listing_amenities
@buildings
continue
buildings_with_listing_amenities
@buildings
continue
filter_by_amenities(buildings, amenities)
buildings
continue
buildings
filter_by_amenities(buildings, amenities)
buildings
continue
filter_params[:type]
filter_params
filter_params = params[:filter]
params
results[:buildings]
filtered_buildings(results[:buildings], params[:filter])
params[:filter].present?
continue
@buildings
continue
@buildings = @buildings.where('listings.free_months > ?', 0) if has_amenity?('months_free_rent')
@buildings = @buildings.joins(:listings)
has_amenity?('rent_stabilized')
has_amenity?('owner_paid')
has_amenity?('months_free_rent')
@buildings.count
@amenities.include?('months_free_rent') || @amenities.include?('owner_paid') || @amenities.include?('rent_stabilized')
continue
Listing
buildings.joins(:listings).where('listings.free_months > ?', 0)
buildings.joins(:listings).where('listings.free_months > ?', 0).count
Listing.first
buildings.joins(:listings)
@buildings.joins(:listings)
buildings.count
@amenities
amenities
continue
str.include?('/')
str = '2//'
params[:page].include?('/')
params[:page].to_i
params[:page].to_s
params[:page].to_i
params[:page]
"2".gsub(/\//,'')
"2".gsub(/\//,''
str.gsub(/\//,'')
str = '2//'
params[:page].gsub(/\//,'')
params[:page]
params
continue
exception.message
exception.display
exception.contoller
exception.contollers
exception.action
exception.message
exception.methods
exception
default
session[:return_to]
continue
params[:search_term]
params
@search_string
continue
results.where(city: city).count
city = term_with_city.include?('newyork') ? 'New York' : 'Bronx'
results.where(city: city).count
term_with_city
search_term
results.count
continue
Building.find(2)
Building.find(1)
params[:search_term].include?('newyork')
params
sub_borough
search_string
params
continue
[params[:latitude].to_f, params[:longitude].to_f]
params
results[:buildings]
results[:buildings].length
continue
params
continue
params[:latitude]
params
custom_latng = [params[:latitude].to_f, params[:longitude].to_f]
results[:buildings]
continue
results[:buildings]
results[:buildings].count
continue
params[:filter]
results[:buildings].count
results[:buildings]
continue
term
continue
@filters[:amenities].include?(val)
val
continue
val
continue
val
continue
val
@filters[:amenities].include?(val)
continue
@filters[:amenities].include?(val)
val
@filters[:amenities]
@filters.present? and @filters[:amenities].present?
continue
@filters[:price].include?(val)
@filters[:price].include?(val.to_s)
@filters[:price]
@filters.present? and @filters[:price].present?
val
continue
uploads.where.not(sort: nil).last
uploads.last
uploads.count
continue
Upload.where(imageable_id: self.imageable.id).where.not(id: self.id).pluck(:sort)
Upload.where(imageable_id: self.imageable.id).where.not(id: self.id).count
Upload.where(imageable_id: self.imageable.id) - self
Upload.where(imageable_id: self.imageable.id).count
self.imageable
self.sort
self
continue
params
continue
search_string
continue
tab_title
content_for? :page_title
continue
building.bedroom_ranges
beds.compact.join(', ')
beds.compact.join(',')
beds << building.four_plus_bed
beds << building.three_bed
