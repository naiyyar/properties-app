continue
building.max_price
building.min_price
continue
prop.max_price
prop.min_price
params[:filter].present?
prop
continue
b
continue
params[:filter_params]
params
@building
continue
@building
continue
building.name
continue
@listings.count
@listings = @listings.with_prices(@min_price, @max_price)
@min_price.to_i > 0 || @max_price.to_i > 0
@listings = @listings.with_beds(@bedrooms.flatten)
@listings.with_beds(@bedrooms.flatten).pluck(:bed)
@listings.with_beds(@bedrooms.flatten).pluck(:beds)
@bedrooms.flatten
@listings.with_beds(@bedrooms.flatten).count
@listings.with_beds(@bedrooms.flatten)
listing_type
@bedrooms.kind_of?(Array)
@max_price
@min_price
@bedrooms
@amenities
filter_params
building
continue
filter_params
building.get_listings(filter_params).count
listings_count
building
self
continue
self
continue
Filter::Listings.new(self, type, filter_params).fetch_listings.size
Filter::Listings.new(self, type, filter_params).fetch_listings.count
self
filter_params
continue
building_ids.length < FBS_COUNT
building_ids
FBS_COUNT
continue
FBS_COUNT
building_ids
continue
building_ids.length < FBS_COUNT
building_ids
continue
fbs.pluck(:id).shuffle[0..1]
fbs.pluck(:id).shuffle
fbs.pluck(:id)
fbs.size
fbs.count
fbs
continue
searched_buildings.where('featured_buildings_count > ?', 0).order('RANDOM()').limit(2)
continue
searched_buildings.where('featured_buildings_count > ?', 0).order('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).reorder('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM(building_street_address)').first
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM(building_street_address)')
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM(id)')
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM(id)').each{|b| b}
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM(id)').map{|b| b}
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM(id)').count
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM(id)')
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).reorder('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).limit(2).order('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).reorder('RANDOM()').limit(4)
searched_buildings.where('featured_buildings_count > ?', 0).reorder('RANDOM()').limit(2)
searched_buildings.where('featured_buildings_count > ?', 0).order('RANDOM()').limit(2)
continue
Building.first.attributes.keys.map(&:to_sym)
Building.first.attributes.keys
Building.first.attributes
Building.attributes
searched_buildings.where('featured_buildings_count > ?', 0).order('RANDOM()').limit(2)
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM').limit(2).to_a
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).reorder('RANDOM').limit(2)
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM').limit(2).to_a
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM').limit(2).first
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM').limit(2)
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM').count
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM').first(2)
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM')
Building.where(id: searched_buildings.pluck(:id)).where('featured_buildings_count > ?', 0).order('RANDOM').limit(2)
searched_buildings.where('featured_buildings_count > ?', 0).reorder('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).offset(100)
searched_buildings.where('featured_buildings_count > ?', 0).offset(2)
searched_buildings.where('featured_buildings_count > ?', 0).reorder('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).reorder('RANDOM()').limit(2)
searched_buildings.where('featured_buildings_count > ?', 0).order('RANDOM()').limit(2)
continue
searched_buildings.where('featured_buildings_count > ?', 0).order('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).reorder('RANDOM()')
searched_buildings.where('featured_buildings_count > ?', 0).count
continue
pop_neighborhoods.where(name: view_context.brooklyn_sub_borough).sum(:buildings_count)
pop_neighborhoods
Building.city_count(pop_nb_buildings,'Brooklyn',view_context.brooklyn_sub_borough)
continue
term
"#{term.gsub!('Nyc', 'NYC')}"
term = search_term.split('-').join(' ').titleize
search_term.split('-').join(' ').titleize
search_term.split('-')
search_term = options[:term]
pop_search_tab_title(options[:term])
options[:term]
options
searched_by
continue
@buildings_count  ||= pop_nb_buildings&.size
continue
saved_amounts
continue
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0][:price]
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0]['price']
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0]['price]
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0].price
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0]
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json
rent_medians.where(range: price, bed_type: bedroom_ranges).to_json
rent_medians.where(range: price, bed_type: bedroom_ranges).pluck(:price)
rent_medians.where(range: price, bed_type: bedroom_ranges)
rent_median_prices(rent_medians).pluck(:price)
continue
@saved_amounts
@building.bedroom_ranges
continue
nil.to_s
rent_stabilize.to_s.blank?
rent_stabilize.blank?
rent_stabilize
self
rent_stabilize.blank?
continue
listing.rentstabilize
['t', 'true'].include?(listing.rent_stabilize.to_s)
continue
['t', 'true'].include?(listing.rent_stabilize.to_s)
listing.rentstabilize
listing
continue
['t', 'true'].include?(rent_stabilize.to_s) ? 'Y' : 'N'
rent_stabilize.present?
rs
continue
Listing.where(id: [1418, 1419, 1420]).pluck(:rent_stabilize)
Listing.where(id: [1418, 1419, 1420])
self
rent_stabilize
continue
params
@all_inactive_listings.count
@all_inactive_listings
listings.first.active
continue
listings.first.active
continue
fb_buildings
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.count
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
results.flatten.count
continue
results.flatten.count
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
fbs_count = 2
total_to_show = 4
[1,2].shuffle[0..2]
continue
results.flatten.count
continue
@buildings.count
fb_buildings.count
fbs_count
results.flatten.first(4)
results.flatten.count
continue
@featured_buildings.count
continue
fb_buildings.shuffle[0..fbs_count]
fb_buildings.shuffle[0..fbs_count].class
fb_buildings.shuffle[0..fbs_count]
fb_buildings
