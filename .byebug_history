continue
@post.author
@post.user
continue
neighborhoods
neighborhoods.present?
continue
Geocoder.search("30 E 81st St")
self
self.longitude
self.latitude
neighborhoods
continue
@stars
continue
@stars[1].to_f/100
@stars[1].to_f/10
@stars
continue
Rate.where(rateable_id: building.id, rateable_type: 'Building', dimension: 'building').sum(:stars)
Rate.where(rateable_id: building.id, rateable_type: 'Building', dimension: 'building').count
Rate.where(rateable_id: building.id, rateable_type: 'Building').count
Rate.where(rateable_id: building.id, rateable_type: 'Building')
Rate.where(rateable_id: building.id, rateable_type: 'building').count
building.rateables
building
building.rates
building.rat
building.rates
continue
self
continue
self
continue
self
continue
self
neighbohoods
continue
neighbohoods
continue
RatingCache.where(cacheable_id: building.id)[3]
RatingCache.where(cacheable_id: building.id)[2]
RatingCache.where(cacheable_id: building.id)[1]
RatingCache.where(cacheable_id: building.id)[0]
RatingCache.where(cacheable_id: building.id).count
building.cacheables
building.cacheable
building.rateables
building.rates
building = Building.find_by(:building_street_address => '10 5th Ave')
building.find_by(:building_street_address => '10 5th Ave')
building.find_by(:building_street_address => '')
b
buildings.map{|b| b.rating_cache.sum(:avg)}
buildings.map{|b| b.rating_cache.first.avg}
aggregate_reviews
buildings.pluck(:id)
@total_rates
continue
total_reviews - 4
self.buildings.map{|b| b.downvotes_count}
total_reviews
upcount
continue
(upcount.to_f / total_reviews) * 100
(upcount / total_reviews) * 100
total_reviews
upcount
continue
1/1
0/1
building.recommended_percent
building
continue
building
building.address
building.recommended_percent
continue
self.votes.where(vote: false)
self.votes.where(vote: true)
self.votesself.votes.where(vote: true)
self.get_upvotes.size
self.get_downvotes.size
self.votes_for.size
self.votes.count
continue
self.buildings[3].reviews
self.buildings[3].reviews.count
self.buildings[2].reviews.count
self.buildings[1].reviews.count
self.buildings[0].reviews.count
self.buildings.where('reviews_count > ?',0).map(&:reviews_count)
self.buildings.where('reviews_count > ?',0).count
self.buildings.where('reviews_count > ?'0).count
self.buildings.where('reviews_count is not null').count
self.buildings.where('reviews_count is not null')
self.buildings[0].votes.where(vote: true).count
self.buildings[0].votes.count
self.buildings[0].recommended_percent
count
self.buildings.count
continue
count
continue
count
building.recommended_percent
continue
building.recommended_percent
count
continue
building.recommended_percent
count
continue
count
building.recommended_percent
continue
building.recommended_percent
count
continue
count
continue
@management_company.recommended_percent.present?
@management_company.recommended_percent
 @management_company.recommended_percent 
continue
buildings.pluck(:id)
Review.where(reviewable_id: buildings.pluck(:id)).count
count
buildings.map{|b| count += b.reviews.count}
count = 0
Review.where(reviewable_id: buildings.pluck(:id)).count
buildings.pluck(:id)
Building.total_reviews(buildings)
@total_rates
total_reviews
continue
@total_rates
continue
(@total_rates.to_f/total_reviews).round(2).to_s.split('.')
(@total_rates.to_f/total_reviews)
(@total_rates.to_f/total_reviews).round(2)
@total_rates = 22.33
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').where.not(avg: [nil, 'NaN']).sum(:avg)
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').where.not(avg: [nil, 'NaN']).count
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').where.not(avg: [nil, NaN]).count
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').sum(:avg)
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id')
@total_rates
total_reviews
continue
total_reviews
total_reviews.to_i == 0
total_reviews.to_i
total_reviews = Building.total_reviews(buildings).count
total_reviews.to_i
total_reviews.to_i == 0
Building.total_reviews(buildings).count
Building.total_reviews(buildings)
continue
rrecords = Review.where(reviewable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on reviews.reviewable_id = buildings.id')
rrecords = Review.where(reviewable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on reviews.reviewable_id = buildings.id').count
rrecords = Review.where(reviewable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on reviews.reviewable_id = buildings.id')
Building.where(id: buildings.pluck(:id)).joins('LEFT JOIN reviews on buildings.id = reviews.reviewable_id').where(reviewable_type: 'Building')
self
brecords = Building.joins('LEFT JOIN reviews on buildings.id = reviews.reviewable_id').where(reviewable_type: 'Building')
continue
@stars.present? and @stars[1].to_f/100 >= 0.30 and @stars[1].to_f/100 <= 0.75
11.to_f/4
11/4
@stars.present? and @stars[1].to_f/10 >= 0.30 and @stars[1].to_f/10 <= 0.75
@stars[1].to_f/100 <= 0.75
@stars[1].to_f/10 <= 0.75
@stars[1].to_f/10
@stars[1].to_f/100
@stars[1].to_f/10
@stars
continue
@stars[1].to_f/10
@stars[1].to_f/100
@stars.present? and 1 <= @stars[0].to_i
@stars
continue
rateables.sum(:stars)/rateables.count
rateables.count
rateables.sum(:stars)
rateables
continue
rating_cache.first.avg.nan?
rating_cache
rating_cache.first.avg
rating_cache.present?
continue
rating_cache.first.avg
rating_cache.present?
continue
rating_cache.present?
rating_cache
rating_cache.first.avg
@total_rates
continue
@total_rates
rating_cache.first.avg
rating_cache
continue
buildings_count
@total_rates.to_f
continue
company
params
@building
continue
params
continue
@search_by_mangement
continue
dec[1].to_f/100
dec[1].to_f/10
dec[1]/10
dec[1]
dec = (@total_rates.to_f/buildings_count).round(2).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2).to_s(@total_rates.to_f/buildings_count).round(2).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2).to_s
(@total_rates.to_f/buildings_count).round(2)
(@total_rates.to_f/buildings_count.round(2))
(@total_rates.to_f/buildings_count.round(2)).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2)
(@total_rates.to_f/buildings_count)
@stars[1].to_i.round(2)
@stars[1].to_i
@stars[1]
Decimal(@stars[1])
@stars[1].length
@stars[1].to_f.length
@stars[1].to_f
@stars[1]
@stars
@stars = (@total_rates.to_f/buildings_count).to_s.split('.')
@stars = []
(@total_rates.to_f/buildings_count).to_s.split('.')
buildings_count = @manage_buildings.count
buildings_count
@total_rates.to_s.split('.')
0.625@total_rates.to_s.split('.')/10
0.625/10
0.62/10
.62/10
62/10
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f/10
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f/100
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f/10
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f.round(2)
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f
(@total_rates/@manage_buildings.count).to_s.split('.')
@total_rates/@manage_buildings.count.to_f.round(2)
