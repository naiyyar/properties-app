continue
top_two_featured_buildings
per_page_buildings
continue
buildings.where(id: filtered_buildings.map(&:id).uniq).uniq.count
buildings.where(id: filtered_buildings.map(&:id).uniq).count
filtered_buildings.map(&:id)
buildings.count
continue
buildings.uniq.count
buildings.uniq
buildings
buildings.pluck(:id)
buildings.count
continue
buildings.order('price DESC NULLS LAST, listings_count DESC, building_name ASC')
continue
featured_buildings.shuffle[0..1].length
featured_buildings.shuffle[0..1]
featured_buildings.length > 2
featured_buildings.length == 2
top_two_featured_buildings.length
top_two_featured_buildings
continue
buildings.where(id: sorting_buildings_ids(sort_order, buildings)).pluck(:id)
buildings.where(id: sorting_buildings_ids(sort_order, buildings)).order_by_max_price.pluck(:id)
sorting_buildings_ids(sort_order, buildings)
continue
buildings.where(id: sorting_buildings_ids(sort_order, buildings)).order_by_max_price.pluck(:id)
sorting_buildings_ids(sort_order, buildings)
continue
ids_arr.flatten
ids_arr
sort_by
continue
(buildings_with_rent + buildings_with_no_rent)
buildings_with_no_rent = buildings.where(max_listing_price: nil).pluck(:id)
buildings_with_rent = buildings.where.not(max_listing_price: nil).pluck(:id)
sort_by == '2'
sort_by
continue
(sorted_listed_building_ids(buildings))
buildings.pluck(:min_listing_price)
buildings = buildings.where(id: (sorted_listed_building_ids(buildings))).order(min_listing_price: :asc)
sort_params
continue
buildings = buildings.where(id: (buildings_with_rent+buildings_with_no_rent)).reorder(max_listing_price: :desc)
buildings.pluck(:max_listing_price)
buildings = buildings.where(id: (buildings_with_rent+buildings_with_no_rent)).reorder(max_listing_price: :desc)
buildings = buildings.where(id: (buildings_with_rent+buildings_with_no_rent)).order(max_listing_price: :desc)
buildings_with_no_rent = buildings.where(max_listing_price: nil).pluck(:id)
buildings_with_rent = buildings.where.not(max_listing_price: nil).pluck(:id)
buildings.reorder(max_listing_price: :desc).pluck(:max_listing_price)
buildings.order(max_listing_price: :desc).pluck(:max_listing_price)
continue
buildings[5]
buildings[4]
buildings[3]
buildings[2]
buildings[1]
buildings[0]
buildings
buildings.count
continue
listings.last.rent
listings.first.rent
listings.pluck(:rent)
listings.count
continue
listings.count
continue
listings.count
continue
listings.count
continue
listings.last.rent
listings.first.rent
listings.count
continue
buildings.pluck(:id)
buildings.class
buildings = all_buildings_ids.map {|id| buildings.detect {|b| b.id == id } }
buildings.pluck(:id)
buildings = Building.where(id: all_buildings_ids)90
Building.where(id: all_buildings_ids).pluck(:id)
all_buildings_ids.pluck(:id)Building.where(id: all_buildings_ids)
all_buildings_ids
continue
featured_buildings.shuffle[0..1].length
featured_buildings.shuffle[0..2].length
featured_buildings.shuffle[0..2]
featured_buildings.length
top_two_featured_buildings.pluck(:id)
top_two_featured_buildings = featured_buildings.length >= 2 ? featured_buildings.shuffle[0..2] : featured_buildings
featured_buildings.pluck(:id)
featured_buildings = featured_buildings(buildings)
buildings.pluck(:id)
continue
all_buildings_ids
buildings.pluck(:id)
buildings = buildings.unscoped.where(id: all_buildings_ids)
buildings.pluck(:id)
all_buildings_ids
buildings = buildings.where(id: all_buildings_ids)
all_buildings_ids
buildings_without_listing_rent.pluck(:id)
buildings_with_listing_rent.pluck(:id)
(buildings_with_listing_rent + buildings_without_listing_rent).map(&:id)
buildings_with_listing_rent
all_buildings_ids
continue
results.pluck(:rent)
results = buildings.where('listings.rent is not null AND listings.active is true').order('listings.rent ASC')
sort_order == :asc
sort_order
continue
results = buildings.includes(:listings).order('listings.rent ASC')
results.pluck(:id)
results.count
listings.count
results = buildings.includes(:listings).order('listings.rent ASC')
results = buildings.includes(:listings).order(rent: sort_order)
continue
building_ids
buildings_with_listing_rent.first.id
listings_with_rent.pluck(:building_id).uniq
listings_with_rent.select(:building_id)
(buildings_with_listing_rent + buildings_without_listing_rent).map(&:id)
buildings_without_listing_rent.pluck(:id)
buildings_with_listing_rent.pluck(:id)
buildings_with_listing_rent
all_buildings_ids = (buildings_with_listing_rent + buildings_without_listing_rent).map(&:id)
buildings_without_listing_rent = buildings.where.not(id: building_ids)
buildings_with_listing_rent = buildings.where(id: building_ids)
building_ids = listings_with_rent.pluck(:building_id).uniq
listings_with_rent.pluck(:rent)
building_ids = listings_with_rent.pluck(:building_id).uniq
continue
buildings_without_listing_rent.count
buildings_without_listing_rent = buildings.where.not(id: building_ids)
buildings_with_listing_rent.count
buildings_with_listing_rent = buildings.where(id: building_ids)
building_ids = listings_with_rent.pluck(:building_id)
listings_with_rent.maximum(:rent).group(:id)
listings_with_rent.where('MAX(rent)').group(:id).first
listings_with_rent.where('MAX(rent)').group(:id).count
listings_with_rent.where('MAX(rent)').group(:id).length
listings_with_rent.where('MAX(rent)').group(:id)
listings_with_rent.where('MAX(rent)').group_by(:id)
listings_with_rent.pluck(:building_id).uniq
listings_with_rent.pluck(:building_id)
listings_with_rent = listings.where.not(rent: nil).order(rent: sort_order)
Listing.where('building_id = ? and MAX(rent)', 417).count
Listing.where('building_id = ? and MAX(rent)', 417)
Listing.where(building_id: 417).maximum(:rent)
Listing.where(building_id: 417).maximum(:price)
Listing.where('building_id = ? and MAX(price)', 417).count
Listing.where('building_id = ? and MAX(price)', 417).length
Listing.where('building_id = ? and MAX(price)', 417)
Listing.where(building_id: 417)
Listing.where(id: 417)
listings_with_rent.pluck(:building_id)
listings_with_rent.select(:id, :building_id, :rent)
listings_with_rent = listings.where.not(rent: nil).order(rent: sort_order)
listings = Listing.where(building_id: buildings.pluck(:id)).active
lists.count
lists = listings.where.not(rent: nil).active.order(rent: sort_order)
listings_with_rent.count
lists.count
lists = listings.where.not(rent: nil, active: false).order(rent: sort_order)
listings_with_rent.select(:id, :building_id, :rent)
listings_with_rent.select(:id, building_id, :rent)
listings_with_rent.pluck(:rent)
listings_with_rent
continue
listings_with_rent.pluck(:rent)
listings_with_rent
all_buildings_ids.uniq.count
all_buildings_ids.count
all_buildings_ids
buildings_without_listing_rent.count
buildings_with_listing_rent.count
building_ids
listings_with_rent.count
listings.count
continue
buildings.where(id: all_buildings_ids)
all_buildings_ids = (buildings_with_listing_rent + buildings_without_listing_rent).map(&:id)
buildings_without_listing_rent.length
buildings_with_listing_rent.length
building_ids
continue
buildings.exists?
buildings.exist?
buildings.exits?
buildings.exit?
buildings.present?
buildings.count
continue
buildings_with_price_ids + buildings_without_price_ids
buildings.where(price: nil).order(sort_order).pluck(:id)
buildings.where(price: nil).order(sort_order).pluck(:price)
buildings.where.not(price: nil).order(sort_order).pluck(:price)
buildings_with_price_ids
continue
sort_order
sort_order.delete(:price)
sort_order
sort_order.methods
sort_order
continue
buildings.where(id: (buildings_with_price+buildings_without_price).map(&:id)).count
(buildings_with_price+buildings_without_price).map(&:id).count
buildings_without_price
(buildings_with_price+buildings_without_price).map(&:id)
(buildings_with_price+buildings_without_price).map(:id)
buildings.where(id: (buildings_with_price+buildings_without_price).map(:id)).count
buildings_without_price.count
buildings_without_price = buildings.where(price: nil).reorder('listings_count DESC, building_name ASC, building_street_address ASC')
buildings_with_price.count
 buildings_with_price = buildings.where.not(price: nil).reorder('price DESC, listings_count DESC, building_name ASC, building_street_address ASC')
buildings.reorder(price: :asc).pluck(:price)
buildings.reorder(price: :desc).pluck(:price)
buildings.pluck(:price)
continue
final_results
final_results[1]
final_results = Building.sort_buildings(final_results[1], params[:sort_by])
final_results[1].present? and params[:sort_by].present?
Building.sort_buildings(final_results[1], params[:sort_by]).length
params[:sort_by]
final_results[0][:all_buildings].length
final_results[0][:all_buildings]
final_results[0].length
final_results[1].length
final_results[1]
final_results
continue
params[:sort_by]
index
continue
index
continue
sort_option.methods.sort
sort_option.methods
sort_option.class.class
sort_option.class
sort_option
continue
buildings.where('listings.rent BETWEEN ? AND ?', min_price.to_i, max_price.to_i)
buildings.where("listings.rent BETWEEN #{min_price.to_i} AND #{max_price.to_i}")
buildings.where('listings.rent >= ? AND listings.rent <= ?', min_price.to_i, max_price.to_i)
continue
buildings.where("listings.rent BETWEEN #{min_price.to_i} AND #{max_price.to_i}")
buildings.where('listings.rent >= ? AND listings.rent <= ?', min_price.to_i, max_price.to_i)
buildings.where('listings.rent BETWEEN min_price AND max_price')
