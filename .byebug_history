continue
saved_amounts
continue
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0][:price]
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0]['price']
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0]['price]
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0].price
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json[0]
rent_medians.where(range: price, bed_type: bedroom_ranges).as_json
rent_medians.where(range: price, bed_type: bedroom_ranges).to_json
rent_medians.where(range: price, bed_type: bedroom_ranges).pluck(:price)
rent_medians.where(range: price, bed_type: bedroom_ranges)
rent_median_prices(rent_medians).pluck(:price)
continue
@saved_amounts
@building.bedroom_ranges
continue
nil.to_s
rent_stabilize.to_s.blank?
rent_stabilize.blank?
rent_stabilize
self
rent_stabilize.blank?
continue
listing.rentstabilize
['t', 'true'].include?(listing.rent_stabilize.to_s)
continue
['t', 'true'].include?(listing.rent_stabilize.to_s)
listing.rentstabilize
listing
continue
['t', 'true'].include?(rent_stabilize.to_s) ? 'Y' : 'N'
rent_stabilize.present?
rs
continue
Listing.where(id: [1418, 1419, 1420]).pluck(:rent_stabilize)
Listing.where(id: [1418, 1419, 1420])
self
rent_stabilize
continue
params
@all_inactive_listings.count
@all_inactive_listings
listings.first.active
continue
listings.first.active
continue
fb_buildings
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
continue
results.flatten.count
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
results.flatten.count
continue
results.flatten.count
results.flatten.first(4).map(&:id)
continue
results.flatten.first(4).map(&:id)
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
results.flatten.count
continue
fbs_count = 2
total_to_show = 4
[1,2].shuffle[0..2]
continue
results.flatten.count
continue
@buildings.count
fb_buildings.count
fbs_count
results.flatten.first(4)
results.flatten.count
continue
@featured_buildings.count
continue
fb_buildings.shuffle[0..fbs_count]
fb_buildings.shuffle[0..fbs_count].class
fb_buildings.shuffle[0..fbs_count]
fb_buildings
continue
FeaturedBuilding.active.count
self
self.active.count
self.active
fbs_count
continue
13+7+2+3+2+2+1+1+1+1
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
continue
fetch_listings.count
fetch_listings
@listing_type
filter_params
building.past_listings.count
@listings.count
listing_type
continue
@reviews.size
@reviews.count
params[:unit_id].present?
params[:building_id].present?
@reviews
continue
listings.count
listing.count
listing
continue
listing.first.attributes
listings
listing
continue
listing_type == 'past'
@listing_type
listing_type
continue
params[:type]
params
continue
Listing.transfer_to_past_listings_table(listings)
continue
listings.find_in_batches(batch_size: 500){|list| puts list.}
listings.find_in_batches(batch_size: 500){|list| puts list.class}
listings.find_in_batches(batch_size: 500){|list| puts list.attributes}
listings.find_in_batches(batch_size: 500){|list| puts list}
Listing.transfer_to_past_listings_table(listings)
continue
Listing.transfer_to_past_listings_table(listings)
Listings.transfer_to_past_listings_table(listings)
listings = Listing.between(@from_date, @to_date)
Listing.between(@from_date, @to_date).pluck(:date_active).uniq
Listing.between(@from_date, @to_date).pluck(:date_active)
Listing.between(@from_date, @to_date).count
Listing.between(@from_date, @to_date)
continue
@lng
@lat
@boundary_coords
continue
buildings.pluck(:id)
searched_buildings.pluck(:id)
fbs
fbs.map(&:building_id)
fbs.where(id: fbs.map(&:building_id))
fbs = FeaturedBuilding.active_featured_buildings(ids)
FeaturedBuilding.active_featured_buildings(ids)
ids = buildings.map(&:id)
buildings.map(&:id)
buildings.count
featured_buildings
continue
@building.active_comps.first.building.name
@building.active_comps
@building.building_name
active_comps.count
continue
@search_string == 'Flatbush   Ditmas Park'
terms_arr
@search_string = terms_arr.join(' ').titleize
@search_string = terms_arr.pop
@borough_city  = terms_arr.last
terms_arr      =  search_term.split('-')
search_term = params[:search_term]
params
@search_string
params[:search_term]
params['search_term']
continue
params[:controller].split('/')
params[:controller].include?('buttercms')
params[:controller]
params
continue
@building
continue
params[:building]
action_name
@building
address.present? && zipcode.present?
params['buildings-search-txt']
params[:building][:zipcode]
params[:building][:building_street_address]
params
@building
continue
pop.each{ |nb| pop_h[nb.name] = nb.buildings_count }
pop.each{ |nb| @pop_h[nb.name] = nb.buildings_count }
pop_h = {}
