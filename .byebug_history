continue
[params[:latitude].to_f, params[:longitude].to_f]
params
results[:buildings]
results[:buildings].length
continue
params
continue
params[:latitude]
params
custom_latng = [params[:latitude].to_f, params[:longitude].to_f]
results[:buildings]
continue
results[:buildings]
results[:buildings].count
continue
params[:filter]
results[:buildings].count
results[:buildings]
continue
term
continue
@filters[:amenities].include?(val)
val
continue
val
continue
val
continue
val
@filters[:amenities].include?(val)
continue
@filters[:amenities].include?(val)
val
@filters[:amenities]
@filters.present? and @filters[:amenities].present?
continue
@filters[:price].include?(val)
@filters[:price].include?(val.to_s)
@filters[:price]
@filters.present? and @filters[:price].present?
val
continue
uploads.where.not(sort: nil).last
uploads.last
uploads.count
continue
Upload.where(imageable_id: self.imageable.id).where.not(id: self.id).pluck(:sort)
Upload.where(imageable_id: self.imageable.id).where.not(id: self.id).count
Upload.where(imageable_id: self.imageable.id) - self
Upload.where(imageable_id: self.imageable.id).count
self.imageable
self.sort
self
continue
params
continue
search_string
continue
tab_title
content_for? :page_title
continue
building.bedroom_ranges
beds.compact.join(', ')
beds.compact.join(',')
beds << building.four_plus_bed
beds << building.three_bed
beds << building.two_bed
beds << building.one_bed
beds << building.studio
beds = []
building.studio
continue
buildings.where(id: sorted_buildins.map(&:id))
dass
buildings.where(id: sorted_buildins.map(&:id)).includes(:listings).reorder('listings.active ASC, building_name ASC')
buildings.where(id: sorted_buildins.map(&:id)).includes(:listings).reorder('listings.active DESC, building_name ASC')
buildings.where(id: sorted_buildins.map(&:id))
sorted_buildins.map(&:id)
featured
continue
buildings.where(id: sorted_buildins.map(&:id)).reorder('listings.active asc')
buildings.where(id: sorted_buildins.map(&:id)).reorder('listings.active desc')
buildings.where(id: sorted_buildins.map(&:id))
sorted_buildins.pluck(:id)
sorted_buildins = buildings_with_active_listings + buildings_without_active_listings
buildings_without_active_listings.pluck(:id)
buildings_without_active_listings.length
buildings_without_active_listings = buildings.where.not(id: buildings_with_active_listings.pluck(:id))
buildings.where.not(id: buildings_with_active_listings.pluck(:id))
buildings_with_active_listings
continue
articles = buildings.join('LEFT OUTER JOIN listings ON listings.building_id = buildings.id')
articles = buildings.join('LEFT OUTER JOIN "listings" ON "listings"."building_id" = "buildings"."id"')
buildings.join('FULL OUTER JOIN "listings" ON "listings"."building_id" = "buildings"."id"')
buildings.join('Full OUTER JOIN "listings" ON "listings"."building_id" = "buildings"."id"').where('listings.active = ?', 'true').count
buildings.full_outer_joins(:listings).where('listings.active = ?', 'true').count
buildings.left_outer_joins(:listings).where('listings.active = ?', 'true').count
buildings.joins(:listings).where('listings.active = ?', 'true').count
buildings.joins(:listings).where('listings.active = ?', 'true')
buildings_with_active_listings.pluck(:id)
sorted_buildings.pluck(:id)
sorted_buildings = buildings_with_active_listings.union(buildings_without_active_listings)
buildings_with_active_listings.union(buildings_without_active_listings).
continue
buildings_with_active_listings.union(buildings_without_active_listings)
continue
sorted_buildings.pluck(:id)
sorted_buildings.count
sorted_buildings = buildings_with_active_listings.union(buildings_without_active_listings)
buildings_with_active_listings.union(buildings_without_active_listings)
continue
buildings_with_active_listings.or(buildings_without_active_listings)
buildings_with_active_listings.merge(buildings_without_active_listings)
continue
records.pluck(:id)
records.class
records.count
records = buildings.joins(:listings).where(id: sorted_buildins.map(&:id)).group("buildings.id").order("count(listings.building_id) DESC, buildings.building_name ASC")
records
records.size
records.count
records = buildings.joins(:listings).where(id: sorted_buildins.map(&:id)).group("listings.id, buildings.building_name").order("count(listings.building_id) DESC, buildings.building_name ASC")
records.count
records = buildings.joins(:listings).where(id: sorted_buildins.map(&:id)).group("listings.id").order("count(listings.building_id) DESC, buildings.building_name ASC")
records.count
records = buildings.joins(:listings).where(id: sorted_buildins.map(&:id)).group("listings.id").order("count(listings.building_id) DESC")
buildings.joins(:listings).where(id: sorted_buildins.map(&:id)).group("listings.id").order("count(listings.building_id) DESC")
buildings_with_active_listings.pluck(:id)
buildings.where(id: sorted_buildins.map(&:id)).pluck(:id)
buildings.where(id: sorted_buildins.map(&:id)).count
buildings.where(id: sorted_buildins.map(&:id))
buildings.count
sorted_buildins.length
sorted_buildins = (buildings_with_active_listings + buildings_without_active_listings)
buildings_without_active_listings.count
buildings_without_active_listings = buildings.where.not(id: buildings_with_active_listings.pluck(:id))
buildings_with_active_listings.pluck(:id)
buildings_with_active_listings = buildings.joins(:listings).where('listings.active = ?', 'true')
buildings.joins(:listings).where('listings.active = ?', 'true').count
buildings.count
continue
buildings.joins(:listings).where('listings.active is true').reorder("count(listings.building_id) desc")
buildings.joins(:listings).where('listings.active is true').reorder("count(listings.building_id) desc").count
buildings.joins(:listings).where('listings.active is true').reorder("count(listings.building_id) desc")
buildings.joins(:listings).where('listings.active is true').order("count(listings.building_id) desc")
buildings.joins(:listings).where('listings.active').reorder('building_name ASC, building_street_address ASC')
buildings.joins(:listings).where('listings.active is false')
buildings.joins(:listings).where('listings.active is true')
buildings.joins(:listings)
buildings.join(:listings)
buildings
buildings.join(:listings)
continue
spreadsheet.formatted_value(i)
spreadsheet.formatted_value
spreadsheet.column(i).formatted_value
spreadsheet.column(i)
spreadsheet.column
spreadsheet.methods
row['rent'].to_i
row['rent']
'12222'.to_i
'12222'.to_s
row['rent'].kind_of? Integer
row['rent'].kind_of Integer
row[i]
row
spreadsheet.row(i)
row(i)
row
spreadsheet
header
spreadsheet.row(i)
i
row['date_active'].kind_of?(Date)
row
continue
row
continue
row
continue
flash[:error] = @errors.join(', ')
@errors.join(',')
@errors
continue
row.keys
row.values
row.to_hash
row
Building.where('building_street_address @@ :q', q: row['building_address']).length
Building.where('building_street_address @@ :q', q: row['building_address'])
Building.where('building_street_address @@ :q', q: row['building_address']")
Building.where('building_street_address LIKE ?', "%#{row['building_address']}%")
Building.where('building_street_address ILIKE ?', "%#{row['building_address']}")
Building.where('building_street_address ILIKE ?', "%#{row['building_address']}%")
@building = Building.find_by(building_street_address: row['building_address'])
row['building_address']
row
continue
@listings.count
params
continue
params
continue
params[:selected_ids].join(',')
params[:selected_ids].split('')
params[:selected_ids].split(',')
params[:selected_ids].serialize
params[:selected_ids]
@listings.length
@listings
params
continue
Upload.cached_building_photos([params[:building_id]]).length
Upload.cached_building_photos([params[:building_id]])
@building
continue
params
building.present?
@searched_buildings.present?
@boundary_coords.present? and @boundary_coords.first.length > 1
continue
params[:longitude]
params[:latitude]
params
building.present?
@searched_buildings.present?
@boundary_coords.present? and @boundary_coords.first.length > 1
continue
@uploads.as_json()
@uploads.as_json
@uploads = @uploads.where('image_file_name is not null')
@uploads = Upload.where("imageable_id = ? or imageable_id in (?)", @building.id, @building.units.map{|u| u.id}).order(:sort)
@building = Building.find(params[:building_id])
params[:building_id].present?
params
continue
prices
prices.map {|p| (((p.price*12)*15)/100).to_i}
prices
prices.map {|p| median_arr << (((p.price*12)*15)/100).to_i}
median_arr.uniq.min
median_arr.uniq
median_arr
prices.each {|p| median_arr << (((p.price*12)*15)/100).to_i}
median_arr
prices.map {|p| median_arr << (((p.price*12)*15)/100).to_i}
median_arr = []
prices = rent_medians.where(range: price, bed_type: bedroom_ranges).order(price: :asc)
prices = rent_medians.where(range: price, bed_type: bedroom_ranges).order(price: :asc)[0]
prices.pluck(:price)
prices = rent_medians.where(range: price, bed_type: bedroom_ranges).order(price: :asc)
prices.min(:price)
prices = rent_medians.where(range: price, bed_type: bedroom_ranges)
rent_medians.where(range: price, bed_type: bedroom_ranges)
