continue
amenities.each{|b| b}
amenities.map{|b| b}
amenities
amenities.to_json
amenities.as_json
amenities.to_s
amenities
continue
building.amenities.split(',').map{|ba| puts ba}
building.amenities.split(',').each{|ba| puts ba}
building.amenities.split(',').each{|ba| ba}
building.amenities.split(',').map{|ba| ba}
building.amenities.split(',')
building.amenities
continue
building.amenities
continue
buildings.where('active_web is true and web_url is not null')
buildings.where('active_web is true and web_url is not null').count
buildings.where('active_web is true and web_url is not null')
buildings.where('active_web is true and web_url is not null').present?
name
continue
buildings.where('active_web is true and web_url is not null').present?
buildings.where('active_web is true OR web_url is not null').present?
buildings
name
continue
buildings.where(active_web: true).where.not(web_url: nil)
buildings.first
buildings.count
continue
buildings.count
continue
request.format
params
continue
@from_date + 29.days
@from_date + 30.days
@from_date + 1.month
@from_date
params[:date_to].present?
params
continue
params
continue
params[:commit]
params
continue
Listing.where('date_active >= ? AND date_active <= ?', @from_date, @to_date).count
Listing.where('date_active >= ? AND date_active <= ?', @from_date, @to_date)
@to_date
@from_date
continue
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: @building.neighborhood)
predifined_neighborhoods.include?(hood)
hood
continue
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).exists?
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).first
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: @building.neighborhood).where.not(neighborhoods_parent: nil, neighborhood3: nil).first
Building.all
Building.all.count
Building.all.pluck(:id)
Building.where(neighborhood: 'Midtown').pluck(:id)
Building.where(neighborhood: 'West Village').pluck(:id)
Building.where(neighborhood: 'anana32').pluck(:id)
Building.where(neighborhood: 'anana32').pick(:id)
Building.where(neighborhood: 'anana32').exists?
Building.where(neighborhood: 'anana32').exist?
Building.where(neighborhood: 'anana32').count
Building.where(neighborhood: 'anana').first
building_with_nb3 = Building.where(neighborhood: @building.neighborhood).where.not(neighborhoods_parent: nil, neighborhood3: nil).first
building_with_nb3 = Building.where(neighborhood: @building.neighborhood).where.not(neighborhoods_parent: nil, neighborhood3: nil)
building_with_nb3 = Building.where(neighborhood: @building.neighborhood).where.not(neighborhoods_parent: nil, neighborhood3: nil).count
building_with_nb3 = Building.where(neighborhood: @building.neighborhood).where.not(neighborhoods_parent: nil, neighborhood3: nil)
predifined_neighborhoods.include?(hood)
hood
continue
Building.with_featured_building(buildings, page_num).count
params[:page].to_i
params[:page]
continue
buildings
buildings.present?
continue
buildings.length
buildings.count
buildings = filter_by_listing_prices(buildings, min_price, max_price)
buildings.count
continue
distance
continue
buildings_with_active_listings(buildings).length
buildings.length
buildings.count
filter_params
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
continue
uploads.pluck(:id, :sort)
uploads
continue
params[:searched_by] == 'latlng' or session[:view_type] == 'mapView'
continue
params[:searched_by] == 'latlng' or session[:view_type] == 'mapView'
continue
params[:searched_by] == 'latlng' or session[:view_type] == 'mapView'
params[:searched_by]
browser.device.mobile?
continue
browser.device.mobile?
params[:searched_by]
params[:searched_by] == 'latlng' or session[:view_type] == 'mapView'
session[:view_type] == 'mapView'
session[:view_type]
continue
session
continue
top_two_featured_buildings
per_page_buildings
continue
buildings.where(id: filtered_buildings.map(&:id).uniq).uniq.count
buildings.where(id: filtered_buildings.map(&:id).uniq).count
filtered_buildings.map(&:id)
buildings.count
continue
buildings.uniq.count
buildings.uniq
buildings
buildings.pluck(:id)
buildings.count
continue
buildings.order('price DESC NULLS LAST, listings_count DESC, building_name ASC')
continue
featured_buildings.shuffle[0..1].length
featured_buildings.shuffle[0..1]
featured_buildings.length > 2
featured_buildings.length == 2
top_two_featured_buildings.length
top_two_featured_buildings
continue
buildings.where(id: sorting_buildings_ids(sort_order, buildings)).pluck(:id)
buildings.where(id: sorting_buildings_ids(sort_order, buildings)).order_by_max_price.pluck(:id)
sorting_buildings_ids(sort_order, buildings)
continue
buildings.where(id: sorting_buildings_ids(sort_order, buildings)).order_by_max_price.pluck(:id)
sorting_buildings_ids(sort_order, buildings)
continue
ids_arr.flatten
ids_arr
sort_by
continue
(buildings_with_rent + buildings_with_no_rent)
buildings_with_no_rent = buildings.where(max_listing_price: nil).pluck(:id)
buildings_with_rent = buildings.where.not(max_listing_price: nil).pluck(:id)
sort_by == '2'
sort_by
continue
(sorted_listed_building_ids(buildings))
buildings.pluck(:min_listing_price)
buildings = buildings.where(id: (sorted_listed_building_ids(buildings))).order(min_listing_price: :asc)
sort_params
continue
buildings = buildings.where(id: (buildings_with_rent+buildings_with_no_rent)).reorder(max_listing_price: :desc)
buildings.pluck(:max_listing_price)
buildings = buildings.where(id: (buildings_with_rent+buildings_with_no_rent)).reorder(max_listing_price: :desc)
buildings = buildings.where(id: (buildings_with_rent+buildings_with_no_rent)).order(max_listing_price: :desc)
buildings_with_no_rent = buildings.where(max_listing_price: nil).pluck(:id)
buildings_with_rent = buildings.where.not(max_listing_price: nil).pluck(:id)
buildings.reorder(max_listing_price: :desc).pluck(:max_listing_price)
buildings.order(max_listing_price: :desc).pluck(:max_listing_price)
continue
buildings[5]
buildings[4]
buildings[3]
buildings[2]
buildings[1]
buildings[0]
buildings
buildings.count
continue
listings.last.rent
listings.first.rent
listings.pluck(:rent)
listings.count
continue
listings.count
continue
listings.count
continue
listings.count
continue
listings.last.rent
listings.first.rent
listings.count
continue
buildings.pluck(:id)
buildings.class
buildings = all_buildings_ids.map {|id| buildings.detect {|b| b.id == id } }
buildings.pluck(:id)
buildings = Building.where(id: all_buildings_ids)90
Building.where(id: all_buildings_ids).pluck(:id)
all_buildings_ids.pluck(:id)Building.where(id: all_buildings_ids)
all_buildings_ids
continue
featured_buildings.shuffle[0..1].length
featured_buildings.shuffle[0..2].length
featured_buildings.shuffle[0..2]
featured_buildings.length
top_two_featured_buildings.pluck(:id)
top_two_featured_buildings = featured_buildings.length >= 2 ? featured_buildings.shuffle[0..2] : featured_buildings
featured_buildings.pluck(:id)
featured_buildings = featured_buildings(buildings)
buildings.pluck(:id)
continue
all_buildings_ids
buildings.pluck(:id)
buildings = buildings.unscoped.where(id: all_buildings_ids)
buildings.pluck(:id)
all_buildings_ids
buildings = buildings.where(id: all_buildings_ids)
all_buildings_ids
buildings_without_listing_rent.pluck(:id)
buildings_with_listing_rent.pluck(:id)
(buildings_with_listing_rent + buildings_without_listing_rent).map(&:id)
buildings_with_listing_rent
