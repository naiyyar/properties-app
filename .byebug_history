continue
@buildings.count
@buildings
continue
results.count
results
criteria
continue
@buildings.count
@buildings.last
continue
@buildings.last
@buildings.count
@buildings
continue
@buildings
@buildings.count
continue
building.neighborhood.present?
building
continue
building
continue
@review.errors.messages[:tos_agreement].first
@review.errors.messages[:tos_agreement]
@review.errors.messages
@review.errors
@review.error_messeges
@review.error_messages
flash.now[:error]
continue
review_flag_params
params
continue
params
continue
building.reviews.where(user_id: @user.id).count
@user
building.reviews.map(&:user_id)
building.reviews.count
building.reviews
building
continue
@user
continue
params
continue
params
continue
results.count
results = order(:neighborhoods_parent).where("neighborhoods_parent ILIKE ?", "%#{criteria}%").to_a.uniq(&:neighborhoods_parent)
results.count
results = order(:neighborhood).where("neighborhood ILIKE ?", "%#{criteria}%").to_a.uniq(&:neighborhood)
criteria
continue
criteria
continue
results = PgSearch.multisearch(params[:term])
params[:term]
continue
neighborhood.first['long_name']
neighborhood
grandparent_neighborhoods.include? neighborhood
parent_neighborhoods.include? neighborhood 
predifined_neighborhoods.include? neighborhood
neighborhood
continue
neighborhoods
geo_result
neighborhood
search
continue
neighborhoods
continue
neighborhoods
continue
search[0].data
search[0]
search.reverse[0]
search.reverse
search.inspect
search.to_a.sort
search.to_a
search.methods
search
search[0..4].sort
search[0..4]
search
self
params
search
search[0]
search[6].address_components_of_type(:neighborhood)
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
search
continue
Building.buildings_in_city(params, search_string).count
search_string
params
Building.buildings_in_city(params, city)
continue
Building.all.first
params['apt-search-txt'].split(',')[0] == 'New York'
params['apt-search-txt'].split(',')[0]
params
continue
self.vote
self.votes
self
continue
params
continue
@reviews = Review.where(reviewable_id: params[:building_id]).order('created_at desc')
Review
@reviews = Review.where(building_id: params[:building_id]).order('created_at desc')
params
continue
session[:after_contribute]
seesion
continue
@rental_price_history
continue
params
continue
params
continue
params
continue
building_amenities.sort.to_h
building_amenities.sort
building_amenities
continue
@building[k].blank?
@building[k].present?
@building[k]
k
continue
k
continue
@building[k]
@building
k
continue
building_amenities.values
building_amenities.keys
building_amenities
continue
session[:unit_id].present?
session[:building_id].present?
params[:contribution] == 'building_photos'
session[:contribution_for] == 'building_photos' && session[:search_term].present?
session
params
session[:form_data].present?
continue
params[:contribution]
params[:contribution].present?
params
continue
decimal_part.to_s.split('.')[1].to_f/100
decimal_part.to_s
decimal_part = number_with_precision(rating_cache.first.avg.round(2), precision: 2)
number_with_precision(rating_cache.first.avg.round(2), precision: 2)
continue
@unit.building
@unit
continue
rating_cache
building
continue
building
continue
building
continue
building
continue
building
continue
building
continue
building
continue
building
continue
decimal_part > 0.0 and decimal_part < 1.0
decimal_part
continue
avg.to_f
avg.to_i
avg
avg.to_s.split('.')
avg.split('.')
avg > 2.5
avg < 2.5
avg.class
avg = rating_cache.first.avg
rating_cache.first.avg
rating_cache.avg
rating_cache = RatingCache.where(cacheable_id: 2, cacheable_type: 'Building')
RatingCache.where(cacheable_id: 2, cacheable_type: 'Building').count
RatingCache.where(cacheable_id: 2, cacheable_type: 'building').count
RatingCache.where(cacheable_id: 2).count
RatingCache.where(cacheable_id: 2)
RatingCache.where(cacheable_id: 2).avg
RatingCache.first
RateCache
Rate.where(rateable_id: 2).map(&:stars)
15/5
Rate.where(rateable_id: 2).count
Rate.where(rateable_id: 2)
building.rates
building
continue
params
continue
params
continue
Gmaps4rails.geocode('733 2nd Ave, New York')
Gmaps4rails.geocode('733 2nd Ave, New York', true)
Gmaps4rails.places_for_address('733 2nd Ave, New York', 'AIzaSyDZtWN-GlVsIjuQMP8xN5dit3PmlMb-qjA', keyword = nil, radius = 7500, lang="en", raw = false)
continue
params
continue
session[:form_data]['unit_id']
session[:form_data][:building][:unit_id]
session[:form_data]
session[:form_data][:unit_id]
unit
continue
 session[:form_data]
session[:form_data]['building']['units_attributes']['0']['building_id'] = building.id
building = Building.find_by_building_street_address(session[:form_data]['building']['building_street_address'])
 session[:form_data]
session[:form_data]['building']['building_street_address']
session[:object_type].present? and session[:object_type] == 'unit' and session[:form_data]['building'].present?
session[:object_type].present? and session[:object_type] == 'building'
session[:form_data].present?
continue
params[:unit_id].present?
params
continue
params
continue
params
continue
building = Building.find_by_building_street_address(session[:form_data]['building']['building_street_address'])
session[:form_data]['building']['building_street_address']
session[:object_type].present? and session[:object_type] == 'unit' and session[:form_data]['building'].present?
session[:object_type] == 'building'
session[:object_type].present? 
