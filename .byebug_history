continue
coordinates
Gcoordinate.where(neighborhood: neighborhoods).map{|rec| { lat: rec.latitude, lng: rec.longitude}}
Gcoordinate.where(neighborhood: neighborhoods)
@buildings = Building.where(neighborhood: neighborhoods)
neighborhoods = params['apt-search-txt'].split(',')[0]
search.first.types[0] == 'neighborhood'
continue
params['apt-search-txt'].split(',')[0]
params['apt-search-txt'].split(',')
params['apt-search-txt'].split(' , ')
params['apt-search-txt'].split(' - ')
params
search.first.address_components[0]['long_name']
search.first.address_components[0]
search.first.address_components
search = Geocoder.search(params['apt-search-txt'])
params
continue
search.last.address_components[2]['long_name']
search.first.address_components[2]['long_name']
search = Geocoder.search(@building.building_street_address)
continue
search.first.address_components[2]['long_name']
search.last.address_components[2]['long_name']
search = Geocoder.search(@building.building_street_address)
continue
search.last.address_components[2]['long_name']
search.first.address_components[2]['long_name']
search.last
search.first
search = Geocoder.search(@building.building_street_address)
search = Geocoder.search(building.building_street_address)
continue
self
self.save
self.neighborhood = neighborhood
self
self.save
neighborhood = 'East Midtown'
east_side.present?
east_side = self.building_street_address.scan(Regexp.union(/East/,/east/))
east_side = self.building_street_address.scan(Regexp.union(/E/,/East/,/east/))
neighborhood == 'Midtown'
neighborhood = search.first.address_components[2]['long_name']
search.present?
search = Geocoder.search(self.building_street_address)
self
exit
continue
building_street_address
search.first.address_components
neighborhood = search.first.address_components[2]['long_name']
search = Geocoder.search(self.building_street_address)
self
continue
Building.geocode(params['apt-search-txt'])
search.first.address_components[2]['long_name']
search.first.address_components[2][:long_name]
search.first.address_components[2].long_name
search.first.address_components[2]
search.first.address_components
search = Geocoder.search(params['apt-search-txt'])
search.address_components
searc.address_components
search.first
search = Geocoder.search(params['apt-search-txt'])
Building.geocode(params['apt-search-txt'])
continue
Building.geocode(params['apt-search-txt'])
continue
Building.geocode(params['apt-search-txt'])
continue
params
Building.geocode(params['apt-search-txt'])
MultiGeocoder.geocode(params['apt-search-txt'])
Geocoder.geocode(params['apt-search-txt'])
continue
Geocoder.geocode(params['apt-search-txt'])
Building.find_closest(:origin => params['apt-search-txt'])
Building.by_distance(:origin => params['apt-search-txt'])
Building.within(5, :units => :kms, :origin => params['apt-search-txt'])
continue
Location.within(5, :units => :kms, :origin => params['apt-search-txt'])
continue
request.location.city
request.location
request
location
search = Geocoder.search(params['apt-search-txt'])
continue
search = Geocoder.search(params['apt-search-txt'])
continue
search = Geocoder.search(params['apt-search-txt'])
params
continue
search = Geocoder.search(params['apt-search-txt'])
params
continue
search = Geocoder.search(@building.zipcode)
search.last
search.first
search = Geocoder.search(@building.building_street_address)
@building = Building.find(params[:id])
params
@building
continue
search = Geocoder.search(params['10017'])
search = Geocoder.search(params['building_street_address'])
search = Geocoder.search(params[:building_street_address])
Geocoder.search(params[:building_street_address])
params
continue
search = Geocoder.search(params['apt-search-txt'])
params
continue
params
continue
params
continue
Building.where(building_street_address: params[:term]).count
Building.where(building_street_address: params[:term])
params
continue
val.gsub(/\s+/,"")
val.gsub('/\s+/',"")
val.gsub('/s+/',"")
val.gsub(/s+/,"")
val
continue
"1003".gsub(/\s+/, "")
" 1003".gsub(/\s+/, "")
" 1003".tr(' ')
" 1003"
Building.where('zipcode = ?','10003')
Building.where('zipcode = ?',zipcode)
@buildings = Building.where('zipcode = ?',zipcode)
zipcode = search_term[0]
@buildings = Building.where('zipcode = ?',zipcode)
search_term = params['apt-search-txt'].split(' - ')
search.first.types[0] == 'postal_code'
@buildings.to_a.count
@buildings.count
@building.count
@buildings = Building.near(params['apt-search-txt'], Building::DISTANCE)
coordinates = Geocoder.coordinates('10003')
coordinates = Geocoder.coordinates(params['apt-search-txt'])
search = Geocoder.search(params['apt-search-txt'])
params
continue
building
json
continue
building
index
continue
@buildings.count
@buildings
continue
near(search.coordinates, 2).to_a.uniq(&:zipcode).map(&:zipcode)
near(search.coordinates, 2).to_a.uniq(&:zipcode).count
near(search.coordinates, 2).to_a.uniq(&:zipcode)
near(search.coordinates, 1).to_a.uniq(&:zipcode)
near(search.coordinates, 1).to_a.uniq(&:zipcode).count
near(search.coordinates,50).to_a.uniq(&:zipcode).count
near(search.coordinates, Building::DISTANCE).to_a.map(&:zipcode)
near(search.coordinates, Building::DISTANCE).to_a.uni
near(search.coordinates, Building::DISTANCE).count
near(search.coordinates, Building::DISTANCE).to_a.uniq(&:zipcode).count
params
continue
search.coordinates
search = Geocoder.search(params[:term]).first
params
continue
search.coordinates
search = Geocoder.search(params[:term]).first
params
continue
Building.where(zipcode: '10003')
params
search.coordinates
Building.neighborhood_search_by_zipcode(search, params).map{|z| z.zipcode}
Building.neighborhood_search_by_zipcode(search, params).count
search.types.include? 'postal_code'
Building.neighborhood_search_by_zipcode(search, params)
Building.neighborhood_search_by_street_address(search, params)
Building.text_search_by_building_name(params[:term])
Building.text_search_by_city(params[:term]).to_a.uniq(&:city)
params
continue
number_to_add
ave_address
continue
number.to_i/10
number.split('')
number.split
number
ave.join(' ')
ave.join('')
ave.join()
ave = address.split(' ') - [number]
address.split(' ') - [number]
number
address
number = address.split(' ')[0]
address.split(' ')
address.split(' ').includes? address
address.split(' ').includes address
address.includes(address.split(' '))
address.split(' ')
18+8
18+35
37/2
25/2
25%2
25/2
address.split(' ')[0].to_i
address.split(' ')[0]
address.split(' ')
address.split('')
address
continue
Geocoder.search(@building.building_street_address)
Building.near(@building.building_street_address, 50)
@building.near(@building.building_street_address, 50)
@building
continue
Building.text_search(params[:term])
Building.text_search(params[:term]).count
Building.text_search(params[:term])
Building.text_search_by_city(params[:term]).count
continue
@unit.name.split('')[0] == '#'
@unit.name.split('')
@unit.name.split('#')
'#'.include(@unit.name.split(''))
@unit.name.split('').include('#')
@unit.name.split('').includes('#')
@unit.name.split('').inlcudes('#')
@unit.name.split('')
@unit.split('')
@unit.split''()
@unit.includes('#')
@unit.include('#')
@unit.name
continue
 Geocoder.coordinates('Manhattan')
coordinates
params
@lng
@lat
continue
Gmaps4rails.build_markers(@buildings)
@buildings.count
@buildings
