continue
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent ASC")
buildings.joins(:listings).select('listings.rent').reorder("listings.rent ASC")
buildings.to_sql
sorted_building_ids_by_rent(buildings, 'ASC')
least_exp_sorted_buildings(buildings)
filters.present? && has_listing_filters?(filters.keys)
buildings = buildings.where(id: (sorted_building_ids_by_min_price(buildings)))
continue
transparentcity_buildings
transparentcity_buildings.length
transparentcity_buildings
continue
Building.where(id: ids).order("array_position(ARRAY[#{ids.join(',')}], buildings.id)")
Building.where(id: ids).order("array_position(ARRAY[#{ids.join(',')}], buildings.id)")[0]
Building.where(id: ids).order("array_position(ARRAY[#{ids.join(',')}], buildings.id)")
Building.where(id: ids.uniq).order('array_position(?, buildings.id)', ids.uniq)
Building.where(id: ids.uniq)
ids
continue
Building.where(id: ids).pluck(:id)
Building.where(id: ids)
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }.Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.length
Building.where(id: ids).sort_by{|p| ids.index(p.id)}
ids
continue
search_string
top2_featured_buildings(search_string.downcase)
continue
filters.keys
filters
continue
filters.keys
filters
continue
buildings.where(id: (sorted_building_ids_by_min_price(buildings))).pluck(:id)
buildings.where(id: (sorted_building_ids_by_min_price(buildings))).order_by_min_rent
sorted_building_ids_by_min_price(buildings)
sort_params
continue
per_page_buildings.first.listings.active.pluck(:bed)
per_page_buildings.first.listings.active.count
per_page_buildings.first.listings.active
per_page_buildings.first.get_listings(filter_params)
per_page_buildings.first
continue
final_results[0][:all_buildings].length
@per_page_buildings[0]
@per_page_buildings.length
continue
Building.includes(:featured_buildings).where(id: FeaturedBuilding.active.pluck(:building_id).shuffle[0..1])
Building.where(id: FeaturedBuilding.active.pluck(:building_id).shuffle[0..1]).includes(:featured_buildings)
Building.where(id: FeaturedBuilding.active.pluck(:building_id).shuffle[0..1])
continue
Building.where(id: fbs_ids.shuffle[0..1])
fbs_ids.shuffle[0..1]
fbs_ids = FeaturedBuilding.active.pluck(:building_id)
Building.joins(:featured_buildings).where(featured_buildings: { active: true }).pluck(:id)
Building.joins(:featured_buildings).where(featured_buildings: { active: true }).order(featured_buildings: 'RANDOM()')
Building.joins(:featured_buildings).where(featured_buildings: { active: true }).count
Building.joins(:featured_buildings).where(featured_buildings: { active: true })
searched_buildings.where(id: fbs.pluck(:building_id)).length
searched_buildings.where(id: fbs.pluck(:building_id))
fbs = FeaturedBuilding.active.reorder('RANDOM()').limit(2)
fbs = FeaturedBuilding.active.order('RANDOM()').limit(2)
searched_buildings.length
fbs
continue
fbs
continue
buildings.count
per_page_buildings
top2_featured
per_page_buildings.length
per_page_buildings
all_buildings
buildings
buildings.length
all_buildings.length
per_page_buildings.blank? && all_buildings.present?
top2_featured
all_buildings
per_page_buildings
continue
buildings.first
per_page_buildings.first
continue
sort_params
continue
max_listing_price
continue
Listing.maximum('rent')
buildings.where('MAX(listings.rent)').first
Listing.first
buildings.where('MAX(listings.price)').first
buildings.where('MAX(listings.price)')
buildings.pluck(:id).uniq
buildings.pluck(:id)
buildings.to_sql
buildings
continue
listing_beds
beds
price
filter_params
params
beds
continue
