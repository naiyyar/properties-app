continue
object_counter
continue
object_counter
continue
object_counter
continue
object_counter
continue
object_counter
object.kind_of?(FeaturedAgent)
index
continue
@others.map(&:id)
@first_four.map(&:id)
@others     = @all_buildings - @first_four
@first_four = @all_buildings.first(4)
(@all_buildings - @first_four).map(&:id)
@all_buildings.first(4).map(&:id)
@all_buildings.map(&:id).
@per_page_buildings.map(&:id)
@per_page_buildings.length
@all_buildings.length
continue@all_buildings.first(4)
continue
building
continue
building
continue
building
continue
building
continue
building.featured?
building
continue
building
building.featured?
continue
building.featured?
@filter_params
building
continue
set_bed_ranges(building, params[:filter])
continue
set_bed_ranges(building, params[:filter])
building.full_street_address
continue
building.full_street_address
building.full_address
building.id
set_bed_ranges(building, params[:filter])
params[:filter]
continue
agents.pluck(:neighborhood)
neighborhood(nb)
agents
continue
queens_children.include?(nb)
nb
continue
parent_neighborhoods_count(nb)
@pop_nb_hash[nb].present?
@pop_nb_hash[nb]
options[:show_count]
options
continue
request.fullpath
params
continue
params
continue
@featured_agent.end_date.to_s(:no_timezone)
@featured_agent.expired?
@featured_agent
continue
params
continue
neighborhood(nb)
nb
continue
params
continue
@featured_agent
params
continue
FeaturedAgent.where(neighborhood: @search_string).active.order('RANDOM()').limit(1)
@search_string
continue
params
continue
review.uploads.first.image.url
review.uploads.first.url
review.uploads
review.uploads.present?
continue
buildings.months_free.map(&:id)
buildings.map(&:id)
buildings.months_free.length
buildings.months_free.count
buildings.months_free
Building.find(273).listings.active.months_free
Building.find(271).listings.active.months_free
Building.find(271).listings.active.count
Building.find(271).listings.ative.count
buildings.pluck(:id, :listings_count)
continue
Building.with_active_listing.join_with_listings.months_free.map(&:id)
Building.with_active_listing.join_with_listings.months_free.map(&:id).length
Building.with_active_listing.left_outer_joins(:listings).distinct.months_free.map(&:id).length
Building.with_active_listing.left_outer_joins(:listings).distinct.months_free.map(&:id)
Building.with_active_listing.left_outer_joins(:listings).months_free.map(&:id)
Building.with_active_listing.left_outer_joins(:listings).months_free.length
Building.with_active_listing.left_outer_joins(:listings).months_free
Building.left_outer_joins(:listings).months_free.count
Building.find(273).listings.where('free_months > ?', 0).active.count
Building.find(273).listings.where('free_months > ?', 0).count
Building.find(273).listings.where('free_months is not null').active.count
Building.find(273).listings.where('free_months is not null').count
buildings.months_free.pluck(:id)
buildings.months_free.length
buildings.length
continue
Listing.where(building_id: 273).active.pluck(:free_months).compact
Listing.where(building_id: 273).active.pluck(:free_months)
Listing.where(building_id: 273).active.count
Listing.where(building_id: 274).active.first
Listing.where(building_id: 274).active.count
buildings.pluck(:id, :listings_count)
buildings.months_free.pluck(:id, :listings_count)
buildings.months_free.pluck(:id, :listings_count).length
buildings.pluck(:id, :listings_count).length
Building.find(271).listings.active.pluck(:free_months)
Building.find(271).listings.active.count
Building.find(271).as_json
Building.find(273).as_json
Building.find(192).as_json
Building.find(192).listings.active.pluck(:free_months)
Building.find(192).listings_count
Building.find(192).listings.active.count
buildings.months_free.pluck(:id, :listings_count)
buildings.pluck(:id, :listings_count)
continue
Building.find(273).listings.active.
Building.find(273).listings.active.pluck(:free_months)
buildings.months_free.map(&:listings_count)
buildings.map(&:listings_count)
continue
min_and_max_price?
get_listings_beds
bedroom_ranges
beds
continue
params[:filter_params]
params
continue
url.match('matterport').present?
url.match('matterport').to_s
url.match('matterport').names
url.match('matterport').methods
url.match('matterport').data
url.match('matterport')
url.include?('matterport')
url
url.present? && url.match(mtp_matcher).present?
continue
has_tour
continue
VideoTour.all.group_by{|v| v.category}
VideoTour.all.group(:category).as_json
VideoTour.all.group(:category)
VideoTour.all.count
VideoTour.all
@building
@building.video_tours
continue
params[:sort_index].to_i
continue
params[:category]
params
continue
buildings.to_sql
buildings.length
sort_params
continue
buildings
continue
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('buildings.id')[0]
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('buildings.id')
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('buildings.id').length
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('listings.id').length
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('listings.id')
buildings.with_active_listing.left_outer_join(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('listings.id')
buildings.with_active_listing.joins(:listings).distinct.length
buildings.with_active_listing.joins(:listings).disctinct.length
buildings.with_active_listing.joins(:listings).uniq
buildings.with_active_listing.left_joins(:listings).uniq
buildings.with_active_listing.left_joins(:listings).uniq.length
buildings.with_active_listing.left_joins(:listings).length
buildings.left_joins(:listings).length
buildings.left_joins :listings
buildings.with_active_listing.left_outer_joins(:listings).length
buildings.with_active_listing.joins(:listings).length
buildings.length
buildings.count
continue
ids = buildings_with_prices.map(&:id).uniq
buildings_with_prices = buildings.between_prices(min_price.to_i, max_price.to_i)
buildings.length
continue
Listing.active.where(building_id: [419, 273], bed: ['0']).pluck(:rent)
ids = buildings_with_prices.map(&:id).uniq
buildings_with_prices = buildings.between_prices(min_price.to_i, max_price.to_i)
ids = buildings_with_prices.map(&:id).uniq
buildings.length
buildings.between_prices(min_price.to_i, max_price.to_i).length
max_price.to_i
min_price.to_i
min_price
continue
Listing.active.where(building_id: [416, 419, 273, 354, 413], bed: ['0']).pluck(:rent)
Listing.active.where(building_id: [416, 419, 273, 354, 413], bed: ['0'])
Listing.active.where(building_id: [416, 419, 273, 354, 413], bed: ['0']).pluck(:bed)
Listing.active.where(building_id: [416, 419, 273, 354, 413]).pluck(:bed)
Listing.active.where(building_id: [416, 419, 273, 354, 413]).count
buildings_with_beds.length
ids
continue
buildings_with_beds.to_sql
beds
ids
continue
buildings_with_prices
ids
continue
transparentcity_buildings.order_by_id_pos(ids).length
transparentcity_buildings.order_by_id_pos(ids)
ids.empty?
ids
continue
sort_params
@filters
continue
@filters[:listing_bedrooms].present?
@filters[:listing_bedrooms]
@filters
continue
finders.reorder("listings.rent #{sort_type}").map(&:id).uniq
finders.length
finders = finders.where('listings.bed in (?)', [0])
finders = buildings.joins(:listings).where('listings.active is true')
finders.reorder("listings.rent #{sort_type}").map(&:id).uniq
finders.reorder("listings.rent #{sort_type}")
finders.length
finders
continue
