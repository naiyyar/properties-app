continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
v
@building[:k]
k[]
@building
continue
@buildings.methods
@buildings.current_page
@buildings.total_pages
@buildings.total_pages == @buildings.current_page
params
continue
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).paginate(:page => params[:page], :per_page => results_count)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 20)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 10)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 26)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 27)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 28)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 22)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 30)
params
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 40)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => results_count.to_i)
results_count
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => results_count)results_count
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 20)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => results_count)
@buildings.count
results_count
params
param
continue
@hash.length
@hash
json_array
continue
@hash[0]
@hash.length
@hash
@buildings.count
continue
udid = session[:form_data]['upload_uid']
session[:form_data]['upload_uid']
session[:form_data]
session[:form_data][:upload_uid]
find_reviewable
continue
session[:form_data]
continue
session[:form_data]
params
continue
session[:form_data]
session[:form_data].present?
session[:form_data] = nil
session[:form_data].present?
session[:form_data]
continue
session[:form_data]
continue
@reviewable
params[:score].keys
params[:score]
params
continue
params[:review_attachments]
params
continue
params[:review_attachments][:image].length
params[:review_attachments]
params[review_attachments]
params
continue
params
continue
params
continue
score.keys
rateable.class.name
rateable.class.name.downcase
score
continue
params
@review
continue
@review
params
continue
params[:score]
params
continue
row[:building_address]
row[:building_address] ? 'yes' : 'no'
row['building_address'] ? 'yes' : 'no'
row['building_address'] == 'false'
row['building_address']
continue
building = Building.where(building_street_address: params[:term_address].)
building = Building.where(building_street_address: params[:term_address])
building = Building.where('building_street_address like ?', "%#{params[:term_address]}%")
building = Building.where(building_street_address: params[:term_address])
params['term_address'].present?
params
continue
params
continue
results.flatten[6]
results.flatten[5]
results.flatten[4]
results.flatten[3]
results.flatten[2]
results.flatten[1]
results.flatten[0]
results.flatten
results
results[0]
results.count
continue
Building.text_search_by_city(params[:term]).to_a.uniq(&:city)
Building.search_by_zipcodes(params[:term])
Building.search_by_building_name(params[:term]).count
Building.search_by_street_address(params[:term]).to_a.uniq(&:building_street_address)
Building.search_by_neighborhood(params[:term]).to_a.uniq(&:neighborhood)
Building.search_by_building_name(params[:term]).count
Building.search_by_pneighborhoods(params[:term])
params
continue
self.city == neighborhood
neighborhood = search[0].address_components_of_type(:neighborhood)
locality = search[0].address_components_of_type(:sublocality).first['long_name']
longitude
latitude
search[0].address_components_of_type(:neighborhood)
search[0]
continue
Building.search_by_street_address(params[:term]).select(:building_name, :building_street_address)
Building.search_by_street_address(params[:term]).to_a.uniq(&:building_street_address).select(:building_name, :building_street_address)
Building.search_by_street_address(params[:term]).to_a.uniq(&:building_street_address).count
Building.text_search_by_city(params[:term]).to_a.uniq(&:city)
Building.search_by_zipcodes(params[:term])
Building.search_by_street_address(params[:term]).to_a.uniq(&:building_street_address)
Building.search_by_neighborhood(params[:term]).to_a.uniq(&:neighborhood)
Building.search_by_building_name(params[:term]).map(&:building_name)
Building.search_by_building_name(params[:term]).map(:building_name)
Building.search_by_building_name(params[:term]).count
Building.search_by_building_name(params[:term])
Building.search_by_pneighborhoods(params[:term])
params
continue
Building.where(building_street_address: params[:term])
params[:term].present?
@search.first.types[0] == 'postal_code'
@search = Geocoder.search(params['apt-search-txt'])
@coordinates = Geocoder.coordinates(params['apt-search-txt'])
params['term_address'].present?
search_string = params['apt-search-txt'].split(',')[0]
params['apt-search-txt'].present?
params
continue
Building.buildings_in_neighborhood(params)
@boundary_coords << Gcoordinate.neighbohood_boundary_coordinates(params[:neighborhoods])
search_string
params
continue
search_string
params
@search
@coordinates
continue
params['apt-search-txt'].present?
params
continue
search[1].address_components_of_type(:sublocality).first['long_name']
search[0].address_components_of_type(:sublocality).first['long_name']
search[0].address_components_of_type(:sublocality).first[:long_name]
search[0].address_components_of_type(:sublocality)
search[0].address_components_of_type(:city)
search[0].address_components_of_type(:political)
search[0].data
search[0]
self.city
self
search[11]
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search[0]
search[0..4]
predifined_neighborhoods.include? neighborhood
neighborhood
continue
Geocoder.coordinates('Chelsea')
params['apt-search-txt']
coordinates
Geocoder.coordinates(params['apt-search-txt'])
search_string
search_string == 'New York'
params['term_address'].present?
params['apt-search-txt'].present?
coordinates.blank? and search.blank? and params[:term].present?
coordinates
search_string
params
search
continue
search
continue
search
continue
search
continue
search
continue
search
continue
search
continue
search
continue
@buildings = Building.buildings_in_neighborhood(params)
params[:neighborhoods].present?
search.first.types[0] == 'postal_code'
search
continue
@buildings.count
@building.count
@buildings = Building.buildings_in_neighborhood(params)
geo_coordinates = Gcoordinate.neighbohood_boundary_coordinates(params[:neighborhoods])
!manhattan_kmls.include? @brooklyn_neighborhoods
search_string
