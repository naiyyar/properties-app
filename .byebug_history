continue
@pop_nb_hash
@pop_nb_hash[nb]
nb
continue
term
searched_by
continue
building.uploaded_images
building = @all_buildings[1]
@all_buildings[0].uploaded_images
@all_buildings[1]
@all_buildings[0]
@all_buildings.count
@all_buildings
continue
cache.delete("apt_building_#{@building.id}")
cache.delete('111')
cache = ActiveSupport::Cache::MemoryStore.new
ActiveSupport::Cache::MemCacheStore.methods
ActiveSupport::Cache::MemCacheStore.delete('1')
Time.now.to_i
Time.now
self.updated_at
Rails.cache.methods
continue
Rails.cache.clear("#{@building.id}")
Rails.cache.delete("#{@building.id}")
Rails.cache.methods
continue
params
@management_company
continue
@per_page_buildings.length
@per_page_buildings = final_results[1].paginate(:page => params[:page], per_page: 20)
final_results[1].count
final_results[0]
final_results[:0]
final_results
final_results.class
continue
@all_buildings.count
@per_page_buildings.length
@per_page_buildings.count
continue
final_results['per_page_buildings'].to_a.paginate(:page => params[:page], per_page: 20).count
final_results['per_page_buildings'].paginate(:page => params[:page], per_page: 20).count
final_results['per_page_buildings'].paginate(:page => params[:page], paer_page: 20).count
@per_page_buildings.count
continue
@per_page_buildings.length
per_page_buildings.length
continue
per_page_buildings.page(:page => page_params, per_page: 20)
 per_page_buildings
per_page_buildings.page(:page => page_params, per_page: 20).count
page_params
per_page_buildings.limit(20).count
per_page_buildings.limit(20)
per_page_buildings
per_page_buildings.class
per_page_buildings.paginate(:page => page_params, :per_page => 20).count
page_params
final_results[:per_page_buildings].count
per_page_buildings.count
continue
final_results[:per_page_buildings].count
@all_buildings.count
@per_page_buildings.count
continue
(@total_rates.to_f/aggregate_reviews(managed_buildings)).round(2)
(@total_rates.to_f/aggregate_reviews(managed_buildings))
aggregate_reviews(managed_buildings)
@total_rates
continue
@all_buildings.count
@manage_buildings
@manage_buildings.count
continue
@hash.length
@hash.last['longitude']
@hash.last['latitude']
@hash.last
buildings.first.longitude
buildings.first.latitude
@hash[0]['longitude']
@hash[0]['latitude']
 @hash[0]@hash[0]['latitude']
 @hash
continue
search_string
searched_by
results
continue
BuildingSearch.buildings_in_neighborhood(@search_string)
BuildingSearch.class
BuildingSearch
continue
reviewable.suggested_percent
reviewable = self.reviewable
self.reviewable
self
continue
bt_block_class.include?('btn-xs')
bt_block_class
'btn-xs'.include?(bt_block_class)
bt_block_class
continue
manhattan_kmls.include?(@search_string)
@search_string
continue
manhattan_kmls.include?(@search_string)
@search_string
manhattan_kmls
continue
nb_coords.map{|rec| { lat: rec.latitude, lng: rec.longitude} }
nb_coordsnb_coords
nb_coords
continue
request.host
request.remote_host
request.methods
request.url
continue
self
median_arr
continue
self
median_arr
continue
self
median_arr
continue
median_arr
continue
median_arr
self
continue
self
median_arr
continue
self
median_arr
continue
median_arr
self
continue
m_arr.sort
m_arr
median_arr.map{|item| m_arr << item.to_i}
m_arr = []
price
bedroom_ranges
self.sort
self
median_arr
continue
median_arr
continue
median_arr
self
continue
median_arr
self
continue
self
continue
self
median_arr
continue
@rent_medians.count
@rent_medians.where(range: option[1]).count
option[1]
prices_options
options[1]
continue
@rent_medians.where(range: option[1]).count
option[1]
continue
buildings.kind_of? Array
left.count
left = buildings - top_two_featured_buildings
buildings.count
buildings
top_two_featured_buildings.count
top_two_featured_buildings
continue
(params[:action] == 'show' and params[:controller] == 'buildings')
params[:action] == 'search'
params[:action] == 'search' and (params[:action] == 'show' and params[:controller] == 'buildings')
continue
buildings.first
price
continue
@buildings.uniq(&:id).class
@buildings.uniq(&:id).count
buildings.two_bed.map(&:id)
buildings.one_bed.map(&:id)
buildings.two_bed.count
buildings.one_bed.count
buildings.one_bed
beds
@buildings
@buildings[2].count
@buildings[1].count
@buildings.class
@buildings[0].count
@buildings.count
@buildings
1      2
continue
beds
continue
@buildings.flatten
@buildings.flatten.count
@buildings
@buildings[0].count
@buildings.count
continue
@buildings.values
{"1"=>#<ActiveRecord::Relation [#<Building id: 105, building_name: "", building_street_address: "101 Allen Street", created_at: "2016-12-10 22:17:44", updated_at: "2019-03-18 17:29:38", photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, latitude: 40.7189409, longitude: -73.9908769, address2: nil, zipcode: "10002", webaddress: nil, city: "New York", phone: nil, state: "NY", laundry_facility: false, parking: false, doorman: false, description: nil, elevator: nil, garage: false, gym: false, live_in_super: false, pets_allowed_cats: false, pets_allowed_dogs: false, roof_deck: false, swimming_pool: false, walk_up: true, neighborhood: "Lower East Side", neighborhoods_parent: "Lower Manhattan", user_id: 2, floors: 5, built_in: 1900, number_of_units: 16, courtyard: false, management_company_run: false, neighborhood3: "Lower Manhattan", web_url: "", building_type: "Condo Building", childrens_playroom: false, no_fee: false, reviews_count: 1, management_company_id: 1, studio: 0, one_bed: 1, two_bed: nil, three_bed: nil, four_plus_bed: nil, price: 1, avg_rating: 5.0, email: nil, active_email: true, active_web: true>, #<Building id: 50, building_name: "", building_street_address: "174 Delancey Street", created_at: "2016-10-04 02:21:57", updated_at: "2019-03-18 17:29:53", photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, latitude: 40.7179205, longitude: -73.9850461, address2: nil, zipcode: "10002", webaddress: nil, city: "New York", phone: nil, state: "NY", laundry_facility: false, parking: false, doorman: false, description: nil, elevator: nil, garage: false, gym: false, live_in_super: false, pets_allowed_cats: false, pets_allowed_dogs: false, roof_deck: false, swimming_pool: false, walk_up: true, neighborhood: "Lower East Side", neighborhoods_parent: "Lower Manhattan", user_id: 2, floors: 5, built_in: 1920, number_of_units: 22, courtyard: false, management_company_run: false, neighborhood3: "", web_url: "", building_type: "Rental Building", childrens_playroom: false, no_fee: false, reviews_count: 1, management_company_id: nil, studio: 0, one_bed: 1, two_bed: nil, three_bed: nil, four_plus_bed: nil, price: 1, avg_rating: 3.5, email: nil, active_email: true, active_web: true>]>, "2"=>#<ActiveRecord::Relation [#<Building id: 115, building_name: "", building_street_address: "13 Essex Street", created_at: "2016-12-19 23:20:11", updated_at: "2019-03-18 17:29:45", photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, latitude: 40.715183, longitude: -73.990259, address2: nil, zipcode: "10002", webaddress: nil, city: "New York", phone: nil, state: "NY", laundry_facility: false, parking: false, doorman: false, description: nil, elevator: nil, garage: false, gym: false, live_in_super: false, pets_allowed_cats: false, pets_allowed_dogs: false, roof_deck: false, swimming_pool: false, walk_up: true, neighborhood: "Chinatown", neighborhoods_parent: "Lower East Side", user_id: 2, floors: 6, built_in: 1900, number_of_units: 44, courtyard: false, management_company_run: false, neighborhood3: "Lower Manhattan", web_url: "", building_type: "Rental Building", childrens_playroom: false, no_fee: false, reviews_count: 1, management_company_id: nil, studio: nil, one_bed: nil, two_bed: 2, three_bed: nil, four_plus_bed: nil, price: 1, avg_rating: 5.0, email: nil, active_email: true, active_web
@buildings
@buildings.values.count
@buildings.values
@buildings.values.methods
@buildings.values[1]
@buildings.values[0]
@buildings.values.count
@buildings.values
@buildings['2'].count
@buildings['1'].count
@buildings[1].count
@buildings.keys
@buildings
continue
@buildings[1]
@buildings[1][2]
@buildings[0][2]
@buildings[0][1]
@buildings[0][0]
@buildings[0]
@buildings[0].id
@buildings.count
@buildings[3]
@buildings[2]
@buildings[1]
@buildings[0]
@buildings.length
@buildings[1]
@buildings[0].count
@buildings
@buildings[0].count
@buildings.count
@buildings << buildings.two_bed
@buildings.class
@buildings
