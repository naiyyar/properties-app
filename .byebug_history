continue
row.keys
row.values
row.to_hash
row
Building.where('building_street_address @@ :q', q: row['building_address']).length
Building.where('building_street_address @@ :q', q: row['building_address'])
Building.where('building_street_address @@ :q', q: row['building_address']")
Building.where('building_street_address LIKE ?', "%#{row['building_address']}%")
Building.where('building_street_address ILIKE ?', "%#{row['building_address']}")
Building.where('building_street_address ILIKE ?', "%#{row['building_address']}%")
@building = Building.find_by(building_street_address: row['building_address'])
row['building_address']
row
continue
@listings.count
params
continue
params
continue
params[:selected_ids].join(',')
params[:selected_ids].split('')
params[:selected_ids].split(',')
params[:selected_ids].serialize
params[:selected_ids]
@listings.length
@listings
params
continue
Upload.cached_building_photos([params[:building_id]]).length
Upload.cached_building_photos([params[:building_id]])
@building
continue
params
building.present?
@searched_buildings.present?
@boundary_coords.present? and @boundary_coords.first.length > 1
continue
params[:longitude]
params[:latitude]
params
building.present?
@searched_buildings.present?
@boundary_coords.present? and @boundary_coords.first.length > 1
continue
@uploads.as_json()
@uploads.as_json
@uploads = @uploads.where('image_file_name is not null')
@uploads = Upload.where("imageable_id = ? or imageable_id in (?)", @building.id, @building.units.map{|u| u.id}).order(:sort)
@building = Building.find(params[:building_id])
params[:building_id].present?
params
continue
prices
prices.map {|p| (((p.price*12)*15)/100).to_i}
prices
prices.map {|p| median_arr << (((p.price*12)*15)/100).to_i}
median_arr.uniq.min
median_arr.uniq
median_arr
prices.each {|p| median_arr << (((p.price*12)*15)/100).to_i}
median_arr
prices.map {|p| median_arr << (((p.price*12)*15)/100).to_i}
median_arr = []
prices = rent_medians.where(range: price, bed_type: bedroom_ranges).order(price: :asc)
prices = rent_medians.where(range: price, bed_type: bedroom_ranges).order(price: :asc)[0]
prices.pluck(:price)
prices = rent_medians.where(range: price, bed_type: bedroom_ranges).order(price: :asc)
prices.min(:price)
prices = rent_medians.where(range: price, bed_type: bedroom_ranges)
rent_medians.where(range: price, bed_type: bedroom_ranges)
bedroom_ranges
price
rent_medians
continue
buildings.where(id: [413, 412]).count
buildings.where(id: [413, 412])
buildings.pluck(:id)
top_two_featured_buildings.map(&:id)
top_two_featured_buildings.pluck(:id)
continue
Building.joins(:featured_building).where('featured_buildings.active is true AND end_date >= ?', Date.today).length
Building.joins(:featured_building).where('featured_buildings.active is true AND end_date >= ?', Date.today)
Building.joins(:featured_building).where('featured_buildings.active is true').length
Building.joins(:featured_building).where(active: true).length
Building.joins(:featured_building).where(active: true)
Building.joins(:featured_building)
Building.joins(:featured_building).length
Building.joins(:featured_buildings).length
Building.joins(:featured_buildings)
featured_buildings
continue
@all_buildings[1]
@all_buildings[0]
@all_buildings.length
continue
@building.uploaded_images_count
@building.buildings_images
uploads.count
continue
@pop_nb_hash
@pop_nb_hash[nb]
nb
continue
term
searched_by
continue
building.uploaded_images
building = @all_buildings[1]
@all_buildings[0].uploaded_images
@all_buildings[1]
@all_buildings[0]
@all_buildings.count
@all_buildings
continue
cache.delete("apt_building_#{@building.id}")
cache.delete('111')
cache = ActiveSupport::Cache::MemoryStore.new
ActiveSupport::Cache::MemCacheStore.methods
ActiveSupport::Cache::MemCacheStore.delete('1')
Time.now.to_i
Time.now
self.updated_at
Rails.cache.methods
continue
Rails.cache.clear("#{@building.id}")
Rails.cache.delete("#{@building.id}")
Rails.cache.methods
continue
params
@management_company
continue
@per_page_buildings.length
@per_page_buildings = final_results[1].paginate(:page => params[:page], per_page: 20)
final_results[1].count
final_results[0]
final_results[:0]
final_results
final_results.class
continue
@all_buildings.count
@per_page_buildings.length
@per_page_buildings.count
continue
final_results['per_page_buildings'].to_a.paginate(:page => params[:page], per_page: 20).count
final_results['per_page_buildings'].paginate(:page => params[:page], per_page: 20).count
final_results['per_page_buildings'].paginate(:page => params[:page], paer_page: 20).count
@per_page_buildings.count
continue
@per_page_buildings.length
per_page_buildings.length
continue
per_page_buildings.page(:page => page_params, per_page: 20)
 per_page_buildings
per_page_buildings.page(:page => page_params, per_page: 20).count
page_params
per_page_buildings.limit(20).count
per_page_buildings.limit(20)
per_page_buildings
per_page_buildings.class
per_page_buildings.paginate(:page => page_params, :per_page => 20).count
page_params
final_results[:per_page_buildings].count
per_page_buildings.count
continue
final_results[:per_page_buildings].count
@all_buildings.count
@per_page_buildings.count
continue
(@total_rates.to_f/aggregate_reviews(managed_buildings)).round(2)
(@total_rates.to_f/aggregate_reviews(managed_buildings))
aggregate_reviews(managed_buildings)
@total_rates
continue
@all_buildings.count
@manage_buildings
@manage_buildings.count
continue
@hash.length
@hash.last['longitude']
@hash.last['latitude']
@hash.last
buildings.first.longitude
buildings.first.latitude
@hash[0]['longitude']
@hash[0]['latitude']
 @hash[0]@hash[0]['latitude']
 @hash
continue
search_string
searched_by
results
continue
BuildingSearch.buildings_in_neighborhood(@search_string)
BuildingSearch.class
BuildingSearch
continue
reviewable.suggested_percent
reviewable = self.reviewable
self.reviewable
self
continue
bt_block_class.include?('btn-xs')
bt_block_class
'btn-xs'.include?(bt_block_class)
bt_block_class
continue
manhattan_kmls.include?(@search_string)
@search_string
continue
manhattan_kmls.include?(@search_string)
@search_string
manhattan_kmls
continue
nb_coords.map{|rec| { lat: rec.latitude, lng: rec.longitude} }
nb_coordsnb_coords
nb_coords
continue
request.host
request.remote_host
request.methods
request.url
continue
self
median_arr
continue
self
median_arr
continue
self
median_arr
continue
median_arr
continue
median_arr
self
continue
self
median_arr
continue
self
median_arr
continue
median_arr
self
continue
m_arr.sort
m_arr
median_arr.map{|item| m_arr << item.to_i}
m_arr = []
price
bedroom_ranges
self.sort
self
median_arr
continue
