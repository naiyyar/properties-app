continue
station.update(st_distance: station.distance_to(latlng), st_duration: distance_result[index][:results][0]['duration']['text'])
continue
station.update(st_distance: station.distance_to(latlng), st_duration: distance_result[index][:results][0]['duration']['text'])
station
continue
distance_result[index][:results][0]['duration']['text'].to_i
distance_result[index][:results][0]['duration']['text']
distance_result[index][:results][0]['duration']
continue
distance_result
continue
top_two_featured_buildings
continue
controllers.include?(params[:controller]) and actions.include?(params[:action])
show_nb_counts
continue
params
continue
params
continue
params
continue
building_params
continue
@reviews.count
@reviews.present?
@reviews.present? 
continue
EmailVerifier.check([contact_params[:email]])
EmailVerifier.check(contact_params[:email])
EmailVerifier.methods
EmailVerifier
contact_params[:email]
EmailVerifier.check(contact_params[:email])
contact_params[:email]
contact_params[:email].present?
continue
@reviews.count
total_reviews
@reviews.present?
continue
distance + 1.0
distance + 0.8
distance + 0.9
distance + 0.5
distance + 0.4
distance
@zoom
continue
@buildings.map(&:id)
@buildings.pluck(:id)
@buildings.blank?
@buildings = Building.near(custom_latng, 1.5, units: :km)
Building.near(custom_latng, 1.5, units: :km).length
continue
buildings.pluck(:reviews_count)
Building.where(reviews_count: nil).update_all(reviews_count: 0)
Building.where(reviews_count: nil).count
buildings.pluck(:id)
buildings.pluck(:reviews_count)
continue
@per_page_buildings.count
@per_page_buildings = @buildings.select{|b| !top_two_featured_buildings.include?(b)}
top_two_featured_buildings
@per_page_buildings.count
@per_page_buildings = @buildings.select{|b| !top_two_featured_buildings.include?(b.id)}
@buildings.kind_of?(Array)
@buildings.length
@buildings.where.not(id: top_two_featured_buildings.map(&:id)).
top_two_featured_buildings.count
top_two_featured_buildings
@buildings.count
@per_page_buildings.count
continue
@buildings.where(id: featured_building_ids).length
@buildings.where(id: featured_building_ids).count
@buildings.where(id: featured_building_ids)
top_two_featured_buildings.count
top_two_featured_buildings = @buildings.where(id: featured_building_ids)
featured_building_ids
@buildings.kind_of?(Array)
search_results
continue
Building.near([params[:latitude].to_f, params[:longitude].to_f], 2.0, units: :km)
Building.near([params[:latitude].to_f, params[:longitude].to_f], 2.5, units: :km)
@buildings
continue
@buildings = Building.where("city = ? OR neighborhood in (?)", @search_string, boroughs) 
boroughs = view_context.bronx_sub_borough
@search_string == 'Bronx'
@search_string == 'Queens'
@search_string == 'Manhattan'
@search_string
continue
Building.near([params[:latitude].to_f, params[:longitude].to_f], 1, units: :km).length
Building.near([params[:latitude].to_f, params[:longitude].to_f], 2, units: :km).length
Building.near([params[:latitude].to_f, params[:longitude].to_f], 1, units: :km).length
Building.near([params[:latitude].to_f, params[:longitude].to_f], 1).length
Building.near([params[:latitude].to_f, params[:longitude].to_f], 5).length
continue
params[:latitude]
params
Building.near([params[:latitude].to_f, params[:longitude].to_f], 200).count
Building.near([params[:latitude].to_f, params[:longitude].to_f], 100).count
Building.near([params[:latitude].to_f, params[:longitude].to_f], 50).count
Building.near([params[:latitude], params[:longitude]], 50).count
params
Building.near([params[:latitude], params[:longitude]], 20).count
continue
params
Building.near([params[:latitude], params[:longitude]], 20).count
continue
search[7].address_components_of_type(:neighborhood)
search[7]
search.length
search[6].address_components_of_type(:neighborhood)
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
continue
self.avg_rating_changed?
continue
!self.avg_rating_changed?
self.avg_rating_changed?
self.changed_attributes
continue
self.changed_attributes
continue
self.changed_attributes
self
self.avg_rating_changed?
continue
self.changed_attributes
self
continue
buildings.count
buildings
continue
@hash
@hash.to_json
raw @hash.to_json
continue
@ratings.map(&:cacheable_id)
bds.count
bds = Building.joins("LEFT JOIN rating_caches ON rating_caches.cacheable_id = buildings.id")
@ratings.map(&:cacheable_id)
@ratings.count
@ratings
continue
top_two_featured_buildings.shuffle[1..2]
top_two_featured_buildings.shuffle[0..2]
top_two_featured_buildings.shuffle[1..2]
top_two_featured_buildings.count
top_two_featured_buildings
continue
@top_two_featured_buildings = @buildings.where(id: featured_building_ids).shuffle[0..2]
@top_two_featured_buildings = @buildings.where(id: featured_building_ids).shuffle[0..1]
@top_two_featured_buildings = @buildings.where(id: featured_building_ids).shuffle[1..1]
@top_two_featured_buildings = @buildings.where(id: featured_building_ids).shuffle[1..10]
@top_two_featured_buildings = @buildings.where(id: featured_building_ids).shuffle[1..2]
featured_building_ids = featured_buildings.pluck(:building_id)
featured_buildings = FeaturedBuilding.where(building_id: @buildings.pluck(:id))
continue
featured_buildings.pluck(:building_id)
@buildings.where.not(id: featured_buildings.pluck(:building_id)).limit(20).pluck(:id)
@buildings.where.not(id: featured_buildings.pluck(:building_id))
featured_buildings.pluck(:building_id)
featured_buildings.count
continue
 @featured_buildings.shuffle[2..@featured_buildings.count]
@featured_buildings = @featured_buildings.shuffle[2..@featured_buildings.count].first(2)
@featured_buildings = @featured_buildings.shuffle[2..@featured_buildings.count].limit(2)
@featured_buildings = Building.where(id: featured_buildings.pluck(:building_id))
@featured_buildings.shuffle[2..3]
Building.where(id: featured_buildings.pluck(:building_id)).order("RAND()").first
Building.where(id: featured_buildings.pluck(:building_id)).order("RANDOM()").first
@featured_buildings.order("RANDOM()").first
@featured_buildings.order("RANDOM()").first(2)
@featured_buildings.order("RANDOM()").first
@featured_buildings.offset(offset)
offset = rand(@featured_buildings.count)
@featured_buildings.offset(offset).first(2)
@featured_buildings.offset(offset)
offset = rand(@featured_buildings.count)
@featured_buildings.first(offset)
@featured_buildings.offset(offset)
@featured_buildings.count
offset = rand(2..@featured_buildings.count)
offset
continue
building.featured?
continue
building.featured?
continue
building.featured?
continue
building.featured?
continue
dddddd
continue
building.image_uploads.last
building.image_uploadsbuilding.image_uploads.last
building
continue
building.image_uploads.count
building.image_uploads
building
continue
@gmaphash = Building.buildings_json_hash(buildings)
buildings = @similar_properties.to_a + [@building]
@similar_properties.to_a
@similar_properties
continue
buildings.as_json
buildings = @similar_properties.to_a + [@building]
buildings.count
buildings = @similar_properties.to_a + [@building]
@similar_properties.to_a + [@building]
@similar_properties.insert(@building)
@similar_properties.merge(@building)
@similar_properties.methods
@similar_properties.class
@building
@similar_properties.count
continue
@building.featured_comps.active
@building.featured_comps.pluck(:building_id)
@building.featured_comps
@building.featured_comps.count
continue
params
continue
params
continue
featured_comp_params
params
continue
@buildings
@buildings.count
params
continue
params
params[:term]
@buildings.count
@buildings
continue
request.format
params
continue
building = Building.find(session[:favourite_object_id])
session[:favourite_object_id]
