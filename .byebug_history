continue
params
continue
title('aaaaa')
page_title
title
content_for?(title)
content_for?
content_for
content_for?(:title).present?
content_for(:title)
content_for?(:title)
params
continue
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
search
continue
params
continue
params
continue
params
continue
predifined_neighborhoods.include? neighborhood
neighborhood = neighborhood.first['long_name']
neighborhood.first['long_name']
neighborhood
predifined_neighborhoods
continue
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
search[0
search.count
continue
parent_neighborhoods.include? search[2].address_components_of_type(:neighborhood).first['long_name']
parent_neighborhoods.include? search[0].address_components_of_type(:neighborhood).first['long_name']
parent_neighborhoods.include? search[0].address_components_of_type(:neighborhood)['long_name']
parent_neighborhoods.include? search[0].address_components_of_type(:neighborhood)['long_name]
parent_neighborhoods.include? search[0].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[1]
predifined_neighborhoods.include? search[0].address_components_of_type(:neighborhood)
predifined_neighborhoods search[0].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
continue
search[6].address_components_of_type(:neighborhood)
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
predifined_neighborhoods.include? search[3].address_components_of_type(:neighborhood).first['long_name']
predifined_neighborhoods.include? search[3].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
predifined_neighborhoods
continue
File.open("#{Rails.root}/public/neighborhoods.txt", "r")
continue
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
continue
search[0].address_components
search[0].locality
search[0].location
search[0].address_components
search[0].precision
search[0].geometry
search[0].sub_state
search[0].state
search[0].city
search[0].neighborhood
search[0]
continue
search.count
continue
search.count
continue
search.count
continue
search.count
continue
search.count
continue
latitude
search.count
continue
Geocoder.search(self.building_street_address)
self
building
params
search
longitude
latitude
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
continue
search[6].address_components_of_type(:neighborhood)
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
search[]0
search.count
geo_result.address_components_of_type(:neighborhood)
geo_result
continue
@buildings_by_city
!arr.include? building.neighborhood
building
continue
!arr.include? building.neighborhood
building
continue
!arr.include? building.neighborhood
building
arr
continue
Building.search_by_neighborhood(params[:term]).to_a.uniq(&:neighborhood)
Building.search_by_neighborhood(params[:term]).to_a.uniq(&:neighborhood).count
 Building.search_by_building_name(params[:term]).count
Building.search_by_pneighborhoods(params[:term])
Building.search_by_pneighborhoods(params[:term]).count
params
continue
params
continue
NeighborhoodLink
params[:neighborhoods]
params
continue
review.reviewable
review
continue
self.document.url
self.document.instance_write(:file_name, params[:upload][:document_file_name])
params[:upload]
params
upload_params
self.document.url
continue
self.document.url
self.document.instance_write(:file_name, 'transparent_city')
self.document
before_post_process
params
self
continue
s3
obj.move_to("aptreviews-app/#{renamefilename}", acl:'public-read')
bucket.name
obj.move_to("#{bucket.name}/#{new_path2}", acl:'public-read')
new_path2 = path.gsub("#{@upload.document_file_name}", renamefilename)
obj = bucket.object(filename)
renamefilename = upload_params[:document_file_name]
filename = URI.unescape(document.url).split('/').last
bucket = S3.bucket(ENV['AWS_S3_BUCKET'])
S3 = Aws::S3::Resource.new(credentials: Aws::Credentials.new(ENV['AWS_ACCESS_KEY_ID'], ENV['AWS_SECRET_ACCESS_KEY']),region: 'us-west-2')
s3
obj.move_to("#{bucket.name}/#{new_path2}", acl:'public-read')
obj.move_to("https://s3-us-west-2.amazonaws.com/#{bucket.name}/#{new_path2}", acl:'public-read')
new_path2 = path.gsub("#{@upload.document_file_name}", renamefilename)
path.gsub("#{@upload.document_file_name}", upload_params[:document_file_name])
path = document.path(style)
document.path(style)
new_path
document.url
obj.public_url
obj = bucket.object(renamefilename)
obj.move_to("#{bucket.name}/#{renamefilename}", acl:'public-read')
obj = bucket.object(filename)
renamefilename = upload_params[:document_file_name]
filename = URI.unescape(document.url).split('/').last
bucket = S3.bucket(ENV['AWS_S3_BUCKET'])
S3 = Aws::S3::Resource.new(credentials: Aws::Credentials.new(ENV['AWS_ACCESS_KEY_ID'], ENV['AWS_SECRET_ACCESS_KEY']),region: 'us-west-2')
obj.move_to("#{bucket.name}/#{renamefilename}", acl:'public-read')
bucket
obj = bucket.object(filename)
renamefilename = upload_params[:document_file_name]
filename = URI.unescape(document.url).split('/').last
document.url
bucket = S3.bucket(ENV['AWS_S3_BUCKET'])
S3 = Aws::S3::Resource.new(credentials: Aws::Credentials.new(ENV['AWS_ACCESS_KEY_ID'], ENV['AWS_SECRET_ACCESS_KEY']),region: 'Oregon')
S3 = Aws::S3::Resource.new(credentials: Aws::Credentials.new(ENV['AWS_ACCESS_KEY_ID'], ENV['AWS_SECRET_ACCESS_KEY']),region: 'Oregon',loglevel: :error,logger: Logger.new("#{Rails.root}/log/aws.log", 10, 1024000))
ENV['AWS_ACCESS_KEY_ID']
s3
Aws::S3::Object.resource_name
Aws::S3::Object.name
Aws::S3::Object.methods
Aws::S3::Object
document.s3_bucket.objects.first.move_to(new_path)
document.s3_bucket.objects.first.move_to(new_path, document.s3_bucket.name)
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read, bucket_name: document.s3_bucket.name)
document.s3_bucket.name
document.s3_bucket
Aws::S3::S3Object
AWS::S3::S3Object
document.s3_bucket.objects.first.move_to(new_path, document.s3_bucket)
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read, bucket_name: document.s3_bucket)
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read, bucket: document.s3_bucket)
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read, bucket_name: ENV['AWS_S3_BUCKET'])
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read, ENV['AWS_S3_BUCKET'])
ENV['AWS_S3_BUCKET']
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read)
new_path = old_path.gsub("#{@upload.document_file_name}", "#{upload_params[:document_file_name]}")
old_path = document.url(style)
document.url(style)
document.path(style)
continue
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read)
old_path
new_path
continue
document.s3_bucket.objects.first.move_to(new_path, acl: :public_read)
document.s3_bucket.objects[old_path].move_to(new_path, acl: :public_read)
new_path
new_path.gsub("#{@upload.document_file_name}", "#{upload_params[:document_file_name]}")
new_path.gsub("documents/#{@upload.document_file_name}", "documents/#{upload_params[:document_file_name]}")
new_path.gsub("documents/#{upload_params[:document_file_name]}", "documents/#{@upload.document_file_name}")
@upload.document_file_name
document.document
document.document_file_name
document
new_path.gsub("documents/#{upload_params[:document_file_name]}", "documents/#{document.document_file_name}")
new_path.gsub("documents/#{params[:document_file_name]}", "documents/#{document.document_file_name}")
new_path
continue
name.gsub('abban', 'nawab')
name = 'Naiyyar abban'
attachment.options[:storage]
new_path.gsub('documents/xxxx','documents/etats_des_stands__copie')
new_path = attachment.path(style)
attachment = @upload.document
continue
ob.move_to(new_path, ob.bucket_name)
ob.move_to(new_path, ob.bucket_name.to_sym)
ob.move_to(new_path, ob.bucket_name)
