continue
request.fullpath.include?('glyphicons-halflings')
request.fullpath.include?('glyphicons, halflings')
request.fullpath.include?('glyphicons')
request.fullpath =~/\/glyphicons-halflings-regular/
request.fullpath =~/\/glyphicons-halflings-regular.woff/
request.fullpath =~/\/fonts\/glyphicons-halflings-regular.woff/
request.fullpath =~/\/fonts/glyphicons-halflings-regular.woff/
request.fullpath =~/\/fonts/
request.fullpath =~/\/woff/
request.fullpath
continue
request.fullpath
request.fullpath =~ /\/users/
request.format.json? || request.format.js?
request.format.json?
request.fullpath
continue
params
continue
view_context.heart_link(building)
current_user
continue
!user_signed_in?
user_signed_in?
session
current_user
building
view_context.heart_link(building)
context_view.heart_link(building)
view_context.heart_link(building)
continue
self.neighborhood
first_neighborhood
search.present? and first_neighborhood.blank?
continue
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search[0]
parent_neighborhood
self.neighborhood
first_neighborhood
first_neighborhood.blank?
search.present?
search.present? and first_neighborhood.blank?
continue
∂∂∂∂∂∂∂∂
continue
city.gsub(\s\, '')
city.gsub('\s', '')
city.gsub('%s', '')
city.gsub(' ', '')
city.gsub('', '')
city = 'New York'
boroughs.titleize
formatted_city
name
continue
@distance_results.values[0]
@distance_results
continue
distance_result.values
distance_result
continue
response = HTTParty.get(dis_matrix_api)
dis_matrix_api = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=#{self.street_address}&destinations=#{dest}&key=#{key}"
self.street_address
station
response = HTTParty.get(dis_matrix_api)
dis_matrix_api = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=#{latlng}&destinations=#{dest}&key=#{key}"
dest = "#{station.latitude}, #{station.longitude}"
dest = "#{station.latitude}, {station.longitude}"
dest = "#{station.latitude, station.longitude}"
response = HTTParty.get(dis_matrix_api)
dis_matrix_api
continue
nearby_stations.first.distance_to([latitude, longitude])
self.distance_to([40.7398640004746, -73.9865990020789])
self
nearby_stations.first
distances
nearby_stations.length
nearby_stations
distance_result[4]
distance_result[3]
distance_result[2]
distance_result[1]
distance_result[0]
distance_result
st_names
continue
distances
continue
nearby_stations.map(&:name)
nearby_stations
continue
result.values[0][:dresults]['distance']
result.values[0][:dresults]
result.values[0]
result.values[0]['dresults']
st['dresults']['duration']['text']
st['transit_details'].present? and st['distance']['text'].to_f <= 0.7
result.values.length
result.values
result
continue
distance_result_arr
continue
distance_result_arr
distance_result_arr.length
continue
station.subway_station_lines.select(:id, :line, :color).as_json
station.subway_station_lines.select(:id, :line, :color).to_json
station.subway_station_lines.select(:id, :line, :color)
station = nearby_stations.first
distance_result
continue
distance_result
continue
SubwayStation.near([latitude, longitude], 0.6).select(:id, :name).uniq_by{|n| n.name}
SubwayStation.near([latitude, longitude], 0.6).select(:id, :name).uniq(&:name)
SubwayStation.near([latitude, longitude], 0.6).select(:id, :name).uniq_by(&:name)
SubwayStation.near([latitude, longitude], 0.6).uniq_by(&:name)
SubwayStation.near([latitude, longitude], 0.6).uniq_by(:name)
SubwayStation.near([latitude, longitude], 0.6).select("name").distinct
SubwayStation.near([latitude, longitude], 0.6).select("name").uniq
SubwayStation.near([latitude, longitude], 0.6).select("name")
SubwayStation.near([latitude, longitude], 0.6).select("DISTINCT(name)")
SubwayStation.near([latitude, longitude], 0.5)
SubwayStation.near([latitude, longitude], 0.5).join
SubwayStation.near([latitude, longitude], 0.5).length
SubwayStation.near([latitude, longitude], 0.6).select("DISTINCT(name), id")
SubwayStation.near([latitude, longitude], 0.6).select("DISTINCT(name)")
SubwayStation.near([latitude, longitude], 0.6).select(:name).uniq(&:name)
SubwayStation.near([latitude, longitude], 0.6).select(:name).uniq
SubwayStation.near([latitude, longitude], 0.6).select(:name)
SubwayStation.near([latitude, longitude], 0.6).map(&:name).uniq
SubwayStation.near([latitude, longitude], 0.5).map(&:name).uniq
SubwayStation.near([latitude, longitude], 0.5).map(&:name)
latlng
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).map(&:name).uniq
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).map(&:name)
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).pluck(:name)
SubwayStation.near([40.7521647, -73.97715339999999], 0.5)
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).length
SubwayStation.near([40.7521647, -73.97715339999999], 0.7).length
SubwayStation.near([40.7521647, -73.97715339999999], 1).length
SubwayStation.near([40.7521647, -73.97715339999999], 5).length
SubwayStation.near([40.7521647, -73.97715339999999]).length
SubwayStation.near([40.7521647, -73.97715339999999]).count
SubwayStation.near([40.7521647, -73.97715339999999])
response.parsed_response['results']
continue
response.parsed_response['results']
response.parsed_response
dest_station
nearby_subway_stations
stations
continue
nearby_subway_stations
stations
continue
nearby_subway_stations
continue
"#{latitude}, #{longitude}"
latlng
SubwayStation.near([latlng], 50)
distance_result.flatten[0]
distance_result.flatten.length
distance_result[0]
distance_result
continue
@distance_results[0]
@distance_results.length
@distance_results
distance_result
continue
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line, :color).as_json
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line, :color).to_json
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line, :color).to_a
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line, :color)
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line, :color).group(:color).count
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line, :color).group(:color)
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line).group_by(:color)
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines.select(:line).group(:color)
arr.insert(0, 9)
arr.insert_at(0, 9)
arr.methods
arr = [1,2,3,4,5]
SubwayStation.search(nearby_subway_stations[5])[0].subway_station_lines
SubwayStation.search(nearby_subway_stations[5])[0]
nearby_subway_stations
SubwayStation.search(nearby_subway_stations[5])
SubwayStation.search(nearby_subway_stations[5]).count
SubwayStation.search(nearby_subway_stations[4]).count
SubwayStation.search(nearby_subway_stations[3]).count
SubwayStation.search(nearby_subway_stations[3])
SubwayStation.search(nearby_subway_stations[2])
SubwayStation.search(nearby_subway_stations[1])
SubwayStation.search(nearby_subway_stations[0])
replacements = [['Street', ''], ['Station', 'St']]
nearby_subway_stations.map{|st| st.gsub(/[StreetStation]/,'Street' => '', 'Station' => 'St')}
nearby_subway_stations.map{|st| st.gsub('[StreetStation]','Street' => '', 'Station' => 'St')}
nearby_subway_stations.map{|st| st.gsub('Street','St')}
nearby_subway_stations
SubwayStation.where(latitude: 40.7858701)
response.parsed_response['results'][1]
SubwayStation.where(latitude: 40.78348539)
SubwayStation.where(latitude: 40.78348539999999)
response.parsed_response['results'][0]
response.parsed_response['results']
SubwayStation.where("name ILIKE :name OR name ILIKE :sname", name: "%96%", sname: '%st%').count
SubwayStation.where("name ILIKE :name OR name ILIKE :sname", name: "%96%", sname: '%st%')
SubwayStation.where("name ILIKE :name", name: "%96 st%")
SubwayStation.where("name ILIKE :name", name: "%96 street%")
SubwayStation.where("name ILIKE :name", name: "%96%")
SubwayStation.where("name ILIKE :name", name: "%#{nearby_subway_stations[5]}%")
SubwayStation.where("name ILIKE :name", name: "%#{nearby_subway_stations[4]}%")
SubwayStation.where("name ILIKE :name", name: "%#{nearby_subway_stations[3]}%")
SubwayStation.where("name ILIKE :name", name: "%#{nearby_subway_stations[2]}%")
SubwayStation.where("name ILIKE :name", name: "%#{nearby_subway_stations[1]}%")
SubwayStation.where("name ILIKE :name", name: "%#{nearby_subway_stations[0]}%")
nearby_subway_stations
SubwayStation.where("name ILIKE :name", name: "%96th St%")
SubwayStation.where("name ILIKE :name", name: "%96 St%")
SubwayStation.where("name ILIKE :name", name: "%ing%")
nearby_subway_stations
continue
SubwayStation.near(["#{latitude}, #{longitude}"], 100)
SubwayStation.near(["#{latitude}, #{longitude}"], 50)
SubwayStation.near(["#{latitude}, #{longitude}"], 1)
SubwayStation.near(["#{latitude}, #{longitude}"], 10)
latlng
SubwayStation.near(["#{latitude}, #{longitude}"], 20)
SubwayStation.near([latlng],10).count
SubwayStation.near([latlng],1).count
SubwayStation.search(nearby_subway_stations[0]).count
SubwayStation.search(nearby_subway_stations[0])
continue
nearby_subway_stations
SubwayStation.search(nearby_subway_stations[0])
continue
SubwayStation.search(nearby_subway_stations[5]).count
SubwayStation.search(nearby_subway_stations[4]).count
nearby_subway_stations
SubwayStation.search(nearby_subway_stations[3])
SubwayStation.search(nearby_subway_stations[2])
SubwayStation.search(nearby_subway_stations[1])
SubwayStation.search(nearby_subway_stations[0])
SubwayStation.search(nearby_subway_stations[1])
continue
SubwayStation.search(nearby_subway_stations[1])
