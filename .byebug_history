continue
 @buildings.text_search(params[:term])
 @buildings.text_search(params[:term]).count
@buildings = Building.where('management_company_id is null')
params
continue
 request.format.html? == nil
 request.format.html?
 request.format.symbol?
 request.format.string?
request
 request.format
 request.format.html?
continue
 request.format.html?
continue
city.gsub(' ', '')
city
continue
@companies.limit(5)
@companies
.result(distinct: true)
continue
@companies.as_json
@companies.to_json
@companies
continue
@neighborhoods.count
@neighborhoods
params
continue
@neighborhoods
params
continue
@companies
v
@city
@zipcodes
@buildings
@neighborhoods
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
ManagementCompany.text_search_by_management_company(params[:term])
params
continue
params
continue
params
continue
params
@buildings
@zipcodes
@city
@companies
continue
params
continue
RatingCache.where(cacheable_id: self.id, cacheable_type: 'Building', dimension: DIMENSIONS)
DIMENSIONS
continue
RatingCache.where(cacheable_id: @building.id)
RatingCache.where(cacheable_id: @building.id).count
rating_for @building, 'cleanliness'
continue
params[:searched_by] == 'city' 
params
continue
@search_string.downcase
@search_string
continue
Building.where("city = ? OR neighborhood in (?)", @search_string, view_context.queens_sub_borough).count
continue
Building.where(city: 'Astoria').first
Building.where(city: 'Astoria').count
Building.where(city: @search_string).count
Building.buildings_in_city(@search_string).count
@search_string
@search_string == 'New York'
continue
Building.number_of_buildings('East Bronx')
popular_neighborhoods.first.buildings_count >= 0
hood.buildings_count >= 0
popular_neighborhoods.first.buildings_count
popular_neighborhoods.count
popular_neighborhoods
continue
Neighborhood.where(name: 'Upper East Side', boroughs: area.upcase)
search_by_neighborhood_link('Upper East Side ', area)
yebug %>
area
continue
Building.where(neighborhood: 'West Village').update_all(neighborhoods_parent: 'Greenwich Village')
building
continue
@boundary_coords
@searched_buildings
@searched_buildings.first.longitude
@searched_buildings.first.latitude
@boundary_coords.first.length > 1
continue
Building.buildings_in_neighborhood(@search_string).count
Building.buildings_in_neighborhood(@search_string)
@search_string
@buildings
@boundary_coords
continue
@boundary_coords.first.first[:lat]
@boundary_coords.first
@boundary_coords.count
@boundary_coords
continue
Building.filter_by_beds(buildings, beds).count
beds = filter_params[:bedrooms]
beds
buildings.count
Building.filter_by_beds(buildings, beds)
filter_params[:amenities]
amenities.present?filter_params[:amenities]
buildings.count
buildings
@buildings
@buildings.count
beds
Building.filter_by_beds(@buildings, beds)
filter_params[:bedrooms]
filter_params
continue
search[6].address_components_of_type(:neighborhood)
search[6]
search[5].address_components_of_type(:neighborhood)
search[5]
search[4].address_components_of_type(:neighborhood)
search[4]
search[3].address_components_of_type(:neighborhood)
search[3]
search[2].address_components_of_type(:neighborhood)
search[2]
search[1].address_components_of_type(:neighborhood)
search[1]
search[0].address_components_of_type(:neighborhood)
search[0]
search.count
continue
@building.favorite_by?(current_user)
@favourite.to_bool
@favourite
continue
current_user.favorite(@building)
@building = Building.find(params[:object_id])
params
continue
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search[0]
continue
search[0]
continue
search[0]
search[1]
search[2]
search[3]
search[4]
search[5]
search[6]
search[7].address_components_of_type(:neighborhood)
search[6].address_components_of_type(:neighborhood)
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search.present? and first_neighborhood.blank?
search[0]
search[0..5]
search.count[0..5]
search.count
continue
building_show.methods
building_show.to_b
building_show.to_f
building_show.to_i
building_show.to_boolean
building_show.to_bool
building_show
continue
building
params
continue
@buildings.select(:id, :building_name, :building_street_address, :latitude, :longitude).as_json
@buildings.select(:id, :building_name, :building_street_address, :latitude, :longitude)
@buildings.select(:id, :building_name, :building_street_address, :latitude, :longitude).
@buildings.select(:id, :building_name, :buidling_street_address, :latitude, :longitude).as_json
@buildings.select(:id, :building_name, :buidling_street_address, :latitude, :longitude)
@buildings.as_json
@buildings
@buildings.count
continue
params
continue
params
continue
params
continue
params[:filter][:price].include?(val)
params[:filter][:price]
val
continue
order("LOWER(buildings.building_name) asc").map(&:building_name)
order("LOWER(buildings.building_name) asc")
order("LOWER(buildings.building_name) #{ direction }")
direction
continue
sort_option.to_s.match(/^building_name_/)
sort_option.to_s.match( /^building_name_/)
sort_option.to_s == /^building_name_/
/^building_name_/
direction = (sort_option =~ /desc$/) ? 'desc' : 'asc'
(sort_option =~ /desc$/) ? 'desc' : 'asc'
direction
sort_option.to_s
sort_option
continue
params
continue
params
continue
terms
terms.map { |e| [e] * num_or_conds }.flatten
terms = terms.map { |e|(e.gsub('*', '%') + '%').gsub(/%+/, '%')}
num_or_conds = 2
terms.map { |e|(e.gsub('*', '%') + '%').gsub(/%+/, '%')}
terms = query.downcase.split(/\s+/)
query.downcase.split(/\s+/)
query
continue
