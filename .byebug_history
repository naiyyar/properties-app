continue
(end_d - 1.day).to_s(:no_timezone)
CURRENT_DT.to_s(:no_timezone)
end_date.present? and CURRENT_DT.to_date
end_d = Time.zone.parse(end_date.to_s(:no_timezone))
Time.zone.parse(end_date.to_s(:no_timezone))
end_date.to_s(:no_timezone)
end_d
continue
end_date
end_date.to_s(:no_timezone)
Time.zone
Time.zone.parse(end_date.to_s).strftime('%d-%m-%Y %H:%M')
Time.zone.parse(end_date.to_s).strftime('%d-%m-%Y')
Time.zone.parse(end_date.to_s).to_date
Time.zone.parse(end_date.to_s)
end_date.to_s
Time.zone.parse(end_date.to_s).utc
continue
end_date.localtime
end_date.to_s
end_date.to_datetime
Time.zone.local(end_date.to_datetime) - 1.day
Time.zone.local(end_date.to_s) - 1.day
Time.zone.local(end_date.to_s)
end_date.in_time_zone
DateTime.now.
DateTime.now.utc
Date.current.to_time.to_datetime
Date.current.to_time
Time.zone.at(end_date.to_time).to_datetime
Time.zone.at(end_date).to_datetime
Time.zone.at(end_date)
Time.zone.local(end_date.to_s)
Time.zone.parse(end_date.to_s)
end_date.to_s
(end_date - 1.day).to_s(:no_timezone)
(end_date - 1.day).to_date
end_date.in_time_zone(zone)
zone = ActiveSupport::TimeZone.new(Time.zone.name)
Time.zone.parse(end_date.to_s(:no_timezone))
Time.zone.local(end_date.to_s(:no_timezone))
Time.zone.local(end_date)
Time.zone.parse(end_date)
CURRENT_DT.to_date
end_date.in_time_zone(Time.zone.name) - 1.day
end_date.in_time_zone(Time.zone.name)
Time.zone.name
end_date.in_time_zone(Time.zone.name)
end_date.in_time_zone(Time.zone)
end_date
end_date.localtime
end_date.zone
end_date.methods
end_date
CURRENT_DT.to_date
Time.zone
end_date.present?
self.id
continue
self.id
continue
self.id
continue
self.id
continue
self.id
continue
featured_building.renew_plan?(ENV['SERVER_ROOT'])
Time.zone
user
continue
Time.zone.local(featured_building.end_date.to_s(:no_timezone))
featured_building.end_date.to_s
Time.zone.local(featured_building.end_date.to_s)
Time.zone.local(featured_building.end_date.to_date)
Time.zone.local(featured_building.end_date.to_s(:no_timezone))
featured_building.end_date.to_s(:no_timezone) - 1.day
featured_building.end_date.to_s(:no_timezone)
Time.zone.local(featured_building.end_date.to_s(:no_timezone)) - 1.day
Time.zone.parse(featured_building.end_date.to_s(:no_timezone)) - 1.day
Time.zone.parse(featured_building.end_date.to_s(:no_timezone))
featured_building.end_date.to_s(:no_timezone)
featured_building.end_date.to_datetime
Time.zone.parse(featured_building.end_date)
Time.now
featured_building.renew_plan?(ENV['SERVER_ROOT'])
Time.zone  = user.time_zone
(featured_building.end_date - 1.day).to_date
Time.zone = user.time_zone
user
Time.zone = 'Asia/kolkata'
Time.zone
(featured_building.end_date - 1.day).to_date
featured_building.end_date - 1.day
FeaturedBuilding::CURRENT_DT.to_date
FeaturedBuilding::CURRENT_DT
featured_building::CURRENT_DT
featured_building::CURRENT_DT.to_date
ENV['SERVER_ROOT'
featured_building.renew_plan?(ENV['SERVER_ROOT'])
featured_building
continue
featured_building
continue
featured_building_params
continue
featured_building_params
continue
Time.zone.local(start_date.year, start_date.month, start_date.day, CURRENT_DT.hour, CURRENT_DT.min, CURRENT_DT.sec)
Time.zone.local
Time.zone
start_dt.to_datetime
start_dt
start_dt.to_timezone
start_dt.localtime
start_dt.to_localtime
start_dt
end_dt.methods
end_dt
start_dt
start_date
continue
start_date
DateTime.new(start_date.year, start_date.month, start_date.day, Time.now.hour, Time.now.min,Time.now.sec)
DateTime.new(start_date.year, start_date.month, start_date.day, Time.now.hour, Time.now.min,Time.now.second)
DateTime.new(start_date.year, start_date.month, start_date.day, Time.now.hour, Time.now.min,time.now.second)
DateTime.new(start_date.year, start_date.month, start_date.day, Time.now.hour, Time.now.min,time.now.sec)
DateTime.new(start_date.year, start_date.month, start_date.day, Time.now.hour, Time.now.min)
DateTime.new(start_date.year, start_date.month, start_date.day, 'Time.now.hour:Time.now.min')
DateTime.new(start_date.year, start_date.month, start_date.day)
DateTime.new(start_date.to_s(:no_timezone))
DateTime.new(start_date)
DateTime.new
start_date.to_s(:no_timezone)
start_date
continue
errors
charge.methodserrors
charge.errors
charge = billing_service.create_stripe_charge(options[:customer_id], options[:card_id])
billing_service = BillingService.new
options
charge
errors
continue
charge
self
charge = billing_service.create_stripe_charge(options[:customer_id], options[:card_id])
billing_service = BillingService.new
valid?
continue
event
continue
User.find(20)&.stripe_customer_id
User.find(20)
current_user&.stripe_customer_id
customer_id
continue
@billing.errors
@billing.save_and_charge_existing_card!(customer_id: customer_id, card_id: card.id)
@billing = Billing.new({ email: user_email,amount:   Billing::PRICE,featured_building_id: featured_building.id,user_id: user.id,renew_date:           Time.now,billing_card_id:      card.id,brand: card.brand})
})
brand: card.brand
billing_card_id:      card.id,
renew_date:           Time.now,
user_id: user.id,
featured_building_id: featured_building.id,
amount:   Billing::PRICE,
@billing = Billing.new({ email: user_email,
card = BillingService.new.saved_cards(customer_id).last
customer_id = user.stripe_customer_id
featured_building.renew_plan?(ENV['SERVER_ROOT'])
continue
featured_building.renew_plan?(ENV['SERVER_ROOT'])
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
featured_building.renew_plan?(ENV['SERVER_ROOT'])
continue
featured_building.renew_plan?(ENV['SERVER_ROOT'])
FeaturedBuilding::CURRENT_DT.to_s(:no_timezone)
continue
FeaturedBuilding::CURRENT_DT.to_s(:no_timezone)
FeaturedBuilding.CURRENT_DT.to_s(:no_timezone)
ENV['SERVER_ROOT']
featured_building.renew_plan?(ENV['SERVER_ROOT'])
continue
billing_params
@billing.errors.messages
@billing.errors
@billing.create_charge_existing_card!(current_user.stripe_customer_id)
current_user
@billing.save
continue
featured_buildings.active
featured_buildings.active.count
featured_buildings.count
featured_buildings
continue
ActiveSupport::TimeZone.
ActiveSupport::TimeZone.class
ActiveSupport::TimeZone.all(&:name)
ActiveSupport::TimeZone.name
ActiveSupport::TimeZone.methods
ActiveSupport::TimeZone.all
nt
nt = ActiveSupport::TimeZone.create("America/Havana")
nt = ActiveSupport::TimeZone.new("America/Havana")
nt = ActiveSupport::TimeZone.new
ActiveSupport::TimeZone.all.first
browser_tz.name
browser_tz.tzinfo
browser_tz
browser_tz = ActiveSupport::TimeZone.find_tzinfo(cookies[:timezone])
ActiveSupport::TimeZone.all
ActiveSupport::TimeZone.all.find{ |zone| zone.tzinfo }
ActiveSupport::TimeZone.all.find{ |zone| zone.tzinfo == browser_tz }
browser_tz = ActiveSupport::TimeZone.find_tzinfo(cookies[:timezone])
continue
browser_time_zone.name
browser_time_zone
continue
cookies[:timezone]
continue
cookies[:timezone]
browser_tz = ActiveSupport::TimeZone.find_tzinfo(cookies[:timezone])
continue
cookies['time_zone']
cookies
continue
Time.zone
current_user
continue
resource
resource.update_column(:time_zone, params[:user][:time_zone]) if resource.time_zone.blank?
resource
params[:user][:time_zone]
params[:user]
params
continue
Time.now.in_time_zone
Time.now
current_user.created_at.in_time_zone
current_user.created_at.zone
current_user.created_at.time_with_zone
