continue
min_and_max_price?
get_listings_beds
bedroom_ranges
beds
continue
params[:filter_params]
params
continue
url.match('matterport').present?
url.match('matterport').to_s
url.match('matterport').names
url.match('matterport').methods
url.match('matterport').data
url.match('matterport')
url.include?('matterport')
url
url.present? && url.match(mtp_matcher).present?
continue
has_tour
continue
VideoTour.all.group_by{|v| v.category}
VideoTour.all.group(:category).as_json
VideoTour.all.group(:category)
VideoTour.all.count
VideoTour.all
@building
@building.video_tours
continue
params[:sort_index].to_i
continue
params[:category]
params
continue
buildings.to_sql
buildings.length
sort_params
continue
buildings
continue
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('buildings.id')[0]
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('buildings.id')
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('buildings.id').length
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('listings.id').length
buildings.with_active_listing.left_outer_joins(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('listings.id')
buildings.with_active_listing.left_outer_join(:listings).uniq.select('buildings.*, COUNT(listings.*) as listings_count').group('listings.id')
buildings.with_active_listing.joins(:listings).distinct.length
buildings.with_active_listing.joins(:listings).disctinct.length
buildings.with_active_listing.joins(:listings).uniq
buildings.with_active_listing.left_joins(:listings).uniq
buildings.with_active_listing.left_joins(:listings).uniq.length
buildings.with_active_listing.left_joins(:listings).length
buildings.left_joins(:listings).length
buildings.left_joins :listings
buildings.with_active_listing.left_outer_joins(:listings).length
buildings.with_active_listing.joins(:listings).length
buildings.length
buildings.count
continue
ids = buildings_with_prices.map(&:id).uniq
buildings_with_prices = buildings.between_prices(min_price.to_i, max_price.to_i)
buildings.length
continue
Listing.active.where(building_id: [419, 273], bed: ['0']).pluck(:rent)
ids = buildings_with_prices.map(&:id).uniq
buildings_with_prices = buildings.between_prices(min_price.to_i, max_price.to_i)
ids = buildings_with_prices.map(&:id).uniq
buildings.length
buildings.between_prices(min_price.to_i, max_price.to_i).length
max_price.to_i
min_price.to_i
min_price
continue
Listing.active.where(building_id: [416, 419, 273, 354, 413], bed: ['0']).pluck(:rent)
Listing.active.where(building_id: [416, 419, 273, 354, 413], bed: ['0'])
Listing.active.where(building_id: [416, 419, 273, 354, 413], bed: ['0']).pluck(:bed)
Listing.active.where(building_id: [416, 419, 273, 354, 413]).pluck(:bed)
Listing.active.where(building_id: [416, 419, 273, 354, 413]).count
buildings_with_beds.length
ids
continue
buildings_with_beds.to_sql
beds
ids
continue
buildings_with_prices
ids
continue
transparentcity_buildings.order_by_id_pos(ids).length
transparentcity_buildings.order_by_id_pos(ids)
ids.empty?
ids
continue
sort_params
@filters
continue
@filters[:listing_bedrooms].present?
@filters[:listing_bedrooms]
@filters
continue
finders.reorder("listings.rent #{sort_type}").map(&:id).uniq
finders.length
finders = finders.where('listings.bed in (?)', [0])
finders = buildings.joins(:listings).where('listings.active is true')
finders.reorder("listings.rent #{sort_type}").map(&:id).uniq
finders.reorder("listings.rent #{sort_type}")
finders.length
finders
continue
buildings = buildings.joins(:listings).where('listings.active is true')
buildings = buildings.joins(listings: {active: true}).select('listings.rent, buildings.*').map(&:id)
buildings = buildings.joins(listings: {active: true}).select('listings.rent, buildings.*')
buildings = buildings.joins(listings: {active: true})
buildings = buildings.joins(listings: {active: true)
buildings.to_sql
buildings.to_dql
buildings.joins(:listings).select('listings.rent, listings.active, buildings.*').where('listings.active is true').reorder("listings.rent #{sort_type}").pluck('buildings.id, listings.rent')
buildings.with_active_listing.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent #{sort_type}").pluck('buildings.id, listings.rent')
buildings.joins(listings: {active: true}).select('listings.rent, buildings.*').reorder("listings.rent #{sort_type}").pluck('buildings.id, listings.rent')
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent #{sort_type}").pluck('buildings.id, listings.rent')
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent #{sort_type}").pluck(:id)
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent #{sort_type}").map(&:id)
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent #{sort_type}")
continue
Listing.where(building_id: ids).active.sort_by{|l| ids.index(l.building_id)}.map(&:id).uniq
Listing.where(building_id: ids).sort_by{|l| ids.index(l.building_id)}.map(&:id).uniq
Listing.where(building_id: ids).sort_by{|l| ids.index(l.id)}.map(&:id).uniq
Listing.where(building_id: ids).active.sort_by{|l| ids.index(l.building_id)}.uniq{|b| b.id }.map(&:building_id).uniq
Listing.where(building_id: ids).active.sort_by{|l| ids.index(l.building_id)}.uniq{|b| b.id }.map(&:building_id)
Listing.where(building_id: ids).active.sort_by{|l| ids.index(l.building_id)}.uniq{|b| b.id }
Listing.where(building_id: ids).active.sort_by{|l| ids.index(l.building_id)}
Listing.where(building_id: ids).active.sort_by{|l| ids.index(l.id)}
Listing.where(building_id: ids).sort_by{|l| ids.index(l.id)}.uniq{|b| b.id }
ids = buildings.pluck(:id).uniq
Listing.where(building_id: 273, bed: 0).active
Listing.where(building_id: 419, bed: 0).active
Listing.where(building_id: buildings.pluck(:id).uniq).order('rent DESC').pluck(:building_id).uniq
Listing.where(building_id: buildings.pluck(:id).uniq).order('rent ASC').pluck(:building_id).uniq
Listing.where(building_id: buildings.pluck(:id).uniq).order('rent desc').pluck(:building_id).uniq
Listing.where(building_id: buildings.pluck(:id)).order('rent desc').pluck(:building_id).uniq
Listing.where(building_id: buildings.pluck(:id)).order('rent desc').pluck(:building_id)
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent DESC").pluck('buildings.id, listings.bed')
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent DESC").pluck('id, listings.bed')
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent DESC").pluck('listings.bed')
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent DESC").pluck('listings.rent').uniq
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent DESC").pluck('listings.rent')
sorted_building_ids_by_rent(buildings, 'DESC')
Listing.where(building_id: 273, bed: 0).active
Listing.where(building_id: 273, bed: 0).active.count
Listing.where(building_id: 273).active.count
Listing.where(building_id: 273).count
most_exp_sorted_buildings(buildings).pluck(:id)
most_exp_sorted_buildings(buildings)
buildings.length
buildings = buildings.where(id: (sorted_building_ids_by_max_price(buildings).uniq))
buildings.length
buildings = buildings.where(id: (sorted_building_ids_by_max_price(buildings)))
filters.present? && has_listing_filters?(filters.keys)
sorted_building_ids_by_max_price(buildings).uniq
sorted_building_ids_by_max_price(buildings)
continue
buildings.pluck(:id)
buildings.pluck(:id).uniq
sorted_by_recently_updated(buildings)
filters.keys
filters.present? && has_listing_filters?(filters.keys)
continue
transparentcity_buildings.order_by_id_pos(ids)
buildings_with_prices.distinct
ids
buildings_with_prices
max_price
continue
buildings.pluck(:id).uniq
buildings.pluck(:id)
ids.blank?
ids.empty?
ids
continue
listing_beds
buildings.length
continue
@hash.size
@hash.length
@hash
continue
final_results[0][:map_hash].last
final_results[0][:map_hash]
@manage_buildings.length
@all_buildings.length
continue
buildings.joins(:listings).select('listings.rent, buildings.*').reorder("listings.rent ASC")
buildings.joins(:listings).select('listings.rent').reorder("listings.rent ASC")
buildings.to_sql
sorted_building_ids_by_rent(buildings, 'ASC')
least_exp_sorted_buildings(buildings)
filters.present? && has_listing_filters?(filters.keys)
buildings = buildings.where(id: (sorted_building_ids_by_min_price(buildings)))
continue
transparentcity_buildings
transparentcity_buildings.length
transparentcity_buildings
continue
Building.where(id: ids).order("array_position(ARRAY[#{ids.join(',')}], buildings.id)")
Building.where(id: ids).order("array_position(ARRAY[#{ids.join(',')}], buildings.id)")[0]
Building.where(id: ids).order("array_position(ARRAY[#{ids.join(',')}], buildings.id)")
Building.where(id: ids.uniq).order('array_position(?, buildings.id)', ids.uniq)
Building.where(id: ids.uniq)
ids
continue
Building.where(id: ids).pluck(:id)
Building.where(id: ids)
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }.Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.uniq{|b| b.id }
Building.where(id: ids).sort_by{|p| ids.index(p.id)}.length
Building.where(id: ids).sort_by{|p| ids.index(p.id)}
ids
continue
search_string
top2_featured_buildings(search_string.downcase)
continue
filters.keys
filters
continue
filters.keys
filters
continue
buildings.where(id: (sorted_building_ids_by_min_price(buildings))).pluck(:id)
buildings.where(id: (sorted_building_ids_by_min_price(buildings))).order_by_min_rent
sorted_building_ids_by_min_price(buildings)
sort_params
continue
per_page_buildings.first.listings.active.pluck(:bed)
per_page_buildings.first.listings.active.count
per_page_buildings.first.listings.active
per_page_buildings.first.get_listings(filter_params)
per_page_buildings.first
continue
final_results[0][:all_buildings].length
@per_page_buildings[0]
@per_page_buildings.length
continue
Building.includes(:featured_buildings).where(id: FeaturedBuilding.active.pluck(:building_id).shuffle[0..1])
Building.where(id: FeaturedBuilding.active.pluck(:building_id).shuffle[0..1]).includes(:featured_buildings)
Building.where(id: FeaturedBuilding.active.pluck(:building_id).shuffle[0..1])
continue
Building.where(id: fbs_ids.shuffle[0..1])
fbs_ids.shuffle[0..1]
fbs_ids = FeaturedBuilding.active.pluck(:building_id)
Building.joins(:featured_buildings).where(featured_buildings: { active: true }).pluck(:id)
Building.joins(:featured_buildings).where(featured_buildings: { active: true }).order(featured_buildings: 'RANDOM()')
Building.joins(:featured_buildings).where(featured_buildings: { active: true }).count
Building.joins(:featured_buildings).where(featured_buildings: { active: true })
searched_buildings.where(id: fbs.pluck(:building_id)).length
searched_buildings.where(id: fbs.pluck(:building_id))
