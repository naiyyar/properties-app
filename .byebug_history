continue
Gcoordinate.neighbohood_boundary_coordinates(search_string)
@boundary_coords
@boundary_coords << @neighborhood_coordinates
@neighborhood_coordinates
@buildings = Building.buildings_in_neighborhood(search_string)
continue
@boundary_coords.flatten.to_json
@boundary_coords.flatten
@boundary_coords
raw @brooklyn_neighborhoods.to_json
@brooklyn_neighborhoods.to_json
@zoom
@lng
@lat
@hash@lat.to_json
@hash.to_json
@hash
continue
params[:filter].to_query('filter')
params[:filter].to_query('foo')
params
params[:filter].to_param.to_query
params[:filter].to_param
params[:filter].methods
params[:filter].to_query
params
continue
"filter%B#{params[:filter].to_query}"
continue
params
params[:filter].to_query
params[:filter]
continue
params[:filter]
params[filter]
params
continue
search = Geocoder.search([latitude, longitude])
longitude
latitude
continue
search_string
Gcoordinate.where(neighborhood: 'Upper East Side')
search_string
@coordinates = Geocoder.coordinates("#{search_term}, #{borough_city}, NY")
borough_city
search_term
continue
raw @hash.to_json
@hash.to_json
@hash
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
self.image.styles[:name]
self.image.styles.name
self.image.styles.to_h
self.image.styles.rehash
self.image.styles.inspect
self.image.styles.inspecr
self.image.styles.methods
self.image.styles
self.image.methods
self.image.styles[:large]
self.image.styles[:small]
self.image.styles[:medium]
self.image.exists?(:self.image.styles[:medium])
self.image.exists?(:small)
self.image.exists?(:medium)
self.image.exist?(:medium)
self.image
continue
upload.image.styles[:thumb]
upload.image.styles[:small]
upload.image.styles[:medium]
upload.image.styles[:original]
upload.image.styles.medium
upload.image.styles.attchement
upload.image.styles.attchment
upload.image.styles
upload.image.attachment
upload.image.medium
upload.image
upload.image.url(:original)
upload.image.url(:thumb)
upload.image.url(:small)
upload.image.url(:medium)
continue
@building
@building.neighbohoods
continue
search_string.gsub(' ', '-')
search_string.gsub(' ', ' - ')
search_string.gsub('', ' -')
search_string.gsub(' ', ' -')
search_string.gsub('  ', ' -')
search_string
params['search_term']
search_string
continue
search_term.gsub('  ', ' -')
search_term.gsub('  ', '-')
search_term.gsub('  ', '')
search_term.gsub(' ', '')
search_term
continue
NeighborhoodLink.where('neighborhood = ?', search_string).count
NeighborhoodLink.where('neighborhood = ?', search_string)
NeighborhoodLink.where('neighborhood = ?', neighborhoods)
queens_borough.include?(neighborhoods)
search_string.present? and search_string == 'New York'
neighborhoods
queens_borough
search_string
continue
post.categories.map(&:name)
continue
post.categories.map(&:name)
continue
post.categories.map(&:name)
continue
post.categories.map(&:name)
continue
post.categories.map(&:name)
continue
post.categories.map(&:name)
continue
post.categories.map(&:name)
@post.categories.map(&:name)
post.slug != @post.slug and @post.categories.map(&:name) == post.categories.map(&:name)
continue
post.slug != @post.slug and @post.categories.map(&:name) == post.categories.map(&:name)
post.categories.map(&:name)
@post.categories.map(&:name)
post.slug != @post.slug
continue
@posts.meta
@posts
@posts.next_page
@posts.meta.next_page
@previous_page
@next_page
@next
continue
[1,2,5] == [1,2,4]
[1,2,4] == [1,2,4]
[1,2] == [1,2,4]
[1,2] == [1,3]
[1,2] == [1,2]
post.categories.map(&:name)
@post.categories.map(&:name)
@post.categories.first.name
@post.categories
@post
post
continue
@search_input_value.gsub(/[-,]/, '')
@search_input_value.gsub(/[-,NY]/, '')
@search_input_value.gsub(/[-,]/, '')
@search_input_value.gsub(/[-,]/, ' ')
@search_input_value
continue
search_string
terms_arr
borough_city
continue
params['search_term']
@building.present?
@management_company.blank?
continue
neighborhoods
self.where("neighborhood @@ :q", q: "%#{'Hamilton heights'}").count
self.where("neighborhood @@ :q", q: "%#{'Hamilton Heights'}").count
self.where("neighborhood @@ :q", q: "%#{'Hamilton Heights'}")
self.where("neighborhood @@ :q", q: "%#{'Little italy'}")
self.where("neighborhood @@ :q", q: "%#{little italy}")
neighborhoods
self.where("neighborhood @@ :q", q: "%#{neighborhoods}")
self.where("neighborhood ILIKE ?", "%#{neighborhoods}%")
self.where("neighborhood @@ q", q: neighborhoods)
self.where("neighborhood = ?", neighborhoods)
neighborhoods
continue
Building.buildings_in_neighborhood('Hamilton heights').count
Building.buildings_in_neighborhood('Hamilton Heights').count
Building.buildings_in_neighborhood('Hamilton Height').count
Building.buildings_in_neighborhood('Hamilton Height')
Building.buildings_in_neighborhood(params[:search_term])
params['searched_by']
search_string
continue
@post.author
@post.user
continue
neighborhoods
neighborhoods.present?
continue
Geocoder.search("30 E 81st St")
self
self.longitude
self.latitude
neighborhoods
continue
@stars
continue
@stars[1].to_f/100
@stars[1].to_f/10
@stars
continue
Rate.where(rateable_id: building.id, rateable_type: 'Building', dimension: 'building').sum(:stars)
Rate.where(rateable_id: building.id, rateable_type: 'Building', dimension: 'building').count
Rate.where(rateable_id: building.id, rateable_type: 'Building').count
Rate.where(rateable_id: building.id, rateable_type: 'Building')
Rate.where(rateable_id: building.id, rateable_type: 'building').count
building.rateables
building
building.rates
building.rat
building.rates
continue
self
continue
self
continue
self
continue
self
neighbohoods
continue
neighbohoods
continue
RatingCache.where(cacheable_id: building.id)[3]
RatingCache.where(cacheable_id: building.id)[2]
RatingCache.where(cacheable_id: building.id)[1]
RatingCache.where(cacheable_id: building.id)[0]
RatingCache.where(cacheable_id: building.id).count
building.cacheables
building.cacheable
building.rateables
building.rates
building = Building.find_by(:building_street_address => '10 5th Ave')
building.find_by(:building_street_address => '10 5th Ave')
building.find_by(:building_street_address => '')
b
buildings.map{|b| b.rating_cache.sum(:avg)}
buildings.map{|b| b.rating_cache.first.avg}
