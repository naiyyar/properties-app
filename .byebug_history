continue
featured_buildings.pluck(:building_id)
@buildings.where.not(id: featured_buildings.pluck(:building_id)).limit(20).pluck(:id)
@buildings.where.not(id: featured_buildings.pluck(:building_id))
featured_buildings.pluck(:building_id)
featured_buildings.count
continue
 @featured_buildings.shuffle[2..@featured_buildings.count]
@featured_buildings = @featured_buildings.shuffle[2..@featured_buildings.count].first(2)
@featured_buildings = @featured_buildings.shuffle[2..@featured_buildings.count].limit(2)
@featured_buildings = Building.where(id: featured_buildings.pluck(:building_id))
@featured_buildings.shuffle[2..3]
Building.where(id: featured_buildings.pluck(:building_id)).order("RAND()").first
Building.where(id: featured_buildings.pluck(:building_id)).order("RANDOM()").first
@featured_buildings.order("RANDOM()").first
@featured_buildings.order("RANDOM()").first(2)
@featured_buildings.order("RANDOM()").first
@featured_buildings.offset(offset)
offset = rand(@featured_buildings.count)
@featured_buildings.offset(offset).first(2)
@featured_buildings.offset(offset)
offset = rand(@featured_buildings.count)
@featured_buildings.first(offset)
@featured_buildings.offset(offset)
@featured_buildings.count
offset = rand(2..@featured_buildings.count)
offset
continue
building.featured?
continue
building.featured?
continue
building.featured?
continue
building.featured?
continue
dddddd
continue
building.image_uploads.last
building.image_uploadsbuilding.image_uploads.last
building
continue
building.image_uploads.count
building.image_uploads
building
continue
@gmaphash = Building.buildings_json_hash(buildings)
buildings = @similar_properties.to_a + [@building]
@similar_properties.to_a
@similar_properties
continue
buildings.as_json
buildings = @similar_properties.to_a + [@building]
buildings.count
buildings = @similar_properties.to_a + [@building]
@similar_properties.to_a + [@building]
@similar_properties.insert(@building)
@similar_properties.merge(@building)
@similar_properties.methods
@similar_properties.class
@building
@similar_properties.count
continue
@building.featured_comps.active
@building.featured_comps.pluck(:building_id)
@building.featured_comps
@building.featured_comps.count
continue
params
continue
params
continue
featured_comp_params
params
continue
@buildings
@buildings.count
params
continue
params
params[:term]
@buildings.count
@buildings
continue
request.format
params
continue
building = Building.find(session[:favourite_object_id])
session[:favourite_object_id]
session[:favourite_object_id].present? and current_user.present?
continue
request.fullpath
continue
request.fullpath
continue
request.format.html?
request.format
request.fullpath
continue
favourite_object_id
session[:favourite_object_id]
continue
request.fullpath.include?('glyphicons-halflings')
request.fullpath.include?('glyphicons, halflings')
request.fullpath.include?('glyphicons')
request.fullpath =~/\/glyphicons-halflings-regular/
request.fullpath =~/\/glyphicons-halflings-regular.woff/
request.fullpath =~/\/fonts\/glyphicons-halflings-regular.woff/
request.fullpath =~/\/fonts/glyphicons-halflings-regular.woff/
request.fullpath =~/\/fonts/
request.fullpath =~/\/woff/
request.fullpath
continue
request.fullpath
request.fullpath =~ /\/users/
request.format.json? || request.format.js?
request.format.json?
request.fullpath
continue
params
continue
view_context.heart_link(building)
current_user
continue
!user_signed_in?
user_signed_in?
session
current_user
building
view_context.heart_link(building)
context_view.heart_link(building)
view_context.heart_link(building)
continue
self.neighborhood
first_neighborhood
search.present? and first_neighborhood.blank?
continue
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search[0]
parent_neighborhood
self.neighborhood
first_neighborhood
first_neighborhood.blank?
search.present?
search.present? and first_neighborhood.blank?
continue
∂∂∂∂∂∂∂∂
continue
city.gsub(\s\, '')
city.gsub('\s', '')
city.gsub('%s', '')
city.gsub(' ', '')
city.gsub('', '')
city = 'New York'
boroughs.titleize
formatted_city
name
continue
@distance_results.values[0]
@distance_results
continue
distance_result.values
distance_result
continue
response = HTTParty.get(dis_matrix_api)
dis_matrix_api = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=#{self.street_address}&destinations=#{dest}&key=#{key}"
self.street_address
station
response = HTTParty.get(dis_matrix_api)
dis_matrix_api = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=#{latlng}&destinations=#{dest}&key=#{key}"
dest = "#{station.latitude}, #{station.longitude}"
dest = "#{station.latitude}, {station.longitude}"
dest = "#{station.latitude, station.longitude}"
response = HTTParty.get(dis_matrix_api)
dis_matrix_api
continue
nearby_stations.first.distance_to([latitude, longitude])
self.distance_to([40.7398640004746, -73.9865990020789])
self
nearby_stations.first
distances
nearby_stations.length
nearby_stations
distance_result[4]
distance_result[3]
distance_result[2]
distance_result[1]
distance_result[0]
distance_result
st_names
continue
distances
continue
nearby_stations.map(&:name)
nearby_stations
continue
result.values[0][:dresults]['distance']
result.values[0][:dresults]
result.values[0]
result.values[0]['dresults']
st['dresults']['duration']['text']
st['transit_details'].present? and st['distance']['text'].to_f <= 0.7
result.values.length
result.values
result
continue
distance_result_arr
continue
distance_result_arr
distance_result_arr.length
continue
station.subway_station_lines.select(:id, :line, :color).as_json
station.subway_station_lines.select(:id, :line, :color).to_json
station.subway_station_lines.select(:id, :line, :color)
station = nearby_stations.first
distance_result
continue
distance_result
continue
SubwayStation.near([latitude, longitude], 0.6).select(:id, :name).uniq_by{|n| n.name}
SubwayStation.near([latitude, longitude], 0.6).select(:id, :name).uniq(&:name)
SubwayStation.near([latitude, longitude], 0.6).select(:id, :name).uniq_by(&:name)
SubwayStation.near([latitude, longitude], 0.6).uniq_by(&:name)
SubwayStation.near([latitude, longitude], 0.6).uniq_by(:name)
SubwayStation.near([latitude, longitude], 0.6).select("name").distinct
SubwayStation.near([latitude, longitude], 0.6).select("name").uniq
SubwayStation.near([latitude, longitude], 0.6).select("name")
SubwayStation.near([latitude, longitude], 0.6).select("DISTINCT(name)")
SubwayStation.near([latitude, longitude], 0.5)
SubwayStation.near([latitude, longitude], 0.5).join
SubwayStation.near([latitude, longitude], 0.5).length
SubwayStation.near([latitude, longitude], 0.6).select("DISTINCT(name), id")
SubwayStation.near([latitude, longitude], 0.6).select("DISTINCT(name)")
SubwayStation.near([latitude, longitude], 0.6).select(:name).uniq(&:name)
SubwayStation.near([latitude, longitude], 0.6).select(:name).uniq
SubwayStation.near([latitude, longitude], 0.6).select(:name)
SubwayStation.near([latitude, longitude], 0.6).map(&:name).uniq
SubwayStation.near([latitude, longitude], 0.5).map(&:name).uniq
SubwayStation.near([latitude, longitude], 0.5).map(&:name)
latlng
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).map(&:name).uniq
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).map(&:name)
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).pluck(:name)
SubwayStation.near([40.7521647, -73.97715339999999], 0.5)
SubwayStation.near([40.7521647, -73.97715339999999], 0.5).length
SubwayStation.near([40.7521647, -73.97715339999999], 0.7).length
SubwayStation.near([40.7521647, -73.97715339999999], 1).length
SubwayStation.near([40.7521647, -73.97715339999999], 5).length
SubwayStation.near([40.7521647, -73.97715339999999]).length
SubwayStation.near([40.7521647, -73.97715339999999]).count
SubwayStation.near([40.7521647, -73.97715339999999])
