continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
@management_company
Building.where(id: params[:managed_building_id])
params
continue
Building.text_search(params[:term]).reorder('building_street_address ASC').limit(10).includes(:units)
Building.text_search(params[:term])
params
continue
params[:filter][:amenities].include?(val.to_s)
val.to_s
val
continue
Amenity.where('name = ? AND name = ?',amenities[0], amenities[1]).count
Amenity.where(name: amenities[0], name: amenities[1]).count
Amenity.where('name = ? AND name = ?',amenities[0], amenities[1]).count
Amenity.where(name: amenities).map(&:amenitable_id).uniq
Amenity.where(name: amenities).map(&:amenitable_id)
Amenity.where(name: amenities).count
buildings.count
amenities
continue
buildings.where(id: selected_emenities.map(&:amenitable_id)).count
selected_emenities.map(&:amenitable_id).uniq
selected_emenities.map(&:amenitable_id)
selected_emenities = Amenity.where(name: amenities[0], name: amenities[1])
amenities.length == 2
amenities
selected_emenities.map(&:amenitable_id)
selected_emenities.count
selected_emenities
continue
rating == '1'
rating == 1
rating
continue
rating
continue
rating
continue
request.fullpath
continue
request.fullpath
request.full_path
params[:filter]
params
continue
rec.save
rec.number_of_elevators = @elevators
rec = self.amenities.where(name: 'Elevator').first_or_initialize 
self.amenities.where(name: 'Elevator').first_or_initialize
@elevators
self.amenities.where(name: 'Elevator')
@elevators = (amenities[key.to_sym] == 'Elevator' ? building_params[:elevator] : nil)
building_params[:elevator]
amenities[key.to_sym] == 'Elevator'
key
continue
building_params[:elevator]
amenity[building_params.keys.first.to_sym]
amenity[building_params.keys.first]
amenity = ApplicationController.helpers.building_amenities
building_params.keys
building_params
continue
Amenity.where(name: amenities).map(&:amenitable_id)
Amenity.where(name: amenities).count
Amenity.where(name: amenities)
Amenity.where(name: amenities).map(&:amenitable_id).count
amenities
continue
params[:filter][:rating]
params
val
continue
Building.filter_by_rates(@buildings, rating).filter_by_beds(@buildings, beds).filter_by_types(@buildings, building_types).sort_buildings(@buildings, params[:sort_by])
Building.filter_by_beds(@buildings, beds).filter_by_types(@buildings, building_types)
Building.filter_by_beds(@buildings, beds).count
Building.filter_by_beds(@buildings, beds)
filter_by_beds(@buildings, beds)
Building.filter_by_rates(@buildings, rating)
Building.filter_by_rates(@buildings, rating).filter_by_beds(@buildings, beds).count
Building.filter_by_rates(@buildings, rating).filter_by_beds(@buildings, beds)
filter_by_beds(@buildings, beds)
filter_by_rates(@buildings, rating)
@buildings.count
@buildings
continue
buildings.where(building_type: type)
type
buildings.count
continue
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82]).group('reviews.id').order('COUNT(reviews.reviewable_id) desc')
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82]).group('id').order('COUNT(reviews.reviewable_id) desc')
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82]).group('id').order('COUNT(reviews.reviewable_id) asc')
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82]).group('id').order('SUM(reviews.reviewable_id) asc')
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82]).group('id').order('SUM(reviews.reviewable_id) desc')
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82]).group('id').order('SUM(reviews.reviewable_id)').to_sql
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82]).group('id').order('SUM(reviews.reviewable_id)')
Building.joins(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82])
Building.join(:reviews).where('buildings.id in (?)', [67, 65, 68, 73, 198, 122, 82])
Building.where(id: [67, 65, 68, 73, 198, 122, 82]).joins(:reviews).count
Building.where(id: [67, 65, 68, 73, 198, 122, 82]).joins(:reviews).group('id')
Building.where(id: [67, 65, 68, 73, 198, 122, 82]).joins(:reviews).count
Building.where(id: [67, 65, 68, 73, 198, 122, 82]).joins(:reviews)
Building.where(id: [67, 65, 68, 73, 198, 122, 82]).count
buildings.where(id: @ratings.map(&:cacheable_id))
@ratings = RatingCache.where(cacheable_id: buildings.map(&:id)).order('avg desc')
RatingCache.where(cacheable_id: buildings.map(&:id)).order('avg desc').map(&:cacheable_id)
RatingCache.where(cacheable_id: buildings.map(&:id)).order(:avg).map(&:cacheable_id)
buildings.map(&:id)
buildings.pluck(:id)
RatingCache.where(cacheable_id: buildings.map(&:id)).order(:avg)
RatingCache.where(cacheable_id: buildings.map(&:id)).count
RatingCache.where(cacheable_id: buildings.map(&:id))
buildings.joins(:rates)
buildings.joins(:ratings).count
buildings.joins(:ratings)
buildings.joins(:reviews)[0]
buildings.joins(:reviews)
buildings.join(:reviews)
buildings.count
buildings.coun
sort_params
params
continue
rates.map(&:cacheable_id)
rates.map(&:cacheable_type)
rates.count
rates = RatingCache.where(cacheable_type: "Building", avg: filter_params[:rating])
rates = RatingCache.where(cacheable_type: "Building", stars: filter_params[:rating])
rates.map(&:rateable_id).uniq.count
rates.map(&:rateable_id).uniq
rates.map(&:rateable_id)
rates.map(&rateable_id)
rates.count
rates = Rate.where(rateable_type: "Building", stars: filter_params[:rating])
filter_params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
request.format.json?
request.format.html?
request.format.methods
request.html
request.html?
request.json?
request.format
continue
dimension
review_id
continue
row
continue
row
continue
row
continue
row
continue
row
continue
row
continue
row
continue
(2..spreadsheet.last_row).to_a
(2..spreadsheet.last_row)
spreadsheet.row(2)
spreadsheet.last_ro
spreadsheet.row(1)
spreadsheet
header
i
row
row['building_address'].present?
continue
row['building_address'].present?
row = Hash[[header, spreadsheet.row(i)].transpose ]
row
rec
continue
@buildings = Building.where(building_street_address: row['building_address'], zipcode: row['zipcode'])
row = Hash[[header, spreadsheet.row(i)].transpose ]
rec
continue
DateTime.parse(row['created_at'])
rev[:reviewable_id] = @building.id
rev.attributes = row.to_hash.slice(*row.to_hash.keys[4..6])
rev = Review.new
@building.present? and @building.id.present?
@building = @buildings.first
@buildings
@buildings.count
@buildings = Building.where(building_street_address: row['building_address'], zipcode: row['zipcode'])
row = Hash[[header, spreadsheet.row(i)].transpose ]
rec
continue
row.to_hash.slice(*row.to_hash.keys[3..6])
row.to_hash.keys[3..6]
row.to_hash.keys[3-6]
row.to_hash.keys
*row.to_hash.keys
row.to_hash.keys
rev.attributes = row.to_hash.slice(*row.to_hash.keys)
rev = Review.new
DateTime.parse(row['review_date'])
row['review_date']
row
@building
continue
13/5
rateables.sum(:stars)
rateables.count
rateables
rating_cache
continue
rating_cache
continue
rating_cache
continue
rating_cache
continue
rating_cache
continue
rating_cache
continue
rateables.sum(:stars)
rating_cache
rateables.count
rateables
continue
"#{v}"
continue
"#{v}"
continue
