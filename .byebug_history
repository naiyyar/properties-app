continue
request.host
request.remote_host
request.methods
request.url
continue
self
median_arr
continue
self
median_arr
continue
self
median_arr
continue
median_arr
continue
median_arr
self
continue
self
median_arr
continue
self
median_arr
continue
median_arr
self
continue
m_arr.sort
m_arr
median_arr.map{|item| m_arr << item.to_i}
m_arr = []
price
bedroom_ranges
self.sort
self
median_arr
continue
median_arr
continue
median_arr
self
continue
median_arr
self
continue
self
continue
self
median_arr
continue
@rent_medians.count
@rent_medians.where(range: option[1]).count
option[1]
prices_options
options[1]
continue
@rent_medians.where(range: option[1]).count
option[1]
continue
buildings.kind_of? Array
left.count
left = buildings - top_two_featured_buildings
buildings.count
buildings
top_two_featured_buildings.count
top_two_featured_buildings
continue
(params[:action] == 'show' and params[:controller] == 'buildings')
params[:action] == 'search'
params[:action] == 'search' and (params[:action] == 'show' and params[:controller] == 'buildings')
continue
buildings.first
price
continue
@buildings.uniq(&:id).class
@buildings.uniq(&:id).count
buildings.two_bed.map(&:id)
buildings.one_bed.map(&:id)
buildings.two_bed.count
buildings.one_bed.count
buildings.one_bed
beds
@buildings
@buildings[2].count
@buildings[1].count
@buildings.class
@buildings[0].count
@buildings.count
@buildings
1      2
continue
beds
continue
@buildings.flatten
@buildings.flatten.count
@buildings
@buildings[0].count
@buildings.count
continue
@buildings.values
{"1"=>#<ActiveRecord::Relation [#<Building id: 105, building_name: "", building_street_address: "101 Allen Street", created_at: "2016-12-10 22:17:44", updated_at: "2019-03-18 17:29:38", photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, latitude: 40.7189409, longitude: -73.9908769, address2: nil, zipcode: "10002", webaddress: nil, city: "New York", phone: nil, state: "NY", laundry_facility: false, parking: false, doorman: false, description: nil, elevator: nil, garage: false, gym: false, live_in_super: false, pets_allowed_cats: false, pets_allowed_dogs: false, roof_deck: false, swimming_pool: false, walk_up: true, neighborhood: "Lower East Side", neighborhoods_parent: "Lower Manhattan", user_id: 2, floors: 5, built_in: 1900, number_of_units: 16, courtyard: false, management_company_run: false, neighborhood3: "Lower Manhattan", web_url: "", building_type: "Condo Building", childrens_playroom: false, no_fee: false, reviews_count: 1, management_company_id: 1, studio: 0, one_bed: 1, two_bed: nil, three_bed: nil, four_plus_bed: nil, price: 1, avg_rating: 5.0, email: nil, active_email: true, active_web: true>, #<Building id: 50, building_name: "", building_street_address: "174 Delancey Street", created_at: "2016-10-04 02:21:57", updated_at: "2019-03-18 17:29:53", photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, latitude: 40.7179205, longitude: -73.9850461, address2: nil, zipcode: "10002", webaddress: nil, city: "New York", phone: nil, state: "NY", laundry_facility: false, parking: false, doorman: false, description: nil, elevator: nil, garage: false, gym: false, live_in_super: false, pets_allowed_cats: false, pets_allowed_dogs: false, roof_deck: false, swimming_pool: false, walk_up: true, neighborhood: "Lower East Side", neighborhoods_parent: "Lower Manhattan", user_id: 2, floors: 5, built_in: 1920, number_of_units: 22, courtyard: false, management_company_run: false, neighborhood3: "", web_url: "", building_type: "Rental Building", childrens_playroom: false, no_fee: false, reviews_count: 1, management_company_id: nil, studio: 0, one_bed: 1, two_bed: nil, three_bed: nil, four_plus_bed: nil, price: 1, avg_rating: 3.5, email: nil, active_email: true, active_web: true>]>, "2"=>#<ActiveRecord::Relation [#<Building id: 115, building_name: "", building_street_address: "13 Essex Street", created_at: "2016-12-19 23:20:11", updated_at: "2019-03-18 17:29:45", photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, latitude: 40.715183, longitude: -73.990259, address2: nil, zipcode: "10002", webaddress: nil, city: "New York", phone: nil, state: "NY", laundry_facility: false, parking: false, doorman: false, description: nil, elevator: nil, garage: false, gym: false, live_in_super: false, pets_allowed_cats: false, pets_allowed_dogs: false, roof_deck: false, swimming_pool: false, walk_up: true, neighborhood: "Chinatown", neighborhoods_parent: "Lower East Side", user_id: 2, floors: 6, built_in: 1900, number_of_units: 44, courtyard: false, management_company_run: false, neighborhood3: "Lower Manhattan", web_url: "", building_type: "Rental Building", childrens_playroom: false, no_fee: false, reviews_count: 1, management_company_id: nil, studio: nil, one_bed: nil, two_bed: 2, three_bed: nil, four_plus_bed: nil, price: 1, avg_rating: 5.0, email: nil, active_email: true, active_web
@buildings
@buildings.values.count
@buildings.values
@buildings.values.methods
@buildings.values[1]
@buildings.values[0]
@buildings.values.count
@buildings.values
@buildings['2'].count
@buildings['1'].count
@buildings[1].count
@buildings.keys
@buildings
continue
@buildings[1]
@buildings[1][2]
@buildings[0][2]
@buildings[0][1]
@buildings[0][0]
@buildings[0]
@buildings[0].id
@buildings.count
@buildings[3]
@buildings[2]
@buildings[1]
@buildings[0]
@buildings.length
@buildings[1]
@buildings[0].count
@buildings
@buildings[0].count
@buildings.count
@buildings << buildings.two_bed
@buildings.class
@buildings
@buildings.count
@buildings[0].count
buildings.two_bed
num == '2'
num == '1'
num == '0'
@buildings[0].count
continue
num == '2'
@buildings[0].count
@buildings << buildings.one_bed
buildings.one_bed.count
@buildings
num == '1'
num == '0'
continue
@buildings[0].count
@buildings[0]
@buildings
@buildings.map(&:id)
@buildings.pluck(:id)
beds
buildings.two_bed
buildings.one_bed.count
buildings.one_bed
buildings.studio
@buildings.count
continue
@buildings.one_bed.count
@buildings.two_bed.count
@beds
@buildings.two_bed
@buildings.one_bed
bed_type?('2')
bed_type?('1')
bed_type?('0')
buildings.present?
@beds
continue
params[:filter][:bedrooms]
params[:filter]
continue
request.methods.sort
request.methods
request.ip
Geocoder::Res
request.location
request
continue
station.update(st_distance: station.distance_to(latlng), st_duration: distance_result[index][:results][0]['duration']['text'])
continue
station.update(st_distance: station.distance_to(latlng), st_duration: distance_result[index][:results][0]['duration']['text'])
station
continue
distance_result[index][:results][0]['duration']['text'].to_i
distance_result[index][:results][0]['duration']['text']
distance_result[index][:results][0]['duration']
continue
distance_result
continue
top_two_featured_buildings
continue
controllers.include?(params[:controller]) and actions.include?(params[:action])
show_nb_counts
continue
params
continue
params
continue
params
continue
building_params
continue
@reviews.count
@reviews.present?
@reviews.present? 
continue
EmailVerifier.check([contact_params[:email]])
EmailVerifier.check(contact_params[:email])
EmailVerifier.methods
EmailVerifier
contact_params[:email]
EmailVerifier.check(contact_params[:email])
contact_params[:email]
contact_params[:email].present?
continue
@reviews.count
total_reviews
@reviews.present?
continue
distance + 1.0
distance + 0.8
distance + 0.9
distance + 0.5
distance + 0.4
distance
@zoom
continue
@buildings.map(&:id)
@buildings.pluck(:id)
@buildings.blank?
@buildings = Building.near(custom_latng, 1.5, units: :km)
Building.near(custom_latng, 1.5, units: :km).length
continue
buildings.pluck(:reviews_count)
Building.where(reviews_count: nil).update_all(reviews_count: 0)
Building.where(reviews_count: nil).count
buildings.pluck(:id)
buildings.pluck(:reviews_count)
continue
@per_page_buildings.count
@per_page_buildings = @buildings.select{|b| !top_two_featured_buildings.include?(b)}
top_two_featured_buildings
@per_page_buildings.count
@per_page_buildings = @buildings.select{|b| !top_two_featured_buildings.include?(b.id)}
@buildings.kind_of?(Array)
@buildings.length
@buildings.where.not(id: top_two_featured_buildings.map(&:id)).
