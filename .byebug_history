continue
@reviews = Review.where(reviewable_id: params[:building_id]).order('created_at desc')
Review
@reviews = Review.where(building_id: params[:building_id]).order('created_at desc')
params
continue
session[:after_contribute]
seesion
continue
@rental_price_history
continue
params
continue
params
continue
params
continue
building_amenities.sort.to_h
building_amenities.sort
building_amenities
continue
@building[k].blank?
@building[k].present?
@building[k]
k
continue
k
continue
@building[k]
@building
k
continue
building_amenities.values
building_amenities.keys
building_amenities
continue
session[:unit_id].present?
session[:building_id].present?
params[:contribution] == 'building_photos'
session[:contribution_for] == 'building_photos' && session[:search_term].present?
session
params
session[:form_data].present?
continue
params[:contribution]
params[:contribution].present?
params
continue
decimal_part.to_s.split('.')[1].to_f/100
decimal_part.to_s
decimal_part = number_with_precision(rating_cache.first.avg.round(2), precision: 2)
number_with_precision(rating_cache.first.avg.round(2), precision: 2)
continue
@unit.building
@unit
continue
rating_cache
building
continue
building
continue
building
continue
building
continue
building
continue
building
continue
building
continue
building
continue
decimal_part > 0.0 and decimal_part < 1.0
decimal_part
continue
avg.to_f
avg.to_i
avg
avg.to_s.split('.')
avg.split('.')
avg > 2.5
avg < 2.5
avg.class
avg = rating_cache.first.avg
rating_cache.first.avg
rating_cache.avg
rating_cache = RatingCache.where(cacheable_id: 2, cacheable_type: 'Building')
RatingCache.where(cacheable_id: 2, cacheable_type: 'Building').count
RatingCache.where(cacheable_id: 2, cacheable_type: 'building').count
RatingCache.where(cacheable_id: 2).count
RatingCache.where(cacheable_id: 2)
RatingCache.where(cacheable_id: 2).avg
RatingCache.first
RateCache
Rate.where(rateable_id: 2).map(&:stars)
15/5
Rate.where(rateable_id: 2).count
Rate.where(rateable_id: 2)
building.rates
building
continue
params
continue
params
continue
Gmaps4rails.geocode('733 2nd Ave, New York')
Gmaps4rails.geocode('733 2nd Ave, New York', true)
Gmaps4rails.places_for_address('733 2nd Ave, New York', 'AIzaSyDZtWN-GlVsIjuQMP8xN5dit3PmlMb-qjA', keyword = nil, radius = 7500, lang="en", raw = false)
continue
params
continue
session[:form_data]['unit_id']
session[:form_data][:building][:unit_id]
session[:form_data]
session[:form_data][:unit_id]
unit
continue
 session[:form_data]
session[:form_data]['building']['units_attributes']['0']['building_id'] = building.id
building = Building.find_by_building_street_address(session[:form_data]['building']['building_street_address'])
 session[:form_data]
session[:form_data]['building']['building_street_address']
session[:object_type].present? and session[:object_type] == 'unit' and session[:form_data]['building'].present?
session[:object_type].present? and session[:object_type] == 'building'
session[:form_data].present?
continue
params[:unit_id].present?
params
continue
params
continue
params
continue
building = Building.find_by_building_street_address(session[:form_data]['building']['building_street_address'])
session[:form_data]['building']['building_street_address']
session[:object_type].present? and session[:object_type] == 'unit' and session[:form_data]['building'].present?
session[:object_type] == 'building'
session[:object_type].present? 
object
session[:form_data]['unit_contribution']
session[:form_data]['contribution']
session[:form_data]
params
continue
session[:after_conribute].present?
params
session
params
continue
session
continue
params
continue
params
continue
params
continue
session
continue
session
continue
session
params
continue
params
session[:unit_id].present?
session[:building_id].present?
session[:search_term].present?
session[:contribution_for]
session
params
paprams
continue
params[:zip]
address = params['buildings-search-txt'].split(',')[0]
params['buildings-search-txt'].present?
params
continue
params
continue
params
continue
params
continue
params
continue
@building = Building.find_by_building_street_address(params[:building][:building_street_address])
params[:building][:building_street_address].present?
params[:building][:building_street_address].present? and params[:building][:zipcode].present?
params
continue
session[:search_term]
session[:contribution_for]
continue
params
continue
params
resource = warden.authenticate!(:scope => resource_name)
controller_path
resource = warden.authenticate!(:scope => resource_name, :recall => "#{controller_path}#failure")
params[:user]
continue
request.xhr?
request
request.xhr
request.format
request.xhr?
flash[:notice] = message
message = find_message(:signed_up)
resource.active_for_authentication?
resource.persisted?
continue
messages = resource.errors.messages
resource
resource.persisted?
continue
params
continue
params
continue
params
continue
params['buildings-search-txt'].split(',')[0]
params['buildings-search-txt'].split(',')
params
continue
params
continue
params
continue
@unit.errors
@unit.error
@unit.update(unit_params)
unit_params
params[:unit]
params
@unit
continue
params
continue
params
continue
resource.errors.full_messages
continue
resource.errors.full_messages
resource.errors
resource.error
resource
continue
self.resource = resource_class.reset_password_by_token(resource_params)
resource_params
params
continue
resource_params
User
