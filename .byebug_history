continue
event
continue
User.find(20)&.stripe_customer_id
User.find(20)
current_user&.stripe_customer_id
customer_id
continue
@billing.errors
@billing.save_and_charge_existing_card!(customer_id: customer_id, card_id: card.id)
@billing = Billing.new({ email: user_email,amount:   Billing::PRICE,featured_building_id: featured_building.id,user_id: user.id,renew_date:           Time.now,billing_card_id:      card.id,brand: card.brand})
})
brand: card.brand
billing_card_id:      card.id,
renew_date:           Time.now,
user_id: user.id,
featured_building_id: featured_building.id,
amount:   Billing::PRICE,
@billing = Billing.new({ email: user_email,
card = BillingService.new.saved_cards(customer_id).last
customer_id = user.stripe_customer_id
featured_building.renew_plan?(ENV['SERVER_ROOT'])
continue
featured_building.renew_plan?(ENV['SERVER_ROOT'])
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
continue
featured_building.id
featured_building.renew_plan?(ENV['SERVER_ROOT'])
continue
featured_building.renew_plan?(ENV['SERVER_ROOT'])
FeaturedBuilding::CURRENT_DT.to_s(:no_timezone)
continue
FeaturedBuilding::CURRENT_DT.to_s(:no_timezone)
FeaturedBuilding.CURRENT_DT.to_s(:no_timezone)
ENV['SERVER_ROOT']
featured_building.renew_plan?(ENV['SERVER_ROOT'])
continue
billing_params
@billing.errors.messages
@billing.errors
@billing.create_charge_existing_card!(current_user.stripe_customer_id)
current_user
@billing.save
continue
featured_buildings.active
featured_buildings.active.count
featured_buildings.count
featured_buildings
continue
ActiveSupport::TimeZone.
ActiveSupport::TimeZone.class
ActiveSupport::TimeZone.all(&:name)
ActiveSupport::TimeZone.name
ActiveSupport::TimeZone.methods
ActiveSupport::TimeZone.all
nt
nt = ActiveSupport::TimeZone.create("America/Havana")
nt = ActiveSupport::TimeZone.new("America/Havana")
nt = ActiveSupport::TimeZone.new
ActiveSupport::TimeZone.all.first
browser_tz.name
browser_tz.tzinfo
browser_tz
browser_tz = ActiveSupport::TimeZone.find_tzinfo(cookies[:timezone])
ActiveSupport::TimeZone.all
ActiveSupport::TimeZone.all.find{ |zone| zone.tzinfo }
ActiveSupport::TimeZone.all.find{ |zone| zone.tzinfo == browser_tz }
browser_tz = ActiveSupport::TimeZone.find_tzinfo(cookies[:timezone])
continue
browser_time_zone.name
browser_time_zone
continue
cookies[:timezone]
continue
cookies[:timezone]
browser_tz = ActiveSupport::TimeZone.find_tzinfo(cookies[:timezone])
continue
cookies['time_zone']
cookies
continue
Time.zone
current_user
continue
resource
resource.update_column(:time_zone, params[:user][:time_zone]) if resource.time_zone.blank?
resource
params[:user][:time_zone]
params[:user]
params
continue
Time.now.in_time_zone
Time.now
current_user.created_at.in_time_zone
current_user.created_at.zone
current_user.created_at.time_with_zone
current_user.created_at.timezone
current_user.created_at
current_user
Time.zone.name
Time.zone
current_user.time_zone 
continue
params[:type]
request.format
params
continue
end_date
(end_date-1.day).to_s(:no_timezone)
end_date.to_s(:no_timezone)
end_date.to_s(:no_timezone) - 1.day
end_date.to_s(:no_timezone)
Time.now.to_s(:no_timezone)
end_date.present?
DEV_HOSTS.include?(host)
continue
current_user
BillingService.new.get_card('cus_GXSUFv4wi6RBf0', 'card_1G0NZUHc3YOlfsKIz68LYf6H').last4
BillingService.new.get_card('cus_GXSUFv4wi6RBf0', 'card_1G0NZUHc3YOlfsKIz68LYf6H')
billing.user
billing
to_email
card
continue
card.brand
card
BillingService.new.get_card(customer_id, card.id)['brand']
BillingService.new.get_card(customer_id, card.id).brand
BillingService.new.get_card(customer_id, card.id)
BillingService.new.get_card(customer_id, card_id)
card.id
customer_id
continue
std     = start_date.present? ? start_date : Time.now
std
start_date.blank?
start_date
continue
neighborhood3
neighborhoods_parent
neighborhood
neighborhood.blank?
nb3
nb_parent
nb3 = nb_parent = 'Lower Manhattan'
nb  = 'East Village'
nb == 'Ukrainian Village'
nb3
nb_parent
nb
hood
continue
neighborhood
geo_result
continue
neighborhood
geo_result
continue
geo_result
neighborhood
continue
neighborhood
continue
neighborhood
geo_result
continue
geo_result
neighborhood
continue
neighborhood
geo_result
continue
geo_result
neighborhood
self.neighborhood
neighborhood
continue
hood
hodd
continue
hood
continue
geo_result.address_components_of_type(:neighborhood)
geo_result.address_components_of_type(:sublocality)
continue
geo_result.address_components_of_type(:sublocality)
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
geo_result
continue
nb_parent.present?
nb3
nb_parent
building_with_neighborhood3
continue
building_with_neighborhood3
building_with_neighborhood3.present?
nb3
nb_parent
continue
self
self.save
save
self
neighborhoods_parent      = hood
self
parent_neighborhoods.include?(hood)
building_with_neighborhood3.neighborhoods_parent
hood
building_with_neighborhood3
continue
self
level3_neighborhoods.include?(hood)
parent_neighborhoods.include?(hood)
hood
building_with_neighborhood3.present?
building_with_neighborhood3
continue
neighborhood
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood).where.not(neighborhoods_parent: [nil], neighborhood3: [nil]).length
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood).where.not(neighborhoods_parent: [nil], neighborhood3: [nil]).count
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood).where.not(neighborhoods_parent: [nil], neighborhood3: [nil]).first
predifined_neighborhoods.include?(hood)
hood
continue
hood
predifined_neighborhoods.sort
predifined_neighborhoods
hood
continue
neighborhood
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood)
hood
predifined_neighborhoods.include?(hood)
building_with_nb3.neighborhoods_parent
hood
