continue
search[6].address_components_of_type(:neighborhood)
search[6]
search[5].address_components_of_type(:neighborhood)
search[5]
search[4].address_components_of_type(:neighborhood)
search[4]
search[3].address_components_of_type(:neighborhood)
search[3]
search[2].address_components_of_type(:neighborhood)
search[2]
search[1].address_components_of_type(:neighborhood)
search[1]
search[0].address_components_of_type(:neighborhood)
search[0]
search.count
continue
@building.favorite_by?(current_user)
@favourite.to_bool
@favourite
continue
current_user.favorite(@building)
@building = Building.find(params[:object_id])
params
continue
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search[0]
continue
search[0]
continue
search[0]
search[1]
search[2]
search[3]
search[4]
search[5]
search[6]
search[7].address_components_of_type(:neighborhood)
search[6].address_components_of_type(:neighborhood)
search[5].address_components_of_type(:neighborhood)
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search.present? and first_neighborhood.blank?
search[0]
search[0..5]
search.count[0..5]
search.count
continue
building_show.methods
building_show.to_b
building_show.to_f
building_show.to_i
building_show.to_boolean
building_show.to_bool
building_show
continue
building
params
continue
@buildings.select(:id, :building_name, :building_street_address, :latitude, :longitude).as_json
@buildings.select(:id, :building_name, :building_street_address, :latitude, :longitude)
@buildings.select(:id, :building_name, :building_street_address, :latitude, :longitude).
@buildings.select(:id, :building_name, :buidling_street_address, :latitude, :longitude).as_json
@buildings.select(:id, :building_name, :buidling_street_address, :latitude, :longitude)
@buildings.as_json
@buildings
@buildings.count
continue
params
continue
params
continue
params
continue
params[:filter][:price].include?(val)
params[:filter][:price]
val
continue
order("LOWER(buildings.building_name) asc").map(&:building_name)
order("LOWER(buildings.building_name) asc")
order("LOWER(buildings.building_name) #{ direction }")
direction
continue
sort_option.to_s.match(/^building_name_/)
sort_option.to_s.match( /^building_name_/)
sort_option.to_s == /^building_name_/
/^building_name_/
direction = (sort_option =~ /desc$/) ? 'desc' : 'asc'
(sort_option =~ /desc$/) ? 'desc' : 'asc'
direction
sort_option.to_s
sort_option
continue
params
continue
params
continue
terms
terms.map { |e| [e] * num_or_conds }.flatten
terms = terms.map { |e|(e.gsub('*', '%') + '%').gsub(/%+/, '%')}
num_or_conds = 2
terms.map { |e|(e.gsub('*', '%') + '%').gsub(/%+/, '%')}
terms = query.downcase.split(/\s+/)
query.downcase.split(/\s+/)
query
continue
arr.reject{|c| c.empty?}
arr = ['ankjnkj','']
all_hoods.reject{|c| c.empty?}
all_hoods.empty?
all_hoods.methods
all_hoods.reject_if{|c| c.empty?}
all_hoods.compact.present?
all_hoods.compact.length > 0
all_hoods.compact
all_hoods
continue
Gcoordinate.neighbohood_boundary_coordinates(search_string)
@boundary_coords
@boundary_coords << @neighborhood_coordinates
@neighborhood_coordinates
@buildings = Building.buildings_in_neighborhood(search_string)
continue
@boundary_coords.flatten.to_json
@boundary_coords.flatten
@boundary_coords
raw @brooklyn_neighborhoods.to_json
@brooklyn_neighborhoods.to_json
@zoom
@lng
@lat
@hash@lat.to_json
@hash.to_json
@hash
continue
params[:filter].to_query('filter')
params[:filter].to_query('foo')
params
params[:filter].to_param.to_query
params[:filter].to_param
params[:filter].methods
params[:filter].to_query
params
continue
"filter%B#{params[:filter].to_query}"
continue
params
params[:filter].to_query
params[:filter]
continue
params[:filter]
params[filter]
params
continue
search = Geocoder.search([latitude, longitude])
longitude
latitude
continue
search_string
Gcoordinate.where(neighborhood: 'Upper East Side')
search_string
@coordinates = Geocoder.coordinates("#{search_term}, #{borough_city}, NY")
borough_city
search_term
continue
raw @hash.to_json
@hash.to_json
@hash
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
continue
self.image.styles.keys
self.image.styles[:name]
self.image.styles.name
self.image.styles.to_h
self.image.styles.rehash
self.image.styles.inspect
self.image.styles.inspecr
self.image.styles.methods
self.image.styles
self.image.methods
self.image.styles[:large]
self.image.styles[:small]
self.image.styles[:medium]
self.image.exists?(:self.image.styles[:medium])
self.image.exists?(:small)
self.image.exists?(:medium)
self.image.exist?(:medium)
self.image
continue
upload.image.styles[:thumb]
upload.image.styles[:small]
upload.image.styles[:medium]
upload.image.styles[:original]
upload.image.styles.medium
upload.image.styles.attchement
upload.image.styles.attchment
upload.image.styles
upload.image.attachment
upload.image.medium
upload.image
upload.image.url(:original)
upload.image.url(:thumb)
upload.image.url(:small)
upload.image.url(:medium)
continue
@building
@building.neighbohoods
continue
search_string.gsub(' ', '-')
search_string.gsub(' ', ' - ')
search_string.gsub('', ' -')
search_string.gsub(' ', ' -')
search_string.gsub('  ', ' -')
search_string
params['search_term']
search_string
continue
search_term.gsub('  ', ' -')
search_term.gsub('  ', '-')
search_term.gsub('  ', '')
search_term.gsub(' ', '')
search_term
continue
NeighborhoodLink.where('neighborhood = ?', search_string).count
NeighborhoodLink.where('neighborhood = ?', search_string)
NeighborhoodLink.where('neighborhood = ?', neighborhoods)
queens_borough.include?(neighborhoods)
search_string.present? and search_string == 'New York'
neighborhoods
queens_borough
search_string
continue
post.categories.map(&:name)
continue
post.categories.map(&:name)
