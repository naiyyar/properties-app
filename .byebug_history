continue
buildings.pluck(:id)
Review.where(reviewable_id: buildings.pluck(:id)).count
count
buildings.map{|b| count += b.reviews.count}
count = 0
Review.where(reviewable_id: buildings.pluck(:id)).count
buildings.pluck(:id)
Building.total_reviews(buildings)
@total_rates
total_reviews
continue
@total_rates
continue
(@total_rates.to_f/total_reviews).round(2).to_s.split('.')
(@total_rates.to_f/total_reviews)
(@total_rates.to_f/total_reviews).round(2)
@total_rates = 22.33
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').where.not(avg: [nil, 'NaN']).sum(:avg)
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').where.not(avg: [nil, 'NaN']).count
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').where.not(avg: [nil, NaN]).count
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id').sum(:avg)
RatingCache.where(cacheable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on rating_caches.cacheable_id = buildings.id')
@total_rates
total_reviews
continue
total_reviews
total_reviews.to_i == 0
total_reviews.to_i
total_reviews = Building.total_reviews(buildings).count
total_reviews.to_i
total_reviews.to_i == 0
Building.total_reviews(buildings).count
Building.total_reviews(buildings)
continue
rrecords = Review.where(reviewable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on reviews.reviewable_id = buildings.id')
rrecords = Review.where(reviewable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on reviews.reviewable_id = buildings.id').count
rrecords = Review.where(reviewable_id: buildings.pluck(:id)).joins('LEFT JOIN buildings on reviews.reviewable_id = buildings.id')
Building.where(id: buildings.pluck(:id)).joins('LEFT JOIN reviews on buildings.id = reviews.reviewable_id').where(reviewable_type: 'Building')
self
brecords = Building.joins('LEFT JOIN reviews on buildings.id = reviews.reviewable_id').where(reviewable_type: 'Building')
continue
@stars.present? and @stars[1].to_f/100 >= 0.30 and @stars[1].to_f/100 <= 0.75
11.to_f/4
11/4
@stars.present? and @stars[1].to_f/10 >= 0.30 and @stars[1].to_f/10 <= 0.75
@stars[1].to_f/100 <= 0.75
@stars[1].to_f/10 <= 0.75
@stars[1].to_f/10
@stars[1].to_f/100
@stars[1].to_f/10
@stars
continue
@stars[1].to_f/10
@stars[1].to_f/100
@stars.present? and 1 <= @stars[0].to_i
@stars
continue
rateables.sum(:stars)/rateables.count
rateables.count
rateables.sum(:stars)
rateables
continue
rating_cache.first.avg.nan?
rating_cache
rating_cache.first.avg
rating_cache.present?
continue
rating_cache.first.avg
rating_cache.present?
continue
rating_cache.present?
rating_cache
rating_cache.first.avg
@total_rates
continue
@total_rates
rating_cache.first.avg
rating_cache
continue
buildings_count
@total_rates.to_f
continue
company
params
@building
continue
params
continue
@search_by_mangement
continue
dec[1].to_f/100
dec[1].to_f/10
dec[1]/10
dec[1]
dec = (@total_rates.to_f/buildings_count).round(2).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2).to_s(@total_rates.to_f/buildings_count).round(2).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2).to_s
(@total_rates.to_f/buildings_count).round(2)
(@total_rates.to_f/buildings_count.round(2))
(@total_rates.to_f/buildings_count.round(2)).to_s.split('.')
(@total_rates.to_f/buildings_count).round(2)
(@total_rates.to_f/buildings_count)
@stars[1].to_i.round(2)
@stars[1].to_i
@stars[1]
Decimal(@stars[1])
@stars[1].length
@stars[1].to_f.length
@stars[1].to_f
@stars[1]
@stars
@stars = (@total_rates.to_f/buildings_count).to_s.split('.')
@stars = []
(@total_rates.to_f/buildings_count).to_s.split('.')
buildings_count = @manage_buildings.count
buildings_count
@total_rates.to_s.split('.')
0.625@total_rates.to_s.split('.')/10
0.625/10
0.62/10
.62/10
62/10
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f/10
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f/100
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f/10
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f.round(2)
(@total_rates/@manage_buildings.count).to_s.split('.')[1].to_f
(@total_rates/@manage_buildings.count).to_s.split('.')
@total_rates/@manage_buildings.count.to_f.round(2)
@total_rates/@manage_buildings.count.to_d.round(2)
@total_rates/@manage_buildings.count.round(2)
(@total_rates/@manage_buildings.count.round(2)).to_s.split('.')
(@total_rates/@manage_buildings.count).to_s.split('.')
(@total_rates/@manage_buildings).to_s.split('.')
@total_rates/@manage_buildings.to_s.split('.')
@total_rates/@manage_buildings.count
@total_rates
stars
continue
@decimal_part
@total_rates
continue
@total_rates
continue
@total_rates
rating_cache
@total_rates
continue
@total_rates
rating_cache.first.avg
rating_cache
@total_rates
continue
@decimal_part >= 0.76
rating_cache.first.avg.nan?
@decimal_part += @decimal_part.to_s.split('.')[1].to_f/10
@decimal_part = rating_cache.first.avg.round(2)
rating_cache.first.avg.round(2)
@total_rates
rating_cache
@decimal_part
rating_cache.first.avg
@total_rates
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
@management_company
Building.where(id: params[:managed_building_id])
params
continue
Building.text_search(params[:term]).reorder('building_street_address ASC').limit(10).includes(:units)
Building.text_search(params[:term])
params
continue
params[:filter][:amenities].include?(val.to_s)
val.to_s
val
continue
Amenity.where('name = ? AND name = ?',amenities[0], amenities[1]).count
Amenity.where(name: amenities[0], name: amenities[1]).count
Amenity.where('name = ? AND name = ?',amenities[0], amenities[1]).count
Amenity.where(name: amenities).map(&:amenitable_id).uniq
Amenity.where(name: amenities).map(&:amenitable_id)
Amenity.where(name: amenities).count
buildings.count
amenities
continue
buildings.where(id: selected_emenities.map(&:amenitable_id)).count
selected_emenities.map(&:amenitable_id).uniq
selected_emenities.map(&:amenitable_id)
selected_emenities = Amenity.where(name: amenities[0], name: amenities[1])
amenities.length == 2
amenities
selected_emenities.map(&:amenitable_id)
selected_emenities.count
selected_emenities
continue
rating == '1'
rating == 1
rating
continue
rating
continue
rating
continue
request.fullpath
continue
request.fullpath
request.full_path
params[:filter]
params
continue
rec.save
rec.number_of_elevators = @elevators
rec = self.amenities.where(name: 'Elevator').first_or_initialize 
self.amenities.where(name: 'Elevator').first_or_initialize
@elevators
self.amenities.where(name: 'Elevator')
@elevators = (amenities[key.to_sym] == 'Elevator' ? building_params[:elevator] : nil)
building_params[:elevator]
amenities[key.to_sym] == 'Elevator'
key
continue
building_params[:elevator]
amenity[building_params.keys.first.to_sym]
amenity[building_params.keys.first]
amenity = ApplicationController.helpers.building_amenities
building_params.keys
building_params
continue
Amenity.where(name: amenities).map(&:amenitable_id)
Amenity.where(name: amenities).count
Amenity.where(name: amenities)
Amenity.where(name: amenities).map(&:amenitable_id).count
amenities
continue
params[:filter][:rating]
params
val
continue
Building.filter_by_rates(@buildings, rating).filter_by_beds(@buildings, beds).filter_by_types(@buildings, building_types).sort_buildings(@buildings, params[:sort_by])
Building.filter_by_beds(@buildings, beds).filter_by_types(@buildings, building_types)
Building.filter_by_beds(@buildings, beds).count
Building.filter_by_beds(@buildings, beds)
