continue
rates.map(&:cacheable_id)
rates.map(&:cacheable_type)
rates.count
rates = RatingCache.where(cacheable_type: "Building", avg: filter_params[:rating])
rates = RatingCache.where(cacheable_type: "Building", stars: filter_params[:rating])
rates.map(&:rateable_id).uniq.count
rates.map(&:rateable_id).uniq
rates.map(&:rateable_id)
rates.map(&rateable_id)
rates.count
rates = Rate.where(rateable_type: "Building", stars: filter_params[:rating])
filter_params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
request.format.json?
request.format.html?
request.format.methods
request.html
request.html?
request.json?
request.format
continue
dimension
review_id
continue
row
continue
row
continue
row
continue
row
continue
row
continue
row
continue
row
continue
(2..spreadsheet.last_row).to_a
(2..spreadsheet.last_row)
spreadsheet.row(2)
spreadsheet.last_ro
spreadsheet.row(1)
spreadsheet
header
i
row
row['building_address'].present?
continue
row['building_address'].present?
row = Hash[[header, spreadsheet.row(i)].transpose ]
row
rec
continue
@buildings = Building.where(building_street_address: row['building_address'], zipcode: row['zipcode'])
row = Hash[[header, spreadsheet.row(i)].transpose ]
rec
continue
DateTime.parse(row['created_at'])
rev[:reviewable_id] = @building.id
rev.attributes = row.to_hash.slice(*row.to_hash.keys[4..6])
rev = Review.new
@building.present? and @building.id.present?
@building = @buildings.first
@buildings
@buildings.count
@buildings = Building.where(building_street_address: row['building_address'], zipcode: row['zipcode'])
row = Hash[[header, spreadsheet.row(i)].transpose ]
rec
continue
row.to_hash.slice(*row.to_hash.keys[3..6])
row.to_hash.keys[3..6]
row.to_hash.keys[3-6]
row.to_hash.keys
*row.to_hash.keys
row.to_hash.keys
rev.attributes = row.to_hash.slice(*row.to_hash.keys)
rev = Review.new
DateTime.parse(row['review_date'])
row['review_date']
row
@building
continue
13/5
rateables.sum(:stars)
rateables.count
rateables
rating_cache
continue
rating_cache
continue
rating_cache
continue
rating_cache
continue
rating_cache
continue
rating_cache
continue
rateables.sum(:stars)
rating_cache
rateables.count
rateables
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
continue
"#{v}"
v
@building[:k]
k[]
@building
continue
@buildings.methods
@buildings.current_page
@buildings.total_pages
@buildings.total_pages == @buildings.current_page
params
continue
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).paginate(:page => params[:page], :per_page => results_count)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 20)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 10)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 26)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 27)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 28)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 22)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 30)
params
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 40)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => results_count.to_i)
results_count
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => results_count)results_count
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => 20)
@buildings = @buildings.includes(:uploads, :units, :building_average, :votes).limit(results_count).paginate(:page => params[:page], :per_page => results_count)
@buildings.count
results_count
params
param
continue
@hash.length
@hash
json_array
continue
@hash[0]
@hash.length
@hash
@buildings.count
continue
udid = session[:form_data]['upload_uid']
session[:form_data]['upload_uid']
session[:form_data]
session[:form_data][:upload_uid]
find_reviewable
continue
session[:form_data]
continue
session[:form_data]
params
continue
session[:form_data]
session[:form_data].present?
session[:form_data] = nil
session[:form_data].present?
session[:form_data]
continue
session[:form_data]
continue
@reviewable
params[:score].keys
params[:score]
params
continue
params[:review_attachments]
params
continue
params[:review_attachments][:image].length
params[:review_attachments]
params[review_attachments]
params
continue
params
continue
params
continue
score.keys
rateable.class.name
rateable.class.name.downcase
score
continue
params
@review
continue
@review
params
continue
params[:score]
params
continue
row[:building_address]
row[:building_address] ? 'yes' : 'no'
row['building_address'] ? 'yes' : 'no'
row['building_address'] == 'false'
row['building_address']
continue
building = Building.where(building_street_address: params[:term_address].)
building = Building.where(building_street_address: params[:term_address])
building = Building.where('building_street_address like ?', "%#{params[:term_address]}%")
building = Building.where(building_street_address: params[:term_address])
params['term_address'].present?
params
continue
params
continue
results.flatten[6]
results.flatten[5]
results.flatten[4]
results.flatten[3]
results.flatten[2]
results.flatten[1]
results.flatten[0]
results.flatten
results
results[0]
results.count
continue
Building.text_search_by_city(params[:term]).to_a.uniq(&:city)
Building.search_by_zipcodes(params[:term])
Building.search_by_building_name(params[:term]).count
Building.search_by_street_address(params[:term]).to_a.uniq(&:building_street_address)
Building.search_by_neighborhood(params[:term]).to_a.uniq(&:neighborhood)
