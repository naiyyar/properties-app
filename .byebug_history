continue
params[:type]
request.format
params
continue
end_date
(end_date-1.day).to_s(:no_timezone)
end_date.to_s(:no_timezone)
end_date.to_s(:no_timezone) - 1.day
end_date.to_s(:no_timezone)
Time.now.to_s(:no_timezone)
end_date.present?
DEV_HOSTS.include?(host)
continue
current_user
BillingService.new.get_card('cus_GXSUFv4wi6RBf0', 'card_1G0NZUHc3YOlfsKIz68LYf6H').last4
BillingService.new.get_card('cus_GXSUFv4wi6RBf0', 'card_1G0NZUHc3YOlfsKIz68LYf6H')
billing.user
billing
to_email
card
continue
card.brand
card
BillingService.new.get_card(customer_id, card.id)['brand']
BillingService.new.get_card(customer_id, card.id).brand
BillingService.new.get_card(customer_id, card.id)
BillingService.new.get_card(customer_id, card_id)
card.id
customer_id
continue
std     = start_date.present? ? start_date : Time.now
std
start_date.blank?
start_date
continue
neighborhood3
neighborhoods_parent
neighborhood
neighborhood.blank?
nb3
nb_parent
nb3 = nb_parent = 'Lower Manhattan'
nb  = 'East Village'
nb == 'Ukrainian Village'
nb3
nb_parent
nb
hood
continue
neighborhood
geo_result
continue
neighborhood
geo_result
continue
geo_result
neighborhood
continue
neighborhood
continue
neighborhood
geo_result
continue
geo_result
neighborhood
continue
neighborhood
geo_result
continue
geo_result
neighborhood
self.neighborhood
neighborhood
continue
hood
hodd
continue
hood
continue
geo_result.address_components_of_type(:neighborhood)
geo_result.address_components_of_type(:sublocality)
continue
geo_result.address_components_of_type(:sublocality)
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
geo_result
continue
nb_parent.present?
nb3
nb_parent
building_with_neighborhood3
continue
building_with_neighborhood3
building_with_neighborhood3.present?
nb3
nb_parent
continue
self
self.save
save
self
neighborhoods_parent      = hood
self
parent_neighborhoods.include?(hood)
building_with_neighborhood3.neighborhoods_parent
hood
building_with_neighborhood3
continue
self
level3_neighborhoods.include?(hood)
parent_neighborhoods.include?(hood)
hood
building_with_neighborhood3.present?
building_with_neighborhood3
continue
neighborhood
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood).where.not(neighborhoods_parent: [nil], neighborhood3: [nil]).length
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood).where.not(neighborhoods_parent: [nil], neighborhood3: [nil]).count
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood).where.not(neighborhoods_parent: [nil], neighborhood3: [nil]).first
predifined_neighborhoods.include?(hood)
hood
continue
hood
predifined_neighborhoods.sort
predifined_neighborhoods
hood
continue
neighborhood
Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood)
hood
predifined_neighborhoods.include?(hood)
building_with_nb3.neighborhoods_parent
hood
level3_neighborhoods.include?(hood)
parent_neighborhoods.include?(hood)
building_with_nb3.present?
building_with_nb3
continue
level3_neighborhoods
building_with_nb3.neighborhood3.present?
building_with_nb3.neighborhood3 || 'xx'
building_with_nb3
building_with_nb3.neighborhoods_parent 
neighborhoods_parent
building_with_nb3.neighborhood3
neighborhoods_parent
building_with_nb3.neighborhoods_parent
building_with_nb3.present?
neighborhood3
neighborhoods_parent
building_with_nb3
building_with_nb3 = Building.select(:neighborhood, :neighborhoods_parent, :neighborhood3).where(neighborhood: neighborhood).where.not(neighborhoods_parent: [nil], neighborhood3: [nil]).first
predifined_neighborhoods.include?(neighborhood)
self.neighborhood
neighborhood
continue
session
session[:view_type]
session[:view_type] == 'mapView'
params[:searched_by]
params
continue
action_name
params[:searched_by].blank?
params
session[:view_type]
session
custom_search?
(custom_search? and browser.device.mobile?)
continue
(custom_search? and browser.device.mobile?)
browser.device.mobile?
custom_search?
session
continue
building
continue
building
continue
building.name
continue
building.name
continue
building.name
continue
building.name
continue
building.name
continue
building.name
continue
building.name
continue
building.name
continue
building.name
continue
building.name
continue
building.name
building
continue
billing_card_id
billing_card_id.present?
customer_id = strp_customer_id || stripe_customer_id
stripe_customer_id
strp_customer_id
continue
@card = BillingService.new.get_card(current_user.stripe_customer_id, @billing.billing_card_id)
@billing
 request.format.pdf? or params[:type] == 'view'
continue
@billing
@billing.stripe_card_id
BillingService.new.get_card(current_user.stripe_customer_id, @billing.stripe_card_id)
continue
params[:email_to].split(',')[0].gsub(' ', '')
params[:email_to].split(',')[1].gsub(' ', '')
params[:email_to].split(',')[1]
params[:email_to].split(',')
params
continue
@featured_building.live?
@featured_building.expired?
continue
errors
valid?
continue
card.methods
card = BillingService.new.get_card('cus_GRTJi05MaFKccR', 'card_1FuaOmHc3YOlfsKIjcVWETav')
BillingService.new.get_card('cus_GRTJi05MaFKccR', 'card_1FuaOmHc3YOlfsKIjcVWETav')
card_id
customer_id
continue
BillingService.new.get_card(current_user.stripe_customer_id, @billing.stripe_card_id) rescue nil
BillingService.new.get_card(current_user.stripe_customer_id, @billing.stripe_card_id)
@billing.stripe_card_id
current_user.stripe_customer_id
continue
params[:set_customer_id]
!params[:set_customer_id]
params[:set_customer_id]
params[:set_customer_id].to_boolean
params[:set_customer_id].to_bool
