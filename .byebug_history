continue
self.average('building').avg
self.average('building').count
self.average('building')
self.rates('building').count
self.rates('building')
self.rates
self
continue
params[:controller] != 'home' && params[:action] != 'index'
params[:controller] != 'home' and params[:action] != 'index'
params
continue
coordinates
continue
@building.units.(:reviews)
@building.units.includes(:reviews)
@building.units.include(:reviews)
@building.units.count
@building.units
@buiding.units
continue
object.uploads
object.kind_of? Unit
object.kindof? Unit
object.kindof> Unit
object
continue
4/5.to_f
2/3
4/5
5/4
((4/5)*100).round(2)
(4/5*100).round(2)
5/4*100
5/5*100
5/4
4/5
4/5*100
like_votes
total_votes
continue
@building.votes.where(vote: true).count
@building.votes.count
@building.votes
continue
params
continue
@zoom
continue
params
continue
@buildings.order(:building_name)
@buildings[2]
@buildings[1]
@buildings[0]
@buildings.count
continue
@buildings.count
continue
self.uploads.last.image
self.uploads.last
self.uploads.present?
continue
params
continue
upload_params
uploadparams
params
continue
rating_user
continue
search.present?
params
continue
params['apt-search-txt'].split(' - ')
search.first.types[0]
search = Geocoder.search(params['apt-search-txt'])
params['apt-search-txt'].split(',')[0]
params['apt-search-txt']
params
continue
!rateable_obj.can_rate?(current_user, dimension)
rateable_obj.can_rate?(current_user, dimension)
current_user.present?
current_user
continue
@devise_mapping 
:user
user
resource
continue
params
continue
@reviewable
continue
search[0]
  @chrysler_building,
  @brooklyn_bridge,
Geocoder::Calculations.geographic_center([
Building.near(self.building_street_address, 20)
Venue.near(10)
Building.near(10)
self.nearby(5)
self
@building
continue
search[12].data
search[11].data
search[10].data
search[9].data
search[8].data
search[7].data
search[6].data
search[5].data
search[4].data
search[3].data
search[2].data
search[2]
search[1]
search[0]
continue
search[3]
search[2]
search[1]
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[2]
search[1]
search[0]
parent_neighborhoods.include? neighborhood
neighborhood
neighborhoods_parent
continue
search[3]
search[2]
search[1]
search[0]
continue
search[0..2]
search.class
search[4].address_components_of_type(:neighborhood)
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search[0]
continue
reviewable.class.name.downcase
reviewable.class.name
reviewable
continue
search[4]
search[3].address_components_of_type(:neighborhood)
search[3]
neighborhoods[3]
neighborhoods
predifined_neighborhoods.include? neighborhood
continue
search[2]
predifined_neighborhoods.include? neighborhood
neighborhood
continue
search[1].address_components_of_type(:neighborhood)
search[1]
search[0]
search.count
neighborhood
parent_neighborhoods.include? neighborhood
neighborhood
continue
params['apt-search-txt'].split(',')[0]
params['apt-search-txt'].split(',')
params['apt-search-txt']
params
continue
params
continue
Geocoder.coordinates(params['apt-search-txt'])
params['apt-search-txt']
continue
neighborhood
search.first.address_components_of_type(:neighborhood).first['long_name']
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
continue
geo_result.address_components_of_type(:neighborhood)
geo_result
continue
search[14]
search[13]
search[12]
search[11]
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search[0]
search
continue
search[2]
search[1]
search[0]
continue
search[1].address_components_of_type(:neighborhood)
search[1]
search[0]
search.count
continue
search[3].address_components_of_type(:neighborhood)
search[2].address_components_of_type(:neighborhood)
search[1].address_components_of_type(:neighborhood)
search[0].address_components_of_type(:neighborhood)
search.count
search = Geocoder.search([latitude, longitude])
self
continue
search = Geocoder.search(street_address)
self
self.latitude
latitude
search = Geocoder.search([latitude, longitude])
continue
@zoom
continue
search[21]
search[11]
search[10]
search[9]
search[8]
search[7]
search[6]
search[5]
search[4]
search[3]
search[2]
search[1]
search.count
geo_result
search
neighborhood
continue
@lng
