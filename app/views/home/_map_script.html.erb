<input type="text" name="zoom" class="hidden zoom" value="<%=@zoom || 13 %>" />
<input type="text" name="show_redo" class="hidden show_redo" value="0" />
<%= hidden_field_tag :cu, current_user.present? ? current_user.id : nil %>
<script src="//maps.google.com/maps/api/js?v=3.36&key=<%=ENV['GEOCODER_API_KEY']%>&libraries=places"></script>
<!-- <script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script> -->
<script type="text/javascript" charset="utf-8">
  json_array = <%= raw @hash.to_json %>;
  var position;
  var map;
  var redo_search = false;
  var currentLocation;
  var props;
  var bounds;
  var infobox;
  var newMarker;
  var markers;
  var options;
  var controlUI;
  var controlText;
  var centerControlDiv;
  var centerControl;
  var zoom = <%= @zoom || 13 %>;
  var zoomLevel = zoom;
  var dragged = false;
  var draggedOnce = false;
  var lat = <%= raw @lat.to_json %>; 
  var lng = <%= raw @lng.to_json %>;
  var seach_term = <%= raw @search_string.to_json %>;
  current_user_id = $('#cu').val();
  var width = window.innerWidth;
  var per_page_buildings = [];
  //getting all current page display building ids
  $.each($('.card.search-view-card'), function(i, j){ 
    per_page_buildings.push($(j).data('bid'));
  });
  
  // Custom options for map
  function initialize(sidebar = true) {
    <% if browser.device.mobile? %>
      position = google.maps.ControlPosition.TOP_LEFT;
    <%else%>
      position = google.maps.ControlPosition.TOP_CENTER;
    <%end%>
    if(!sidebar){
      //To fix redo button on mobile when switching between map and list view
      dragged = true;
      draggedOnce = false;
    }

    var zoom_ctrl = true;
    if(width < 600){ zoom_ctrl = false; }
    
    var options = {
                    zoomControl: zoom_ctrl,
                    disableDoubleClickZoom: false,
                    zoomControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
                    mapTypeControl: false,
                    mapTypeControlOptions: { 
                                              style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                                              position: position
                                            },
                    gestureHandling: 'greedy',
                  };

    newMarker = null;
    markers = [];
    // json for properties markers on map
    props = json_array;
    bounds = new google.maps.LatLngBounds();
    infobox = new InfoBubble({
      maxWidth: 236,
      position: new google.maps.LatLng(lng, lat),
      shadowStyle: 3,
      padding: 0,
      backgroundColor: 'rgb(255,255,255)',
      borderRadius: 2,
      arrowSize: 10,
      borderWidth: 0,
      borderColor: '#2c2c2c',
      disableAutoPan: true,
      hideCloseButton: false
    });
    
    // function that adds the markers on map
    var addMarkers = function(props, map) {
      if(props != null){
        $.each(props, function(i,prop) {
            var default_icon = ''
            var price  = (prop.price == '' || prop.price == null) ? 0 : prop.price
              //default icon only when no price info available
              default_icon = new google.maps.MarkerImage(markerIcon(price, 'red'),
                    null,null,null, null)

            var latlng = new google.maps.LatLng(prop.latitude, prop.longitude);
            var marker = new google.maps.Marker({
                position: latlng,
                map: map,
                icon: default_icon, //pinSymbol(setMcolor(prop.price)),
                // label: {
                //         text: markerLabel,
                //         color: "#333",
                //         fontSize: "12px",
                //         fontWeight: "normal"
                //       }, //labels[labelIndex++ % labels.length],
                draggable: false,
                //animation: google.maps.Animation.DROP,
            });
            bounds.extend(marker.position);
            
            //Adding building name and address on right buildings card
            if(sidebar){ 
              createSidebar(prop, marker);
          
              if(per_page_buildings.includes(prop.id)) {
                loadDisplayImage(prop.id);
              }
            }
            
            if(i == 0 || i == '0'){
              // default opening first fetured building marker
              google.maps.event.addListener(marker, 'load', (function(marker, i) {
                var object = json_array[i]
                if(object.featured){
                  loadMarkerWindow(object.id, map, marker);
                }
              })(marker, i));
            }
            google.maps.event.addListener(marker, 'click', (function(marker, i) {
              return function() {
                loadMarkerWindow(json_array[i].id, map, marker);
              }
            })(marker, i));

            google.maps.event.addDomListener(document.getElementById('header'),
            'click', function() {
              infobox.close();
            });

            google.maps.event.addDomListener(document.getElementById('content'),
            'click', function() {
              infobox.close();
            });

            google.maps.event.addListener(map, 'click', function() {
              infobox.close();
            });         

            markers.push(marker);
        });
      }
      map.fitBounds(bounds);
      var listener = google.maps.event.addListener(map, "idle", function () {
          map.setZoom(zoom);
          google.maps.event.removeListener(listener);
      });
    }
      
    var polylineoptons = {};
    <% if @boundary_coords.present? %>
      polylineoptons = { 
        paths: <%= raw @boundary_coords.to_json %>, 
        strokeColor: '#1664a4', 
        strokeOpacity: 0.7, 
        strokeWeight: 2.5, 
        fillColor: '#0e5c9a', 
        fillOpacity: 0.15, 
        clickable:false 
      }
    <%end%>

    var polylines = new google.maps.Polygon(polylineoptons);

    var set_boundaries = function(map){
      brooklyn_and_queens_neighborhoods(seach_term, map) //In search.js
    }
    
    setTimeout(function() {
      $('body').removeClass('notransition');
      map = new google.maps.Map(document.getElementById('mapViewSearch'), options);
      //Redo search only when dragging map
      createRedoButtonObject(map)
      google.maps.event.addListener(map, 'dragend', function(){
        dragged = true;
        setRedoButtonPosition(map);
      });

      google.maps.event.addListener(map, 'zoom_changed', function() {
        zoomLevel = map.getZoom();
      });
      
      map.setCenter(new google.maps.LatLng(lat,lng));
      map.setZoom(zoom);
      polylines.setMap(map);
      // Setting up boundaries using kml file
      set_boundaries(map)
      addMarkers(props, map);

      var transitLayer = new google.maps.TransitLayer();
      transitLayer.setMap(map);
      windowResizeHandler(map);
    }, 300);
  }

  //Initialize the map
  //$(document).ready(function() { initialize(); });
  google.maps.event.addDomListener(window, 'load', initialize);
  
  <% if params[:searched_by] == 'latlng' %>
    setTimeout(function() {
      if(map){
        map.setCenter(new google.maps.LatLng(lat,lng));
        redo_search = true
      }
    }, 1000);
  <%end%>
  
  var windowHeight;
  var windowWidth;
  var contentHeight;
  var contentWidth;
  var isDevice = true;
  // calculations for elements that changes size on window resize
  var resizeElements = function() {
    windowHeight = window.innerHeight;
    windowWidth = $(window).width();
    contentHeight = windowHeight - $('#header').height();
    contentWidth = $('#content').width();
    $('#leftSide').height(contentHeight);
    $('.closeLeftSide').height(contentHeight);
    $('#wrapper').height(contentHeight);
    $('#mapViewSearch').height(contentHeight);
    $('#content').height(contentHeight);
  }
  
  var windowResizeHandler = function(map) {
    if(map){
      resizeElements();
      google.maps.event.trigger(map, 'resize');
    }
  }
</script>
<%= render partial: 'buildings/favourite_script' %>