<%# if @hash.present? %>
  <input type="text" name="lat" class="hidden lat" value="<%#=@lat %>" />
  <input type="text" name="lng" class="hidden lng" value="<%#=@lng %>" />
  <input type="text" name="lng" class="hidden zoom" value="<%=@zoom || 13 %>" />
  <%= hidden_field_tag :cu, current_user.present? ? current_user.id : nil %>
  
  <script type="text/javascript" charset="utf-8">
    json_array = <%= raw @hash.to_json %>;
    var position;
    <% if browser.device.mobile? %>
      position = google.maps.ControlPosition.TOP_LEFT
    <%else%>
      position = google.maps.ControlPosition.TOP_CENTER
    <%end%>
    var map;
    var currentLocation;
    var props;
    var bounds;
    var infobox;
    var newMarker;
    var markers;
    var options;
    var controlUI;
    var controlText;
    var dragged = false;
    var lat = <%= raw @lat.to_json %>; 
    var lng = <%= raw @lng.to_json %>;
    var zoom = <%= @zoom || 13 %>;
    var seach_term = <%= raw @brooklyn_neighborhoods.to_json %>;
    current_user_id = $('#cu').val();
    var width = window.innerWidth;
   
    function initialize(sidebar = true) {
      // Custom options for map
      var zoom_ctrl = true;
      if(width < 600){
        zoom_ctrl = false;
      }
      
      options = {
        zoomControl: zoom_ctrl,
        disableDoubleClickZoom: false,
        zoomControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
        mapTypeControl: false,
        mapTypeControlOptions: { 
                                  style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                                  position: position
                                },
        gestureHandling: 'greedy',
      };

      newMarker = null;
      markers = [];
      // json for properties markers on map
      props = json_array;
      bounds = new google.maps.LatLngBounds();
      infobox = new InfoBubble({
        maxWidth: 229,
        position: new google.maps.LatLng(lng, lat),
        shadowStyle: 3,
        padding: 0,
        backgroundColor: 'rgb(255,255,255)',
        borderRadius: 2,
        arrowSize: 10,
        borderWidth: 0,
        borderColor: '#2c2c2c',
        disableAutoPan: true,
        hideCloseButton: false
      });

      // function that adds the markers on map
      var addMarkers = function(props, map) {
        $.each(props, function(i,prop) {
            var default_icon = ''
            var price  = (prop.price == '' || prop.price == null) ? 0 : prop.price
              //default icon only when no price info available
              default_icon = new google.maps.MarkerImage(markerIcon(price, 'red'),
                    null,null,null, null)

            var latlng = new google.maps.LatLng(prop.latitude, prop.longitude);
            var marker = new google.maps.Marker({
                position: latlng,
                map: map,
                icon: default_icon, //pinSymbol(setMcolor(prop.price)),
                // label: {
                //         text: markerLabel,
                //         color: "#333",
                //         fontSize: "12px",
                //         fontWeight: "normal"
                //       }, //labels[labelIndex++ % labels.length],
                draggable: false,
                //animation: google.maps.Animation.DROP,
            });
            bounds.extend(marker.position);
            if(sidebar){
              createSidebar(prop, marker);
            }
            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function() {
                  var building_id = json_array[i].id
                  //infobox.setContent(placeholder_content); //placeholder content
                  $.post('/load_infobox', {
                    object_id: building_id, 
                    building_show: false,
                    current_user_id: current_user_id,
                  }, function(data){
                    infobox.setContent(data.html);
                    //infowindow.open(handler.getMap(), google.maps.markers[index]);
                    //infobox.setPosition(latlng);
                    //if (!infobox.isOpen()) {
                      infobox.open(map, marker);
                    //}
                  });
                  
                  //infobox.setContent(infoboxContent);
                  //infobox.open(map, marker);
                }
                
            })(marker, i));

            google.maps.event.addDomListener(document.getElementById('header'),
            'click', function() {
              infobox.close();
            });

            google.maps.event.addDomListener(document.getElementById('content'),
            'click', function() {
              infobox.close();
            });

            google.maps.event.addListener(map, 'click', function() {
              infobox.close();
            });         

            markers.push(marker);
        });
        map.fitBounds(bounds);
        var listener = google.maps.event.addListener(map, "idle", function () {
            map.setZoom(zoom);
            google.maps.event.removeListener(listener);
        });
      }
        
      var polylineoptons = {};
      <% if @boundary_coords.present? %>
        polylineoptons = { 
          paths: <%= raw @boundary_coords.to_json %>, 
          strokeColor: '#1664a4', 
          strokeOpacity: 0.7, 
          strokeWeight: 2.5, 
          fillColor: '#0e5c9a', 
          fillOpacity: 0.15, 
          clickable:false 
        }
      <%end%>

      var polylines = new google.maps.Polygon(polylineoptons);

      var set_boundaries = function(map){
        brooklyn_and_queens_neighborhoods(seach_term, map) //In search.js
      }

      setTimeout(function() {
        $('body').removeClass('notransition');
        map = new google.maps.Map(document.getElementById('mapViewSearch'), options);
        map.setCenter(new google.maps.LatLng(lat,lng));
        map.setZoom(zoom);
        polylines.setMap(map);
        // Setting up boundaries using kml file
        set_boundaries(map)
        addMarkers(props, map);

        var transitLayer = new google.maps.TransitLayer();
        transitLayer.setMap(map);
        
        //Redo search only when dragging map
        google.maps.event.addListener(map, 'dragend', function(){
          dragged = true;
          controlUI.style.display = 'block';
          //To highlight redo search button on dragend
          //controlUI.style.backgroundColor = '#428bc9';
          //controlText.style.color = '#fff';
        })
        
        var centerControlDiv = document.createElement('div');
        var centerControl = new RedoButton(centerControlDiv, map);

        centerControlDiv.index = 1;
        if(width < 600){       
          map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);
        }else{
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(centerControlDiv);
        }

      }, 300);
      
    }

    // Initialize the map
    google.maps.event.addDomListener(window, 'load', initialize);

    function getMoveData(){
      if(dragged){
        currentLocation = map.getCenter()
        lat = currentLocation.lat();
        lng = currentLocation.lng();
        var query_strings = window.location.search;
        var orginal_url = window.location.href.split('?')[0];
        var  new_loc_url;
        if(query_strings.includes('sort_by') || query_strings.includes('filter')){
          new_loc_url = orginal_url+query_strings+'&latitude='+lat+'&longitude='+lng;
        }else{
          new_loc_url = orginal_url+'?latitude='+lat+'&longitude='+lng;
        }
        location.href = new_loc_url;
      }
    }

    function RedoButton(controlDiv, map) {
        // Set CSS for the control border.
        controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#428bc9';
        // controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginTop = '8px';
        controlUI.style.marginLeft = width > 600 ? '71px' : '';
        controlUI.style.textAlign = 'center';
        controlUI.title = 'Click to recenter the map';
        controlUI.style.display = 'none';
        controlDiv.appendChild(controlUI);

        // Set CSS for the control interior.
        controlText = document.createElement('div');
        controlText.style.color = '#fff';
        //controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
        controlText.style.fontSize = '16px';
        controlText.style.lineHeight = '38px';
        controlText.style.paddingLeft = '5px';
        controlText.style.paddingRight = '5px';
        controlText.innerHTML = '<span class="fa fa-refresh"></span> Redo Search Here';
        controlUI.appendChild(controlText);

        // Setup the click event listeners: simply set the map to Chicago.
        controlUI.addEventListener('click', function() {
          getMoveData();
        });

      }

    var windowHeight;
    var windowWidth;
    var contentHeight;
    var contentWidth;
    var isDevice = true;

    // calculations for elements that changes size on window resize
    var windowResizeHandler = function() {
      windowHeight = window.innerHeight;
      windowWidth = $(window).width();
      contentHeight = windowHeight - $('#header').height();
      contentWidth = $('#content').width();

      $('#leftSide').height(contentHeight);
      $('.closeLeftSide').height(contentHeight);
      $('#wrapper').height(contentHeight);
      $('#mapViewSearch').height(contentHeight);
      $('#content').height(contentHeight);
      if(map){
        google.maps.event.trigger(map, 'resize');
      }
    }

    windowResizeHandler();
    $(window).resize(function() {
      windowResizeHandler();
    });

  </script>
<%= render partial: 'buildings/favourite_script' %>